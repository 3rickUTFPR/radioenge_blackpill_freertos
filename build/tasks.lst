ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"tasks.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	pxCurrentTCB
  18              		.section	.bss.pxCurrentTCB,"aw",%nobits
  19              		.align	2
  22              	pxCurrentTCB:
  23 0000 00000000 		.space	4
  24              		.section	.bss.pxReadyTasksLists,"aw",%nobits
  25              		.align	2
  28              	pxReadyTasksLists:
  29 0000 00000000 		.space	1120
  29      00000000 
  29      00000000 
  29      00000000 
  29      00000000 
  30              		.section	.bss.xDelayedTaskList1,"aw",%nobits
  31              		.align	2
  34              	xDelayedTaskList1:
  35 0000 00000000 		.space	20
  35      00000000 
  35      00000000 
  35      00000000 
  35      00000000 
  36              		.section	.bss.xDelayedTaskList2,"aw",%nobits
  37              		.align	2
  40              	xDelayedTaskList2:
  41 0000 00000000 		.space	20
  41      00000000 
  41      00000000 
  41      00000000 
  41      00000000 
  42              		.section	.bss.pxDelayedTaskList,"aw",%nobits
  43              		.align	2
  46              	pxDelayedTaskList:
  47 0000 00000000 		.space	4
  48              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
  49              		.align	2
  52              	pxOverflowDelayedTaskList:
  53 0000 00000000 		.space	4
  54              		.section	.bss.xPendingReadyList,"aw",%nobits
  55              		.align	2
  58              	xPendingReadyList:
  59 0000 00000000 		.space	20
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 2


  59      00000000 
  59      00000000 
  59      00000000 
  59      00000000 
  60              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
  61              		.align	2
  64              	xTasksWaitingTermination:
  65 0000 00000000 		.space	20
  65      00000000 
  65      00000000 
  65      00000000 
  65      00000000 
  66              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
  67              		.align	2
  70              	uxDeletedTasksWaitingCleanUp:
  71 0000 00000000 		.space	4
  72              		.section	.bss.xSuspendedTaskList,"aw",%nobits
  73              		.align	2
  76              	xSuspendedTaskList:
  77 0000 00000000 		.space	20
  77      00000000 
  77      00000000 
  77      00000000 
  77      00000000 
  78              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
  79              		.align	2
  82              	uxCurrentNumberOfTasks:
  83 0000 00000000 		.space	4
  84              		.section	.bss.xTickCount,"aw",%nobits
  85              		.align	2
  88              	xTickCount:
  89 0000 00000000 		.space	4
  90              		.section	.bss.uxTopReadyPriority,"aw",%nobits
  91              		.align	2
  94              	uxTopReadyPriority:
  95 0000 00000000 		.space	4
  96              		.section	.bss.xSchedulerRunning,"aw",%nobits
  97              		.align	2
 100              	xSchedulerRunning:
 101 0000 00000000 		.space	4
 102              		.section	.bss.xPendedTicks,"aw",%nobits
 103              		.align	2
 106              	xPendedTicks:
 107 0000 00000000 		.space	4
 108              		.section	.bss.xYieldPending,"aw",%nobits
 109              		.align	2
 112              	xYieldPending:
 113 0000 00000000 		.space	4
 114              		.section	.bss.xNumOfOverflows,"aw",%nobits
 115              		.align	2
 118              	xNumOfOverflows:
 119 0000 00000000 		.space	4
 120              		.section	.bss.uxTaskNumber,"aw",%nobits
 121              		.align	2
 124              	uxTaskNumber:
 125 0000 00000000 		.space	4
 126              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 3


 127              		.align	2
 130              	xNextTaskUnblockTime:
 131 0000 00000000 		.space	4
 132              		.section	.bss.xIdleTaskHandle,"aw",%nobits
 133              		.align	2
 136              	xIdleTaskHandle:
 137 0000 00000000 		.space	4
 138              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 139              		.align	2
 142              	uxSchedulerSuspended:
 143 0000 00000000 		.space	4
 144              		.section	.bss.ulTaskSwitchedInTime,"aw",%nobits
 145              		.align	2
 148              	ulTaskSwitchedInTime:
 149 0000 00000000 		.space	4
 150              		.section	.bss.ulTotalRunTime,"aw",%nobits
 151              		.align	2
 154              	ulTotalRunTime:
 155 0000 00000000 		.space	4
 156              		.section	.text.xTaskCreateStatic,"ax",%progbits
 157              		.align	1
 158              		.global	xTaskCreateStatic
 159              		.arch armv7e-m
 160              		.syntax unified
 161              		.thumb
 162              		.thumb_func
 163              		.fpu fpv4-sp-d16
 165              	xTaskCreateStatic:
 166              	.LFB4:
 167              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FreeRTOS Kernel V10.3.1
   3:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 4


  28:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Standard includes. */
  29:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  30:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <string.h>
  31:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  34:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
  35:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  37:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* FreeRTOS includes. */
  38:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  39:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "task.h"
  40:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "timers.h"
  41:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "stack_macros.h"
  42:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  44:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  45:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** for the header files above, but not in this file, in order to generate the
  46:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** correct privileged Vs unprivileged linkage and placement. */
  47:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  48:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  49:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  50:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** functions but without including stdio.h here. */
  51:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  52:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  53:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  54:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  56:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#include <stdio.h>
  57:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  60:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  61:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed just because a higher priority task has been woken. */
  62:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  63:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
  64:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  65:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
  66:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  68:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  69:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  70:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  71:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
  73:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  74:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
  75:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  76:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  77:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Bits used to recored how a task's stack and TCB were allocated. */
  79:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  80:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  81:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
  82:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  83:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* If any of the following are set then task stacks are filled with a known
  84:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** value so the high water mark can be determined.  If none of the following are
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 5


  85:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
  86:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
  87:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
  88:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
  89:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
  90:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
  91:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  92:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
  93:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
  94:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  95:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskRUNNING_CHAR		( 'X' )
  96:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
  97:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
  98:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
  99:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * global, rather than file scope.
 104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define static
 107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifndef configIDLE_TASK_NAME
 112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	microcontroller architecture. */
 120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	state task. */
 123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			--uxTopPriority;																			\
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 6


 142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	being used. */
 155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	architecture being used. */
 163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																								\
 171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** count overflows. */
 198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 7


 199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {																									\
 200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxTemp;																					\
 201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xNumOfOverflows++;																				\
 209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle ) )
 232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** to its original value when it is released. */
 241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * (the task's run time environment, including register values)
 251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock 			/* The old naming convention is used to prevent breaking kern
 253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 8


 256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks.
 304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
 306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for additional information. */
 307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		struct	_reent xNewLib_reent;
 308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint8_t ucNotifyState;
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 9


 313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* See the comments in FreeRTOS.h with the definition of
 316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolida
 318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t ucDelayAborted;
 323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_POSIX_ERRNO == 1 )
 326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		int iTaskErrno;
 327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** } tskTCB;
 330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef tskTCB TCB_t;
 334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** which static variables must be declared volatile. */
 337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------
 340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** xDelayedTaskList1 and xDelayedTaskList2 could be move to function scople but
 341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** doing so breaks some kernel aware debuggers and debuggers that rely on removing
 342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the static qualifier. */
 343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Global POSIX errno. Its value is changed upon context switching to match
 364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the errno of the currently running task. */
 365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_POSIX_ERRNO == 1 )
 366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	int FreeRTOS_errno = 0;
 367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Other file private variables. --------------------------------*/
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 10


 370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
 372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xPendedTicks 			= ( TickType_t ) 0U;
 375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** accessed from a critical section. */
 389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Do not move these variables to function scope as doing so prevents the
 394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	code working with debuggers that need to remove the static qualifier. */
 395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -restore */
 401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationTickHook( void ); /*lint !e526 Symbol not defined as it is an application 
 414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /**
 426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 11


 427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is in any other state.
 429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 12


 484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * a suspended list, etc.).
 485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
 511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGE
 513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * set to a value other than 1.
 524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * will exit the Blocked state.
 534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*
 540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 13


 541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * human readable tables of task information.
 542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 */
 543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * dynamically to fill in the structure's members.
 550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * under the control of the scheduler.
 563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * called by the function.
 570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 168              		.loc 1 588 2
 169              		.cfi_startproc
 170              		@ args = 12, pretend = 0, frame = 40
 171              		@ frame_needed = 1, uses_anonymous_args = 0
 172 0000 80B5     		push	{r7, lr}
 173              	.LCFI0:
 174              		.cfi_def_cfa_offset 8
 175              		.cfi_offset 7, -8
 176              		.cfi_offset 14, -4
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 14


 177 0002 8EB0     		sub	sp, sp, #56
 178              	.LCFI1:
 179              		.cfi_def_cfa_offset 64
 180 0004 04AF     		add	r7, sp, #16
 181              	.LCFI2:
 182              		.cfi_def_cfa 7, 48
 183 0006 F860     		str	r0, [r7, #12]
 184 0008 B960     		str	r1, [r7, #8]
 185 000a 7A60     		str	r2, [r7, #4]
 186 000c 3B60     		str	r3, [r7]
 589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 187              		.loc 1 592 3
 188 000e 7B6B     		ldr	r3, [r7, #52]
 189 0010 002B     		cmp	r3, #0
 190 0012 0AD1     		bne	.L2
 191              	.LBB126:
 192              	.LBB127:
 193              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V10.3.1
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 15


  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 16


  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 17


 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 194              		.loc 2 195 2
 195              		.syntax unified
 196              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 197 0014 4FF05003 			mov r3, #80												
 198 0018 83F31188 		msr basepri, r3											
 199 001c BFF36F8F 		isb														
 200 0020 BFF34F8F 		dsb														
 201              	
 202              	@ 0 "" 2
 203              		.thumb
 204              		.syntax unified
 205 0024 3B62     		str	r3, [r7, #32]
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 18


 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 206              		.loc 2 203 1
 207 0026 00BF     		nop
 208              	.L3:
 209              	.LBE127:
 210              	.LBE126:
 211              		.loc 1 592 3 discriminator 1
 212 0028 FEE7     		b	.L3
 213              	.L2:
 593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 214              		.loc 1 593 3
 215 002a BB6B     		ldr	r3, [r7, #56]
 216 002c 002B     		cmp	r3, #0
 217 002e 0AD1     		bne	.L4
 218              	.LBB128:
 219              	.LBB129:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 220              		.loc 2 195 2
 221              		.syntax unified
 222              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 223 0030 4FF05003 			mov r3, #80												
 224 0034 83F31188 		msr basepri, r3											
 225 0038 BFF36F8F 		isb														
 226 003c BFF34F8F 		dsb														
 227              	
 228              	@ 0 "" 2
 229              		.thumb
 230              		.syntax unified
 231 0040 FB61     		str	r3, [r7, #28]
 232              		.loc 2 203 1
 233 0042 00BF     		nop
 234              	.L5:
 235              	.LBE129:
 236              	.LBE128:
 237              		.loc 1 593 3 discriminator 2
 238 0044 FEE7     		b	.L5
 239              	.L4:
 240              	.LBB130:
 594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure. */
 600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
 241              		.loc 1 600 20
 242 0046 6423     		movs	r3, #100
 243 0048 3B61     		str	r3, [r7, #16]
 601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 244              		.loc 1 601 4
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 19


 245 004a 3B69     		ldr	r3, [r7, #16]
 246 004c 642B     		cmp	r3, #100
 247 004e 0AD0     		beq	.L6
 248              	.LBB131:
 249              	.LBB132:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 250              		.loc 2 195 2
 251              		.syntax unified
 252              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 253 0050 4FF05003 			mov r3, #80												
 254 0054 83F31188 		msr basepri, r3											
 255 0058 BFF36F8F 		isb														
 256 005c BFF34F8F 		dsb														
 257              	
 258              	@ 0 "" 2
 259              		.thumb
 260              		.syntax unified
 261 0060 BB61     		str	r3, [r7, #24]
 262              		.loc 2 203 1
 263 0062 00BF     		nop
 264              	.L7:
 265              	.LBE132:
 266              	.LBE131:
 267              		.loc 1 601 4 discriminator 3
 268 0064 FEE7     		b	.L7
 269              	.L6:
 602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 270              		.loc 1 602 4
 271 0066 3B69     		ldr	r3, [r7, #16]
 272              	.LBE130:
 603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configASSERT_DEFINED */
 605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 273              		.loc 1 607 5
 274 0068 BB6B     		ldr	r3, [r7, #56]
 275 006a 002B     		cmp	r3, #0
 276 006c 1ED0     		beq	.L8
 277              		.loc 1 607 32 discriminator 1
 278 006e 7B6B     		ldr	r3, [r7, #52]
 279 0070 002B     		cmp	r3, #0
 280 0072 1BD0     		beq	.L8
 608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function - use them. */
 611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures ar
 281              		.loc 1 611 13
 282 0074 BB6B     		ldr	r3, [r7, #56]
 283 0076 7B62     		str	r3, [r7, #36]
 612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 284              		.loc 1 612 22
 285 0078 7B6A     		ldr	r3, [r7, #36]
 286 007a 7A6B     		ldr	r2, [r7, #52]
 287 007c 1A63     		str	r2, [r3, #48]
 613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consoli
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 20


 615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 288              		.loc 1 618 37
 289 007e 7B6A     		ldr	r3, [r7, #36]
 290 0080 0222     		movs	r2, #2
 291 0082 83F86120 		strb	r2, [r3, #97]
 619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 292              		.loc 1 622 4
 293 0086 0023     		movs	r3, #0
 294 0088 0393     		str	r3, [sp, #12]
 295 008a 7B6A     		ldr	r3, [r7, #36]
 296 008c 0293     		str	r3, [sp, #8]
 297 008e 07F11403 		add	r3, r7, #20
 298 0092 0193     		str	r3, [sp, #4]
 299 0094 3B6B     		ldr	r3, [r7, #48]
 300 0096 0093     		str	r3, [sp]
 301 0098 3B68     		ldr	r3, [r7]
 302 009a 7A68     		ldr	r2, [r7, #4]
 303 009c B968     		ldr	r1, [r7, #8]
 304 009e F868     		ldr	r0, [r7, #12]
 305 00a0 FFF7FEFF 		bl	prvInitialiseNewTask
 623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 306              		.loc 1 623 4
 307 00a4 786A     		ldr	r0, [r7, #36]
 308 00a6 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 309 00aa 01E0     		b	.L9
 310              	.L8:
 624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = NULL;
 311              		.loc 1 627 12
 312 00ac 0023     		movs	r3, #0
 313 00ae 7B61     		str	r3, [r7, #20]
 314              	.L9:
 628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 315              		.loc 1 630 10
 316 00b0 7B69     		ldr	r3, [r7, #20]
 631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 317              		.loc 1 631 2
 318 00b2 1846     		mov	r0, r3
 319 00b4 2837     		adds	r7, r7, #40
 320              	.LCFI3:
 321              		.cfi_def_cfa_offset 8
 322 00b6 BD46     		mov	sp, r7
 323              	.LCFI4:
 324              		.cfi_def_cfa_register 13
 325              		@ sp needed
 326 00b8 80BD     		pop	{r7, pc}
 327              		.cfi_endproc
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 21


 328              	.LFE4:
 330              		.section	.text.xTaskCreate,"ax",%progbits
 331              		.align	1
 332              		.global	xTaskCreate
 333              		.syntax unified
 334              		.thumb
 335              		.thumb_func
 336              		.fpu fpv4-sp-d16
 338              	xTaskCreate:
 339              	.LFB5:
 632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Store the stack location in the TCB. */
 654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pcName,
 666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
 667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pvParameters,
 668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->uxPriority,
 669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxCreatedTask, pxNewTCB,
 670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->xRegions );
 671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 22


 679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Store the stack location in the TCB. */
 701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
 706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task had a statically allocated stack in case it is
 707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pcName,
 714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->uxPriority,
 717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->xRegions );
 719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 23


 736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							void * const pvParameters,
 737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							UBaseType_t uxPriority,
 738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 340              		.loc 1 739 2
 341              		.cfi_startproc
 342              		@ args = 8, pretend = 0, frame = 32
 343              		@ frame_needed = 1, uses_anonymous_args = 0
 344 0000 80B5     		push	{r7, lr}
 345              	.LCFI5:
 346              		.cfi_def_cfa_offset 8
 347              		.cfi_offset 7, -8
 348              		.cfi_offset 14, -4
 349 0002 8CB0     		sub	sp, sp, #48
 350              	.LCFI6:
 351              		.cfi_def_cfa_offset 56
 352 0004 04AF     		add	r7, sp, #16
 353              	.LCFI7:
 354              		.cfi_def_cfa 7, 40
 355 0006 F860     		str	r0, [r7, #12]
 356 0008 B960     		str	r1, [r7, #8]
 357 000a 3B60     		str	r3, [r7]
 358 000c 1346     		mov	r3, r2	@ movhi
 359 000e FB80     		strh	r3, [r7, #6]	@ movhi
 360              	.LBB133:
 740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the TCB then the stack. */
 746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allocation is being used. */
 751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				be deleted later if required. */
 758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxNewTCB );
 764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB = NULL;
 765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxStack;
 771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 24


 772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079
 361              		.loc 1 773 32
 362 0010 FB88     		ldrh	r3, [r7, #6]
 363              		.loc 1 773 14
 364 0012 9B00     		lsls	r3, r3, #2
 365 0014 1846     		mov	r0, r3
 366 0016 FFF7FEFF 		bl	pvPortMalloc
 367 001a 7861     		str	r0, [r7, #20]
 774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxStack != NULL )
 368              		.loc 1 775 6
 369 001c 7B69     		ldr	r3, [r7, #20]
 370 001e 002B     		cmp	r3, #0
 371 0020 0ED0     		beq	.L12
 776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the TCB. */
 778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returne
 372              		.loc 1 778 28
 373 0022 6420     		movs	r0, #100
 374 0024 FFF7FEFF 		bl	pvPortMalloc
 375 0028 F861     		str	r0, [r7, #28]
 779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB != NULL )
 376              		.loc 1 780 7
 377 002a FB69     		ldr	r3, [r7, #28]
 378 002c 002B     		cmp	r3, #0
 379 002e 03D0     		beq	.L13
 781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Store the stack location in the TCB. */
 783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 380              		.loc 1 783 24
 381 0030 FB69     		ldr	r3, [r7, #28]
 382 0032 7A69     		ldr	r2, [r7, #20]
 383 0034 1A63     		str	r2, [r3, #48]
 384 0036 05E0     		b	.L14
 385              	.L13:
 784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
 786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it again. */
 789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxStack );
 386              		.loc 1 789 6
 387 0038 7869     		ldr	r0, [r7, #20]
 388 003a FFF7FEFF 		bl	vPortFree
 389 003e 01E0     		b	.L14
 390              	.L12:
 790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = NULL;
 391              		.loc 1 794 14
 392 0040 0023     		movs	r3, #0
 393 0042 FB61     		str	r3, [r7, #28]
 394              	.L14:
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 25


 395              	.LBE133:
 795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxNewTCB != NULL )
 396              		.loc 1 799 5
 397 0044 FB69     		ldr	r3, [r7, #28]
 398 0046 002B     		cmp	r3, #0
 399 0048 17D0     		beq	.L15
 800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consoli
 802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 400              		.loc 1 805 37
 401 004a FB69     		ldr	r3, [r7, #28]
 402 004c 0022     		movs	r2, #0
 403 004e 83F86120 		strb	r2, [r3, #97]
 806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 404              		.loc 1 809 4
 405 0052 FA88     		ldrh	r2, [r7, #6]
 406 0054 0023     		movs	r3, #0
 407 0056 0393     		str	r3, [sp, #12]
 408 0058 FB69     		ldr	r3, [r7, #28]
 409 005a 0293     		str	r3, [sp, #8]
 410 005c FB6A     		ldr	r3, [r7, #44]
 411 005e 0193     		str	r3, [sp, #4]
 412 0060 BB6A     		ldr	r3, [r7, #40]
 413 0062 0093     		str	r3, [sp]
 414 0064 3B68     		ldr	r3, [r7]
 415 0066 B968     		ldr	r1, [r7, #8]
 416 0068 F868     		ldr	r0, [r7, #12]
 417 006a FFF7FEFF 		bl	prvInitialiseNewTask
 810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 418              		.loc 1 810 4
 419 006e F869     		ldr	r0, [r7, #28]
 420 0070 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 421              		.loc 1 811 12
 422 0074 0123     		movs	r3, #1
 423 0076 BB61     		str	r3, [r7, #24]
 424 0078 02E0     		b	.L16
 425              	.L15:
 812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 426              		.loc 1 815 12
 427 007a 4FF0FF33 		mov	r3, #-1
 428 007e BB61     		str	r3, [r7, #24]
 429              	.L16:
 816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 26


 817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 430              		.loc 1 818 10
 431 0080 BB69     		ldr	r3, [r7, #24]
 819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 432              		.loc 1 819 2
 433 0082 1846     		mov	r0, r3
 434 0084 2037     		adds	r7, r7, #32
 435              	.LCFI8:
 436              		.cfi_def_cfa_offset 8
 437 0086 BD46     		mov	sp, r7
 438              	.LCFI9:
 439              		.cfi_def_cfa_register 13
 440              		@ sp needed
 441 0088 80BD     		pop	{r7, pc}
 442              		.cfi_endproc
 443              	.LFE5:
 445              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 446              		.align	1
 447              		.syntax unified
 448              		.thumb
 449              		.thumb_func
 450              		.fpu fpv4-sp-d16
 452              	prvInitialiseNewTask:
 453              	.LFB6:
 820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions )
 832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 454              		.loc 1 832 1
 455              		.cfi_startproc
 456              		@ args = 16, pretend = 0, frame = 32
 457              		@ frame_needed = 1, uses_anonymous_args = 0
 458 0000 80B5     		push	{r7, lr}
 459              	.LCFI10:
 460              		.cfi_def_cfa_offset 8
 461              		.cfi_offset 7, -8
 462              		.cfi_offset 14, -4
 463 0002 88B0     		sub	sp, sp, #32
 464              	.LCFI11:
 465              		.cfi_def_cfa_offset 40
 466 0004 00AF     		add	r7, sp, #0
 467              	.LCFI12:
 468              		.cfi_def_cfa_register 7
 469 0006 F860     		str	r0, [r7, #12]
 470 0008 B960     		str	r1, [r7, #8]
 471 000a 7A60     		str	r2, [r7, #4]
 472 000c 3B60     		str	r3, [r7]
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 27


 833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t x;
 835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Should the task be created in privileged mode? */
 838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xRunPrivileged;
 839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 473              		.loc 1 854 28
 474 000e 3B6B     		ldr	r3, [r7, #48]
 475 0010 186B     		ldr	r0, [r3, #48]
 476              		.loc 1 854 12
 477 0012 7B68     		ldr	r3, [r7, #4]
 478 0014 9B00     		lsls	r3, r3, #2
 479 0016 1A46     		mov	r2, r3
 480 0018 A521     		movs	r1, #165
 481 001a FFF7FEFF 		bl	memset
 855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	by the port. */
 862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 482              		.loc 1 864 29
 483 001e 3B6B     		ldr	r3, [r7, #48]
 484 0020 1A6B     		ldr	r2, [r3, #48]
 485              		.loc 1 864 38
 486 0022 7B68     		ldr	r3, [r7, #4]
 487 0024 03F18043 		add	r3, r3, #1073741824
 488 0028 013B     		subs	r3, r3, #1
 489 002a 9B00     		lsls	r3, r3, #2
 490              		.loc 1 864 16
 491 002c 1344     		add	r3, r3, r2
 492 002e BB61     		str	r3, [r7, #24]
 865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 493              		.loc 1 865 40
 494 0030 BB69     		ldr	r3, [r7, #24]
 495              		.loc 1 865 81
 496 0032 23F00703 		bic	r3, r3, #7
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 28


 497              		.loc 1 865 16
 498 0036 BB61     		str	r3, [r7, #24]
 866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 499              		.loc 1 868 3
 500 0038 BB69     		ldr	r3, [r7, #24]
 501 003a 03F00703 		and	r3, r3, #7
 502 003e 002B     		cmp	r3, #0
 503 0040 0AD0     		beq	.L19
 504              	.LBB134:
 505              	.LBB135:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 506              		.loc 2 195 2
 507              		.syntax unified
 508              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 509 0042 4FF05003 			mov r3, #80												
 510 0046 83F31188 		msr basepri, r3											
 511 004a BFF36F8F 		isb														
 512 004e BFF34F8F 		dsb														
 513              	
 514              	@ 0 "" 2
 515              		.thumb
 516              		.syntax unified
 517 0052 7B61     		str	r3, [r7, #20]
 518              		.loc 2 203 1
 519 0054 00BF     		nop
 520              	.L20:
 521              	.LBE135:
 522              	.LBE134:
 523              		.loc 1 868 3 discriminator 1
 524 0056 FEE7     		b	.L20
 525              	.L19:
 869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Also record the stack's high address, which may assist
 873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			debugging. */
 874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 526              		.loc 1 874 27
 527 0058 3B6B     		ldr	r3, [r7, #48]
 528 005a BA69     		ldr	r2, [r7, #24]
 529 005c 5A64     		str	r2, [r3, #68]
 875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		performed. */
 887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 29


 889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the task name in the TCB. */
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pcName != NULL )
 530              		.loc 1 892 4
 531 005e BB68     		ldr	r3, [r7, #8]
 532 0060 002B     		cmp	r3, #0
 533 0062 1FD0     		beq	.L21
 893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 534              		.loc 1 894 10
 535 0064 0023     		movs	r3, #0
 536 0066 FB61     		str	r3, [r7, #28]
 537              		.loc 1 894 3
 538 0068 12E0     		b	.L22
 539              	.L25:
 895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 540              		.loc 1 896 38
 541 006a BA68     		ldr	r2, [r7, #8]
 542 006c FB69     		ldr	r3, [r7, #28]
 543 006e 1344     		add	r3, r3, r2
 544 0070 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 545              		.loc 1 896 30
 546 0072 3A6B     		ldr	r2, [r7, #48]
 547 0074 FB69     		ldr	r3, [r7, #28]
 548 0076 1344     		add	r3, r3, r2
 549 0078 3433     		adds	r3, r3, #52
 550 007a 0A46     		mov	r2, r1
 551 007c 1A70     		strb	r2, [r3]
 897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configMAX_TASK_NAME_LEN characters just in case the memory after the
 900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			string is not accessible (extremely unlikely). */
 901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pcName[ x ] == ( char ) 0x00 )
 552              		.loc 1 901 14
 553 007e BA68     		ldr	r2, [r7, #8]
 554 0080 FB69     		ldr	r3, [r7, #28]
 555 0082 1344     		add	r3, r3, r2
 556 0084 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 557              		.loc 1 901 6
 558 0086 002B     		cmp	r3, #0
 559 0088 06D0     		beq	.L29
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 560              		.loc 1 894 77 discriminator 2
 561 008a FB69     		ldr	r3, [r7, #28]
 562 008c 0133     		adds	r3, r3, #1
 563 008e FB61     		str	r3, [r7, #28]
 564              	.L22:
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 565              		.loc 1 894 3 discriminator 1
 566 0090 FB69     		ldr	r3, [r7, #28]
 567 0092 0F2B     		cmp	r3, #15
 568 0094 E9D9     		bls	.L25
 569 0096 00E0     		b	.L24
 570              	.L29:
 902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 30


 903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				break;
 571              		.loc 1 903 5
 572 0098 00BF     		nop
 573              	.L24:
 904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the name string is terminated in the case that the string length
 912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was greater or equal to configMAX_TASK_NAME_LEN. */
 913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 574              		.loc 1 913 55
 575 009a 3B6B     		ldr	r3, [r7, #48]
 576 009c 0022     		movs	r2, #0
 577 009e 83F84320 		strb	r2, [r3, #67]
 578 00a2 03E0     		b	.L26
 579              	.L21:
 914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The task has not been given a name, so just ensure there is a NULL
 918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		terminator when it is read out. */
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 580              		.loc 1 919 29
 581 00a4 3B6B     		ldr	r3, [r7, #48]
 582 00a6 0022     		movs	r2, #0
 583 00a8 83F83420 		strb	r2, [r3, #52]
 584              	.L26:
 920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
 924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 585              		.loc 1 924 4
 586 00ac BB6A     		ldr	r3, [r7, #40]
 587 00ae 372B     		cmp	r3, #55
 588 00b0 01D9     		bls	.L27
 925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 589              		.loc 1 926 14
 590 00b2 3723     		movs	r3, #55
 591 00b4 BB62     		str	r3, [r7, #40]
 592              	.L27:
 927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 593              		.loc 1 933 23
 594 00b6 3B6B     		ldr	r3, [r7, #48]
 595 00b8 BA6A     		ldr	r2, [r7, #40]
 596 00ba DA62     		str	r2, [r3, #44]
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 31


 934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 597              		.loc 1 936 28
 598 00bc 3B6B     		ldr	r3, [r7, #48]
 599 00be BA6A     		ldr	r2, [r7, #40]
 600 00c0 1A65     		str	r2, [r3, #80]
 937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 601              		.loc 1 937 27
 602 00c2 3B6B     		ldr	r3, [r7, #48]
 603 00c4 0022     		movs	r2, #0
 604 00c6 5A65     		str	r2, [r3, #84]
 938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 605              		.loc 1 941 2
 606 00c8 3B6B     		ldr	r3, [r7, #48]
 607 00ca 0433     		adds	r3, r3, #4
 608 00cc 1846     		mov	r0, r3
 609 00ce FFF7FEFF 		bl	vListInitialiseItem
 942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 610              		.loc 1 942 2
 611 00d2 3B6B     		ldr	r3, [r7, #48]
 612 00d4 1833     		adds	r3, r3, #24
 613 00d6 1846     		mov	r0, r3
 614 00d8 FFF7FEFF 		bl	vListInitialiseItem
 943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 615              		.loc 1 946 2
 616 00dc 3B6B     		ldr	r3, [r7, #48]
 617 00de 3A6B     		ldr	r2, [r7, #48]
 618 00e0 1A61     		str	r2, [r3, #16]
 947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
 949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 619              		.loc 1 949 2
 620 00e2 BB6A     		ldr	r3, [r7, #40]
 621 00e4 C3F13802 		rsb	r2, r3, #56
 622 00e8 3B6B     		ldr	r3, [r7, #48]
 623 00ea 9A61     		str	r2, [r3, #24]
 950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 624              		.loc 1 950 2
 625 00ec 3B6B     		ldr	r3, [r7, #48]
 626 00ee 3A6B     		ldr	r2, [r7, #48]
 627 00f0 5A62     		str	r2, [r3, #36]
 951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 32


 960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 628              		.loc 1 966 30
 629 00f2 3B6B     		ldr	r3, [r7, #48]
 630 00f4 0022     		movs	r2, #0
 631 00f6 9A65     		str	r2, [r3, #88]
 967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
 975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
 978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 632              		.loc 1 992 29
 633 00f8 3B6B     		ldr	r3, [r7, #48]
 634 00fa 0022     		movs	r2, #0
 635 00fc DA65     		str	r2, [r3, #92]
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 636              		.loc 1 993 27
 637 00fe 3B6B     		ldr	r3, [r7, #48]
 638 0100 0022     		movs	r2, #0
 639 0102 83F86020 		strb	r2, [r3, #96]
 994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Initialise this task's Newlib reent structure.
1000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
1001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for additional information. */
1002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
1003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 33


1005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
1007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
1009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
1011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
1013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
1014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
1015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the top of stack variable is updated. */
1016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
1017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the port has capability to detect stack overflow,
1019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pass the stack end address to the stack initialization
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function as well. */
1021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else /* portSTACK_GROWTH */
1028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* portSTACK_GROWTH */
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPriv
1036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the port has capability to detect stack overflow,
1042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pass the stack end address to the stack initialization
1043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function as well. */
1044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else /* portSTACK_GROWTH */
1051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* portSTACK_GROWTH */
1055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 640              		.loc 1 1058 29
 641 0106 3A68     		ldr	r2, [r7]
 642 0108 F968     		ldr	r1, [r7, #12]
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 34


 643 010a B869     		ldr	r0, [r7, #24]
 644 010c FFF7FEFF 		bl	pxPortInitialiseStack
 645 0110 0246     		mov	r2, r0
 646              		.loc 1 1058 27
 647 0112 3B6B     		ldr	r3, [r7, #48]
 648 0114 1A60     		str	r2, [r3]
1059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
1063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxCreatedTask != NULL )
 649              		.loc 1 1064 4
 650 0116 FB6A     		ldr	r3, [r7, #44]
 651 0118 002B     		cmp	r3, #0
 652 011a 02D0     		beq	.L30
1065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
1067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 653              		.loc 1 1068 18
 654 011c FB6A     		ldr	r3, [r7, #44]
 655 011e 3A6B     		ldr	r2, [r7, #48]
 656 0120 1A60     		str	r2, [r3]
 657              	.L30:
1069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 658              		.loc 1 1074 1
 659 0122 00BF     		nop
 660 0124 2037     		adds	r7, r7, #32
 661              	.LCFI13:
 662              		.cfi_def_cfa_offset 8
 663 0126 BD46     		mov	sp, r7
 664              	.LCFI14:
 665              		.cfi_def_cfa_register 13
 666              		@ sp needed
 667 0128 80BD     		pop	{r7, pc}
 668              		.cfi_endproc
 669              	.LFE6:
 671              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 672              		.align	1
 673              		.syntax unified
 674              		.thumb
 675              		.thumb_func
 676              		.fpu fpv4-sp-d16
 678              	prvAddNewTaskToReadyList:
 679              	.LFB7:
1075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 680              		.loc 1 1078 1
 681              		.cfi_startproc
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 35


 682              		@ args = 0, pretend = 0, frame = 8
 683              		@ frame_needed = 1, uses_anonymous_args = 0
 684 0000 80B5     		push	{r7, lr}
 685              	.LCFI15:
 686              		.cfi_def_cfa_offset 8
 687              		.cfi_offset 7, -8
 688              		.cfi_offset 14, -4
 689 0002 82B0     		sub	sp, sp, #8
 690              	.LCFI16:
 691              		.cfi_def_cfa_offset 16
 692 0004 00AF     		add	r7, sp, #0
 693              	.LCFI17:
 694              		.cfi_def_cfa_register 7
 695 0006 7860     		str	r0, [r7, #4]
1079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	updated. */
1081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 696              		.loc 1 1081 2
 697 0008 FFF7FEFF 		bl	vPortEnterCritical
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxCurrentNumberOfTasks++;
 698              		.loc 1 1083 25
 699 000c 2D4B     		ldr	r3, .L37
 700 000e 1B68     		ldr	r3, [r3]
 701 0010 0133     		adds	r3, r3, #1
 702 0012 2C4A     		ldr	r2, .L37
 703 0014 1360     		str	r3, [r2]
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 704              		.loc 1 1084 20
 705 0016 2C4B     		ldr	r3, .L37+4
 706 0018 1B68     		ldr	r3, [r3]
 707              		.loc 1 1084 5
 708 001a 002B     		cmp	r3, #0
 709 001c 09D1     		bne	.L32
1085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the suspended state - make this the current task. */
1088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
 710              		.loc 1 1088 17
 711 001e 2A4A     		ldr	r2, .L37+4
 712 0020 7B68     		ldr	r3, [r7, #4]
 713 0022 1360     		str	r3, [r2]
1089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 714              		.loc 1 1090 31
 715 0024 274B     		ldr	r3, .L37
 716 0026 1B68     		ldr	r3, [r3]
 717              		.loc 1 1090 6
 718 0028 012B     		cmp	r3, #1
 719 002a 10D1     		bne	.L33
1091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
1093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				initialisation required.  We will not recover if this call
1094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				fails, but we will report the failure. */
1095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseTaskLists();
 720              		.loc 1 1095 5
 721 002c FFF7FEFF 		bl	prvInitialiseTaskLists
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 36


 722 0030 0DE0     		b	.L33
 723              	.L32:
1096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
1105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			current task if it is the highest priority task to be created
1106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			so far. */
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
 724              		.loc 1 1107 26
 725 0032 264B     		ldr	r3, .L37+8
 726 0034 1B68     		ldr	r3, [r3]
 727              		.loc 1 1107 6
 728 0036 002B     		cmp	r3, #0
 729 0038 09D1     		bne	.L33
1108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 730              		.loc 1 1109 21
 731 003a 234B     		ldr	r3, .L37+4
 732 003c 1B68     		ldr	r3, [r3]
 733 003e DA6A     		ldr	r2, [r3, #44]
 734              		.loc 1 1109 45
 735 0040 7B68     		ldr	r3, [r7, #4]
 736 0042 DB6A     		ldr	r3, [r3, #44]
 737              		.loc 1 1109 7
 738 0044 9A42     		cmp	r2, r3
 739 0046 02D8     		bhi	.L33
1110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
 740              		.loc 1 1111 19
 741 0048 1F4A     		ldr	r2, .L37+4
 742 004a 7B68     		ldr	r3, [r7, #4]
 743 004c 1360     		str	r3, [r2]
 744              	.L33:
1112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTaskNumber++;
 745              		.loc 1 1124 15
 746 004e 204B     		ldr	r3, .L37+12
 747 0050 1B68     		ldr	r3, [r3]
 748 0052 0133     		adds	r3, r3, #1
 749 0054 1E4A     		ldr	r2, .L37+12
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 37


 750 0056 1360     		str	r3, [r2]
1125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
 751              		.loc 1 1129 26
 752 0058 1D4B     		ldr	r3, .L37+12
 753 005a 1A68     		ldr	r2, [r3]
 754 005c 7B68     		ldr	r3, [r7, #4]
 755 005e 9A64     		str	r2, [r3, #72]
1130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
 756              		.loc 1 1134 3
 757 0060 7B68     		ldr	r3, [r7, #4]
 758 0062 DA6A     		ldr	r2, [r3, #44]
 759 0064 1B4B     		ldr	r3, .L37+16
 760 0066 1B68     		ldr	r3, [r3]
 761 0068 9A42     		cmp	r2, r3
 762 006a 03D9     		bls	.L34
 763              		.loc 1 1134 3 is_stmt 0 discriminator 1
 764 006c 7B68     		ldr	r3, [r7, #4]
 765 006e DB6A     		ldr	r3, [r3, #44]
 766 0070 184A     		ldr	r2, .L37+16
 767 0072 1360     		str	r3, [r2]
 768              	.L34:
 769              		.loc 1 1134 3 discriminator 3
 770 0074 7B68     		ldr	r3, [r7, #4]
 771 0076 DA6A     		ldr	r2, [r3, #44]
 772 0078 1346     		mov	r3, r2
 773 007a 9B00     		lsls	r3, r3, #2
 774 007c 1344     		add	r3, r3, r2
 775 007e 9B00     		lsls	r3, r3, #2
 776 0080 154A     		ldr	r2, .L37+20
 777 0082 1A44     		add	r2, r2, r3
 778 0084 7B68     		ldr	r3, [r7, #4]
 779 0086 0433     		adds	r3, r3, #4
 780 0088 1946     		mov	r1, r3
 781 008a 1046     		mov	r0, r2
 782 008c FFF7FEFF 		bl	vListInsertEnd
1135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 783              		.loc 1 1138 2 is_stmt 1 discriminator 3
 784 0090 FFF7FEFF 		bl	vPortExitCritical
1139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
 785              		.loc 1 1140 24 discriminator 3
 786 0094 0D4B     		ldr	r3, .L37+8
 787 0096 1B68     		ldr	r3, [r3]
 788              		.loc 1 1140 4 discriminator 3
 789 0098 002B     		cmp	r3, #0
 790 009a 0ED0     		beq	.L36
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 38


1141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then it should run now. */
1144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 791              		.loc 1 1144 19
 792 009c 0A4B     		ldr	r3, .L37+4
 793 009e 1B68     		ldr	r3, [r3]
 794 00a0 DA6A     		ldr	r2, [r3, #44]
 795              		.loc 1 1144 42
 796 00a2 7B68     		ldr	r3, [r7, #4]
 797 00a4 DB6A     		ldr	r3, [r3, #44]
 798              		.loc 1 1144 5
 799 00a6 9A42     		cmp	r2, r3
 800 00a8 07D2     		bcs	.L36
1145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
 801              		.loc 1 1146 4
 802 00aa 0C4B     		ldr	r3, .L37+24
 803 00ac 4FF08052 		mov	r2, #268435456
 804 00b0 1A60     		str	r2, [r3]
 805              		.syntax unified
 806              	@ 1146 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 807 00b2 BFF34F8F 		dsb
 808              	@ 0 "" 2
 809              	@ 1146 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 810 00b6 BFF36F8F 		isb
 811              	@ 0 "" 2
 812              		.thumb
 813              		.syntax unified
 814              	.L36:
1147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 815              		.loc 1 1157 1
 816 00ba 00BF     		nop
 817 00bc 0837     		adds	r7, r7, #8
 818              	.LCFI18:
 819              		.cfi_def_cfa_offset 8
 820 00be BD46     		mov	sp, r7
 821              	.LCFI19:
 822              		.cfi_def_cfa_register 13
 823              		@ sp needed
 824 00c0 80BD     		pop	{r7, pc}
 825              	.L38:
 826 00c2 00BF     		.align	2
 827              	.L37:
 828 00c4 00000000 		.word	uxCurrentNumberOfTasks
 829 00c8 00000000 		.word	pxCurrentTCB
 830 00cc 00000000 		.word	xSchedulerRunning
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 39


 831 00d0 00000000 		.word	uxTaskNumber
 832 00d4 00000000 		.word	uxTopReadyPriority
 833 00d8 00000000 		.word	pxReadyTasksLists
 834 00dc 04ED00E0 		.word	-536810236
 835              		.cfi_endproc
 836              	.LFE7:
 838              		.section	.text.vTaskDelete,"ax",%progbits
 839              		.align	1
 840              		.global	vTaskDelete
 841              		.syntax unified
 842              		.thumb
 843              		.thumb_func
 844              		.fpu fpv4-sp-d16
 846              	vTaskDelete:
 847              	.LFB8:
1158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 848              		.loc 1 1163 2
 849              		.cfi_startproc
 850              		@ args = 0, pretend = 0, frame = 16
 851              		@ frame_needed = 1, uses_anonymous_args = 0
 852 0000 80B5     		push	{r7, lr}
 853              	.LCFI20:
 854              		.cfi_def_cfa_offset 8
 855              		.cfi_offset 7, -8
 856              		.cfi_offset 14, -4
 857 0002 84B0     		sub	sp, sp, #16
 858              	.LCFI21:
 859              		.cfi_def_cfa_offset 24
 860 0004 00AF     		add	r7, sp, #0
 861              	.LCFI22:
 862              		.cfi_def_cfa_register 7
 863 0006 7860     		str	r0, [r7, #4]
1164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 864              		.loc 1 1166 3
 865 0008 FFF7FEFF 		bl	vPortEnterCritical
1167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being deleted. */
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 866              		.loc 1 1170 12
 867 000c 7B68     		ldr	r3, [r7, #4]
 868 000e 002B     		cmp	r3, #0
 869 0010 02D1     		bne	.L40
 870              		.loc 1 1170 12 is_stmt 0 discriminator 1
 871 0012 2C4B     		ldr	r3, .L49
 872 0014 1B68     		ldr	r3, [r3]
 873 0016 00E0     		b	.L41
 874              	.L40:
 875              		.loc 1 1170 12 discriminator 2
 876 0018 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 40


 877              	.L41:
 878              		.loc 1 1170 10 is_stmt 1 discriminator 4
 879 001a FB60     		str	r3, [r7, #12]
1171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list. */
1173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 880              		.loc 1 1173 8 discriminator 4
 881 001c FB68     		ldr	r3, [r7, #12]
 882 001e 0433     		adds	r3, r3, #4
 883 0020 1846     		mov	r0, r3
 884 0022 FFF7FEFF 		bl	uxListRemove
1174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 885              		.loc 1 1183 8 discriminator 4
 886 0026 FB68     		ldr	r3, [r7, #12]
 887 0028 9B6A     		ldr	r3, [r3, #40]
 888              		.loc 1 1183 6 discriminator 4
 889 002a 002B     		cmp	r3, #0
 890 002c 04D0     		beq	.L42
1184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 891              		.loc 1 1185 14
 892 002e FB68     		ldr	r3, [r7, #12]
 893 0030 1833     		adds	r3, r3, #24
 894 0032 1846     		mov	r0, r3
 895 0034 FFF7FEFF 		bl	uxListRemove
 896              	.L42:
1186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not return. */
1196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
 897              		.loc 1 1196 16
 898 0038 234B     		ldr	r3, .L49+4
 899 003a 1B68     		ldr	r3, [r3]
 900 003c 0133     		adds	r3, r3, #1
 901 003e 224A     		ldr	r2, .L49+4
 902 0040 1360     		str	r3, [r2]
1197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 903              		.loc 1 1198 14
 904 0042 204B     		ldr	r3, .L49
 905 0044 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 41


 906              		.loc 1 1198 6
 907 0046 FA68     		ldr	r2, [r7, #12]
 908 0048 9A42     		cmp	r2, r3
 909 004a 0BD1     		bne	.L43
1199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task itself, as a context switch to another task is required.
1202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the termination list and free up any memory allocated by
1204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 910              		.loc 1 1205 5
 911 004c FB68     		ldr	r3, [r7, #12]
 912 004e 0433     		adds	r3, r3, #4
 913 0050 1946     		mov	r1, r3
 914 0052 1E48     		ldr	r0, .L49+8
 915 0054 FFF7FEFF 		bl	vListInsertEnd
1206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
 916              		.loc 1 1210 5
 917 0058 1D4B     		ldr	r3, .L49+12
 918 005a 1B68     		ldr	r3, [r3]
 919 005c 0133     		adds	r3, r3, #1
 920 005e 1C4A     		ldr	r2, .L49+12
 921 0060 1360     		str	r3, [r2]
 922 0062 09E0     		b	.L44
 923              	.L43:
1211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
1213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
1214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELETE( pxTCB );
1215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				after which it is not possible to yield away from this task -
1219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				required. */
1221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 924              		.loc 1 1225 5
 925 0064 1B4B     		ldr	r3, .L49+16
 926 0066 1B68     		ldr	r3, [r3]
 927 0068 013B     		subs	r3, r3, #1
 928 006a 1A4A     		ldr	r2, .L49+16
 929 006c 1360     		str	r3, [r2]
1226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELETE( pxTCB );
1227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 930              		.loc 1 1227 5
 931 006e F868     		ldr	r0, [r7, #12]
 932 0070 FFF7FEFF 		bl	prvDeleteTCB
1228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 42


1229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that has just been deleted. */
1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
 933              		.loc 1 1231 5
 934 0074 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 935              	.L44:
1232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 936              		.loc 1 1234 3
 937 0078 FFF7FEFF 		bl	vPortExitCritical
1235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been deleted. */
1238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 938              		.loc 1 1238 25
 939 007c 164B     		ldr	r3, .L49+20
 940 007e 1B68     		ldr	r3, [r3]
 941              		.loc 1 1238 5
 942 0080 002B     		cmp	r3, #0
 943 0082 1BD0     		beq	.L48
1239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 944              		.loc 1 1240 14
 945 0084 0F4B     		ldr	r3, .L49
 946 0086 1B68     		ldr	r3, [r3]
 947              		.loc 1 1240 6
 948 0088 FA68     		ldr	r2, [r7, #12]
 949 008a 9A42     		cmp	r2, r3
 950 008c 16D1     		bne	.L48
1241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 951              		.loc 1 1242 5
 952 008e 134B     		ldr	r3, .L49+24
 953 0090 1B68     		ldr	r3, [r3]
 954 0092 002B     		cmp	r3, #0
 955 0094 0AD0     		beq	.L46
 956              	.LBB136:
 957              	.LBB137:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 958              		.loc 2 195 2
 959              		.syntax unified
 960              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 961 0096 4FF05003 			mov r3, #80												
 962 009a 83F31188 		msr basepri, r3											
 963 009e BFF36F8F 		isb														
 964 00a2 BFF34F8F 		dsb														
 965              	
 966              	@ 0 "" 2
 967              		.thumb
 968              		.syntax unified
 969 00a6 BB60     		str	r3, [r7, #8]
 970              		.loc 2 203 1
 971 00a8 00BF     		nop
 972              	.L47:
 973              	.LBE137:
 974              	.LBE136:
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 43


 975              		.loc 1 1242 5 discriminator 1
 976 00aa FEE7     		b	.L47
 977              	.L46:
1243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 978              		.loc 1 1243 5
 979 00ac 0C4B     		ldr	r3, .L49+28
 980 00ae 4FF08052 		mov	r2, #268435456
 981 00b2 1A60     		str	r2, [r3]
 982              		.syntax unified
 983              	@ 1243 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 984 00b4 BFF34F8F 		dsb
 985              	@ 0 "" 2
 986              	@ 1243 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 987 00b8 BFF36F8F 		isb
 988              	@ 0 "" 2
 989              		.thumb
 990              		.syntax unified
 991              	.L48:
1244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 992              		.loc 1 1250 2
 993 00bc 00BF     		nop
 994 00be 1037     		adds	r7, r7, #16
 995              	.LCFI23:
 996              		.cfi_def_cfa_offset 8
 997 00c0 BD46     		mov	sp, r7
 998              	.LCFI24:
 999              		.cfi_def_cfa_register 13
 1000              		@ sp needed
 1001 00c2 80BD     		pop	{r7, pc}
 1002              	.L50:
 1003              		.align	2
 1004              	.L49:
 1005 00c4 00000000 		.word	pxCurrentTCB
 1006 00c8 00000000 		.word	uxTaskNumber
 1007 00cc 00000000 		.word	xTasksWaitingTermination
 1008 00d0 00000000 		.word	uxDeletedTasksWaitingCleanUp
 1009 00d4 00000000 		.word	uxCurrentNumberOfTasks
 1010 00d8 00000000 		.word	xSchedulerRunning
 1011 00dc 00000000 		.word	uxSchedulerSuspended
 1012 00e0 04ED00E0 		.word	-536810236
 1013              		.cfi_endproc
 1014              	.LFE8:
 1016              		.section	.text.vTaskDelayUntil,"ax",%progbits
 1017              		.align	1
 1018              		.global	vTaskDelayUntil
 1019              		.syntax unified
 1020              		.thumb
 1021              		.thumb_func
 1022              		.fpu fpv4-sp-d16
 1024              	vTaskDelayUntil:
 1025              	.LFB9:
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 44


1251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1026              		.loc 1 1258 2
 1027              		.cfi_startproc
 1028              		@ args = 0, pretend = 0, frame = 40
 1029              		@ frame_needed = 1, uses_anonymous_args = 0
 1030 0000 80B5     		push	{r7, lr}
 1031              	.LCFI25:
 1032              		.cfi_def_cfa_offset 8
 1033              		.cfi_offset 7, -8
 1034              		.cfi_offset 14, -4
 1035 0002 8AB0     		sub	sp, sp, #40
 1036              	.LCFI26:
 1037              		.cfi_def_cfa_offset 48
 1038 0004 00AF     		add	r7, sp, #0
 1039              	.LCFI27:
 1040              		.cfi_def_cfa_register 7
 1041 0006 7860     		str	r0, [r7, #4]
 1042 0008 3960     		str	r1, [r7]
1259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
1260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 1043              		.loc 1 1260 30
 1044 000a 0023     		movs	r3, #0
 1045 000c 7B62     		str	r3, [r7, #36]
1261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
 1046              		.loc 1 1262 3
 1047 000e 7B68     		ldr	r3, [r7, #4]
 1048 0010 002B     		cmp	r3, #0
 1049 0012 0AD1     		bne	.L52
 1050              	.LBB138:
 1051              	.LBB139:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1052              		.loc 2 195 2
 1053              		.syntax unified
 1054              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1055 0014 4FF05003 			mov r3, #80												
 1056 0018 83F31188 		msr basepri, r3											
 1057 001c BFF36F8F 		isb														
 1058 0020 BFF34F8F 		dsb														
 1059              	
 1060              	@ 0 "" 2
 1061              		.thumb
 1062              		.syntax unified
 1063 0024 7B61     		str	r3, [r7, #20]
 1064              		.loc 2 203 1
 1065 0026 00BF     		nop
 1066              	.L53:
 1067              	.LBE139:
 1068              	.LBE138:
 1069              		.loc 1 1262 3 discriminator 1
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 45


 1070 0028 FEE7     		b	.L53
 1071              	.L52:
1263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 1072              		.loc 1 1263 3
 1073 002a 3B68     		ldr	r3, [r7]
 1074 002c 002B     		cmp	r3, #0
 1075 002e 0AD1     		bne	.L54
 1076              	.LBB140:
 1077              	.LBB141:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1078              		.loc 2 195 2
 1079              		.syntax unified
 1080              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1081 0030 4FF05003 			mov r3, #80												
 1082 0034 83F31188 		msr basepri, r3											
 1083 0038 BFF36F8F 		isb														
 1084 003c BFF34F8F 		dsb														
 1085              	
 1086              	@ 0 "" 2
 1087              		.thumb
 1088              		.syntax unified
 1089 0040 3B61     		str	r3, [r7, #16]
 1090              		.loc 2 203 1
 1091 0042 00BF     		nop
 1092              	.L55:
 1093              	.LBE141:
 1094              	.LBE140:
 1095              		.loc 1 1263 3 discriminator 2
 1096 0044 FEE7     		b	.L55
 1097              	.L54:
1264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 1098              		.loc 1 1264 3
 1099 0046 2A4B     		ldr	r3, .L64
 1100 0048 1B68     		ldr	r3, [r3]
 1101 004a 002B     		cmp	r3, #0
 1102 004c 0AD0     		beq	.L56
 1103              	.LBB142:
 1104              	.LBB143:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1105              		.loc 2 195 2
 1106              		.syntax unified
 1107              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1108 004e 4FF05003 			mov r3, #80												
 1109 0052 83F31188 		msr basepri, r3											
 1110 0056 BFF36F8F 		isb														
 1111 005a BFF34F8F 		dsb														
 1112              	
 1113              	@ 0 "" 2
 1114              		.thumb
 1115              		.syntax unified
 1116 005e FB60     		str	r3, [r7, #12]
 1117              		.loc 2 203 1
 1118 0060 00BF     		nop
 1119              	.L57:
 1120              	.LBE143:
 1121              	.LBE142:
 1122              		.loc 1 1264 3 discriminator 3
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 46


 1123 0062 FEE7     		b	.L57
 1124              	.L56:
1265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
 1125              		.loc 1 1266 3
 1126 0064 FFF7FEFF 		bl	vTaskSuspendAll
 1127              	.LBB144:
1267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			block. */
1270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
 1128              		.loc 1 1270 21
 1129 0068 224B     		ldr	r3, .L64+4
 1130 006a 1B68     		ldr	r3, [r3]
 1131 006c 3B62     		str	r3, [r7, #32]
1271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 1132              		.loc 1 1273 18
 1133 006e 7B68     		ldr	r3, [r7, #4]
 1134 0070 1B68     		ldr	r3, [r3]
 1135              		.loc 1 1273 16
 1136 0072 3A68     		ldr	r2, [r7]
 1137 0074 1344     		add	r3, r3, r2
 1138 0076 FB61     		str	r3, [r7, #28]
1274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
 1139              		.loc 1 1275 26
 1140 0078 7B68     		ldr	r3, [r7, #4]
 1141 007a 1B68     		ldr	r3, [r3]
 1142              		.loc 1 1275 6
 1143 007c 3A6A     		ldr	r2, [r7, #32]
 1144 007e 9A42     		cmp	r2, r3
 1145 0080 0BD2     		bcs	.L58
1276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
1278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 1146              		.loc 1 1282 25
 1147 0082 7B68     		ldr	r3, [r7, #4]
 1148 0084 1B68     		ldr	r3, [r3]
 1149              		.loc 1 1282 7
 1150 0086 FA69     		ldr	r2, [r7, #28]
 1151 0088 9A42     		cmp	r2, r3
 1152 008a 11D2     		bcs	.L59
 1153              		.loc 1 1282 47 discriminator 1
 1154 008c FA69     		ldr	r2, [r7, #28]
 1155 008e 3B6A     		ldr	r3, [r7, #32]
 1156 0090 9A42     		cmp	r2, r3
 1157 0092 0DD9     		bls	.L59
1283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
 1158              		.loc 1 1284 19
 1159 0094 0123     		movs	r3, #1
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 47


 1160 0096 7B62     		str	r3, [r7, #36]
 1161 0098 0AE0     		b	.L59
 1162              	.L58:
1285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
1296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 1163              		.loc 1 1296 25
 1164 009a 7B68     		ldr	r3, [r7, #4]
 1165 009c 1B68     		ldr	r3, [r3]
 1166              		.loc 1 1296 7
 1167 009e FA69     		ldr	r2, [r7, #28]
 1168 00a0 9A42     		cmp	r2, r3
 1169 00a2 03D3     		bcc	.L60
 1170              		.loc 1 1296 47 discriminator 1
 1171 00a4 FA69     		ldr	r2, [r7, #28]
 1172 00a6 3B6A     		ldr	r3, [r7, #32]
 1173 00a8 9A42     		cmp	r2, r3
 1174 00aa 01D9     		bls	.L59
 1175              	.L60:
1297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
 1176              		.loc 1 1298 19
 1177 00ac 0123     		movs	r3, #1
 1178 00ae 7B62     		str	r3, [r7, #36]
 1179              	.L59:
1299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
 1180              		.loc 1 1307 24
 1181 00b0 7B68     		ldr	r3, [r7, #4]
 1182 00b2 FA69     		ldr	r2, [r7, #28]
 1183 00b4 1A60     		str	r2, [r3]
1308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
 1184              		.loc 1 1309 6
 1185 00b6 7B6A     		ldr	r3, [r7, #36]
 1186 00b8 002B     		cmp	r3, #0
 1187 00ba 06D0     		beq	.L61
1310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 48


1314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 1188              		.loc 1 1315 5
 1189 00bc FA69     		ldr	r2, [r7, #28]
 1190 00be 3B6A     		ldr	r3, [r7, #32]
 1191 00c0 D31A     		subs	r3, r2, r3
 1192 00c2 0021     		movs	r1, #0
 1193 00c4 1846     		mov	r0, r3
 1194 00c6 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 1195              	.L61:
 1196              	.LBE144:
1316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
 1197              		.loc 1 1322 21
 1198 00ca FFF7FEFF 		bl	xTaskResumeAll
 1199 00ce B861     		str	r0, [r7, #24]
1323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 1200              		.loc 1 1326 5
 1201 00d0 BB69     		ldr	r3, [r7, #24]
 1202 00d2 002B     		cmp	r3, #0
 1203 00d4 07D1     		bne	.L63
1327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
 1204              		.loc 1 1328 4
 1205 00d6 084B     		ldr	r3, .L64+8
 1206 00d8 4FF08052 		mov	r2, #268435456
 1207 00dc 1A60     		str	r2, [r3]
 1208              		.syntax unified
 1209              	@ 1328 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1210 00de BFF34F8F 		dsb
 1211              	@ 0 "" 2
 1212              	@ 1328 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1213 00e2 BFF36F8F 		isb
 1214              	@ 0 "" 2
 1215              		.thumb
 1216              		.syntax unified
 1217              	.L63:
1329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1218              		.loc 1 1334 2
 1219 00e6 00BF     		nop
 1220 00e8 2837     		adds	r7, r7, #40
 1221              	.LCFI28:
 1222              		.cfi_def_cfa_offset 8
 1223 00ea BD46     		mov	sp, r7
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 49


 1224              	.LCFI29:
 1225              		.cfi_def_cfa_register 13
 1226              		@ sp needed
 1227 00ec 80BD     		pop	{r7, pc}
 1228              	.L65:
 1229 00ee 00BF     		.align	2
 1230              	.L64:
 1231 00f0 00000000 		.word	uxSchedulerSuspended
 1232 00f4 00000000 		.word	xTickCount
 1233 00f8 04ED00E0 		.word	-536810236
 1234              		.cfi_endproc
 1235              	.LFE9:
 1237              		.section	.text.vTaskDelay,"ax",%progbits
 1238              		.align	1
 1239              		.global	vTaskDelay
 1240              		.syntax unified
 1241              		.thumb
 1242              		.thumb_func
 1243              		.fpu fpv4-sp-d16
 1245              	vTaskDelay:
 1246              	.LFB10:
1335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1247              		.loc 1 1342 2
 1248              		.cfi_startproc
 1249              		@ args = 0, pretend = 0, frame = 16
 1250              		@ frame_needed = 1, uses_anonymous_args = 0
 1251 0000 80B5     		push	{r7, lr}
 1252              	.LCFI30:
 1253              		.cfi_def_cfa_offset 8
 1254              		.cfi_offset 7, -8
 1255              		.cfi_offset 14, -4
 1256 0002 84B0     		sub	sp, sp, #16
 1257              	.LCFI31:
 1258              		.cfi_def_cfa_offset 24
 1259 0004 00AF     		add	r7, sp, #0
 1260              	.LCFI32:
 1261              		.cfi_def_cfa_register 7
 1262 0006 7860     		str	r0, [r7, #4]
1343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 1263              		.loc 1 1343 13
 1264 0008 0023     		movs	r3, #0
 1265 000a FB60     		str	r3, [r7, #12]
1344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
 1266              		.loc 1 1346 5
 1267 000c 7B68     		ldr	r3, [r7, #4]
 1268 000e 002B     		cmp	r3, #0
 1269 0010 17D0     		beq	.L67
1347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 50


1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
 1270              		.loc 1 1348 4
 1271 0012 134B     		ldr	r3, .L72
 1272 0014 1B68     		ldr	r3, [r3]
 1273 0016 002B     		cmp	r3, #0
 1274 0018 0AD0     		beq	.L68
 1275              	.LBB145:
 1276              	.LBB146:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1277              		.loc 2 195 2
 1278              		.syntax unified
 1279              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1280 001a 4FF05003 			mov r3, #80												
 1281 001e 83F31188 		msr basepri, r3											
 1282 0022 BFF36F8F 		isb														
 1283 0026 BFF34F8F 		dsb														
 1284              	
 1285              	@ 0 "" 2
 1286              		.thumb
 1287              		.syntax unified
 1288 002a BB60     		str	r3, [r7, #8]
 1289              		.loc 2 203 1
 1290 002c 00BF     		nop
 1291              	.L69:
 1292              	.LBE146:
 1293              	.LBE145:
 1294              		.loc 1 1348 4 discriminator 1
 1295 002e FEE7     		b	.L69
 1296              	.L68:
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 1297              		.loc 1 1349 4
 1298 0030 FFF7FEFF 		bl	vTaskSuspendAll
1350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
1354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is resumed.
1357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				executing task. */
1360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 1299              		.loc 1 1360 5
 1300 0034 0021     		movs	r1, #0
 1301 0036 7868     		ldr	r0, [r7, #4]
 1302 0038 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
1361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
 1303              		.loc 1 1362 22
 1304 003c FFF7FEFF 		bl	xTaskResumeAll
 1305 0040 F860     		str	r0, [r7, #12]
 1306              	.L67:
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 51


1367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 1307              		.loc 1 1371 5
 1308 0042 FB68     		ldr	r3, [r7, #12]
 1309 0044 002B     		cmp	r3, #0
 1310 0046 07D1     		bne	.L71
1372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
 1311              		.loc 1 1373 4
 1312 0048 064B     		ldr	r3, .L72+4
 1313 004a 4FF08052 		mov	r2, #268435456
 1314 004e 1A60     		str	r2, [r3]
 1315              		.syntax unified
 1316              	@ 1373 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1317 0050 BFF34F8F 		dsb
 1318              	@ 0 "" 2
 1319              	@ 1373 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1320 0054 BFF36F8F 		isb
 1321              	@ 0 "" 2
 1322              		.thumb
 1323              		.syntax unified
 1324              	.L71:
1374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1325              		.loc 1 1379 2
 1326 0058 00BF     		nop
 1327 005a 1037     		adds	r7, r7, #16
 1328              	.LCFI33:
 1329              		.cfi_def_cfa_offset 8
 1330 005c BD46     		mov	sp, r7
 1331              	.LCFI34:
 1332              		.cfi_def_cfa_register 13
 1333              		@ sp needed
 1334 005e 80BD     		pop	{r7, pc}
 1335              	.L73:
 1336              		.align	2
 1337              	.L72:
 1338 0060 00000000 		.word	uxSchedulerSuspended
 1339 0064 04ED00E0 		.word	-536810236
 1340              		.cfi_endproc
 1341              	.LFE10:
 1343              		.section	.text.eTaskGetState,"ax",%progbits
 1344              		.align	1
 1345              		.global	eTaskGetState
 1346              		.syntax unified
 1347              		.thumb
 1348              		.thumb_func
 1349              		.fpu fpv4-sp-d16
 1351              	eTaskGetState:
 1352              	.LFB11:
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 52


1380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDel
1385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1353              		.loc 1 1387 2
 1354              		.cfi_startproc
 1355              		@ args = 0, pretend = 0, frame = 32
 1356              		@ frame_needed = 1, uses_anonymous_args = 0
 1357 0000 80B5     		push	{r7, lr}
 1358              	.LCFI35:
 1359              		.cfi_def_cfa_offset 8
 1360              		.cfi_offset 7, -8
 1361              		.cfi_offset 14, -4
 1362 0002 88B0     		sub	sp, sp, #32
 1363              	.LCFI36:
 1364              		.cfi_def_cfa_offset 40
 1365 0004 00AF     		add	r7, sp, #0
 1366              	.LCFI37:
 1367              		.cfi_def_cfa_register 7
 1368 0006 7860     		str	r0, [r7, #4]
1388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
1390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
 1369              		.loc 1 1390 22
 1370 0008 7B68     		ldr	r3, [r7, #4]
 1371 000a BB61     		str	r3, [r7, #24]
1391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
 1372              		.loc 1 1392 3
 1373 000c BB69     		ldr	r3, [r7, #24]
 1374 000e 002B     		cmp	r3, #0
 1375 0010 0AD1     		bne	.L75
 1376              	.LBB147:
 1377              	.LBB148:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1378              		.loc 2 195 2
 1379              		.syntax unified
 1380              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1381 0012 4FF05003 			mov r3, #80												
 1382 0016 83F31188 		msr basepri, r3											
 1383 001a BFF36F8F 		isb														
 1384 001e BFF34F8F 		dsb														
 1385              	
 1386              	@ 0 "" 2
 1387              		.thumb
 1388              		.syntax unified
 1389 0022 BB60     		str	r3, [r7, #8]
 1390              		.loc 2 203 1
 1391 0024 00BF     		nop
 1392              	.L76:
 1393              	.LBE148:
 1394              	.LBE147:
 1395              		.loc 1 1392 3 discriminator 1
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 53


 1396 0026 FEE7     		b	.L76
 1397              	.L75:
1393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 1398              		.loc 1 1394 13
 1399 0028 234B     		ldr	r3, .L87
 1400 002a 1B68     		ldr	r3, [r3]
 1401              		.loc 1 1394 5
 1402 002c BA69     		ldr	r2, [r7, #24]
 1403 002e 9A42     		cmp	r2, r3
 1404 0030 02D1     		bne	.L77
1395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eRunning;
 1405              		.loc 1 1397 12
 1406 0032 0023     		movs	r3, #0
 1407 0034 FB77     		strb	r3, [r7, #31]
 1408 0036 3AE0     		b	.L78
 1409              	.L77:
1398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 1410              		.loc 1 1401 4
 1411 0038 FFF7FEFF 		bl	vPortEnterCritical
1402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 1412              		.loc 1 1403 17
 1413 003c BB69     		ldr	r3, [r7, #24]
 1414 003e 5B69     		ldr	r3, [r3, #20]
 1415 0040 7B61     		str	r3, [r7, #20]
1404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxDelayedList = pxDelayedTaskList;
 1416              		.loc 1 1404 19
 1417 0042 1E4B     		ldr	r3, .L87+4
 1418 0044 1B68     		ldr	r3, [r3]
 1419 0046 3B61     		str	r3, [r7, #16]
1405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 1420              		.loc 1 1405 29
 1421 0048 1D4B     		ldr	r3, .L87+8
 1422 004a 1B68     		ldr	r3, [r3]
 1423 004c FB60     		str	r3, [r7, #12]
1406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 1424              		.loc 1 1407 4
 1425 004e FFF7FEFF 		bl	vPortExitCritical
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 1426              		.loc 1 1409 6
 1427 0052 7A69     		ldr	r2, [r7, #20]
 1428 0054 3B69     		ldr	r3, [r7, #16]
 1429 0056 9A42     		cmp	r2, r3
 1430 0058 03D0     		beq	.L79
 1431              		.loc 1 1409 41 discriminator 1
 1432 005a 7A69     		ldr	r2, [r7, #20]
 1433 005c FB68     		ldr	r3, [r7, #12]
 1434 005e 9A42     		cmp	r2, r3
 1435 0060 02D1     		bne	.L80
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 54


 1436              	.L79:
1410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lists. */
1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eBlocked;
 1437              		.loc 1 1413 13
 1438 0062 0223     		movs	r3, #2
 1439 0064 FB77     		strb	r3, [r7, #31]
 1440 0066 22E0     		b	.L78
 1441              	.L80:
1414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
 1442              		.loc 1 1417 12
 1443 0068 7B69     		ldr	r3, [r7, #20]
 1444 006a 164A     		ldr	r2, .L87+12
 1445 006c 9342     		cmp	r3, r2
 1446 006e 12D1     		bne	.L81
1418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list.  Is it genuinely suspended or is it blocked
1421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					indefinitely? */
1422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 1447              		.loc 1 1422 10
 1448 0070 BB69     		ldr	r3, [r7, #24]
 1449 0072 9B6A     		ldr	r3, [r3, #40]
 1450              		.loc 1 1422 8
 1451 0074 002B     		cmp	r3, #0
 1452 0076 0BD1     		bne	.L82
1423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#if( configUSE_TASK_NOTIFICATIONS == 1 )
1425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* The task does not appear on the event list item of
1427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							and of the RTOS objects, but could still be in the
1428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							blocked state if it is waiting on its notification
1429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							rather than waiting on an object. */
1430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 1453              		.loc 1 1430 17
 1454 0078 BB69     		ldr	r3, [r7, #24]
 1455 007a 93F86030 		ldrb	r3, [r3, #96]
 1456 007e DBB2     		uxtb	r3, r3
 1457              		.loc 1 1430 10
 1458 0080 012B     		cmp	r3, #1
 1459 0082 02D1     		bne	.L83
1431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
1432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								eReturn = eBlocked;
 1460              		.loc 1 1432 17
 1461 0084 0223     		movs	r3, #2
 1462 0086 FB77     		strb	r3, [r7, #31]
 1463 0088 11E0     		b	.L78
 1464              	.L83:
1433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
1434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
1435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
1436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								eReturn = eSuspended;
 1465              		.loc 1 1436 17
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 55


 1466 008a 0323     		movs	r3, #3
 1467 008c FB77     		strb	r3, [r7, #31]
 1468 008e 0EE0     		b	.L78
 1469              	.L82:
1437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
1438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
1440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							eReturn = eSuspended;
1442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
1444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eBlocked;
 1470              		.loc 1 1447 15
 1471 0090 0223     		movs	r3, #2
 1472 0092 FB77     		strb	r3, [r7, #31]
 1473 0094 0BE0     		b	.L78
 1474              	.L81:
1448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 1475              		.loc 1 1453 12
 1476 0096 7B69     		ldr	r3, [r7, #20]
 1477 0098 0B4A     		ldr	r2, .L87+16
 1478 009a 9342     		cmp	r3, r2
 1479 009c 02D0     		beq	.L84
 1480              		.loc 1 1453 59 discriminator 1
 1481 009e 7B69     		ldr	r3, [r7, #20]
 1482 00a0 002B     		cmp	r3, #0
 1483 00a2 02D1     		bne	.L85
 1484              	.L84:
1454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					all. */
1458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					eReturn = eDeleted;
 1485              		.loc 1 1458 14
 1486 00a4 0423     		movs	r3, #4
 1487 00a6 FB77     		strb	r3, [r7, #31]
 1488 00a8 01E0     		b	.L78
 1489              	.L85:
1459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Ready (including pending ready) state. */
1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eReady;
 1490              		.loc 1 1466 13
 1491 00aa 0123     		movs	r3, #1
 1492 00ac FB77     		strb	r3, [r7, #31]
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 56


 1493              	.L78:
1467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
 1494              		.loc 1 1470 10
 1495 00ae FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
1471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1496              		.loc 1 1471 2
 1497 00b0 1846     		mov	r0, r3
 1498 00b2 2037     		adds	r7, r7, #32
 1499              	.LCFI38:
 1500              		.cfi_def_cfa_offset 8
 1501 00b4 BD46     		mov	sp, r7
 1502              	.LCFI39:
 1503              		.cfi_def_cfa_register 13
 1504              		@ sp needed
 1505 00b6 80BD     		pop	{r7, pc}
 1506              	.L88:
 1507              		.align	2
 1508              	.L87:
 1509 00b8 00000000 		.word	pxCurrentTCB
 1510 00bc 00000000 		.word	pxDelayedTaskList
 1511 00c0 00000000 		.word	pxOverflowDelayedTaskList
 1512 00c4 00000000 		.word	xSuspendedTaskList
 1513 00c8 00000000 		.word	xTasksWaitingTermination
 1514              		.cfi_endproc
 1515              	.LFE11:
 1517              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1518              		.align	1
 1519              		.global	uxTaskPriorityGet
 1520              		.syntax unified
 1521              		.thumb
 1522              		.thumb_func
 1523              		.fpu fpv4-sp-d16
 1525              	uxTaskPriorityGet:
 1526              	.LFB12:
1472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1527              		.loc 1 1479 2
 1528              		.cfi_startproc
 1529              		@ args = 0, pretend = 0, frame = 16
 1530              		@ frame_needed = 1, uses_anonymous_args = 0
 1531 0000 80B5     		push	{r7, lr}
 1532              	.LCFI40:
 1533              		.cfi_def_cfa_offset 8
 1534              		.cfi_offset 7, -8
 1535              		.cfi_offset 14, -4
 1536 0002 84B0     		sub	sp, sp, #16
 1537              	.LCFI41:
 1538              		.cfi_def_cfa_offset 24
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 57


 1539 0004 00AF     		add	r7, sp, #0
 1540              	.LCFI42:
 1541              		.cfi_def_cfa_register 7
 1542 0006 7860     		str	r0, [r7, #4]
1480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
1481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 1543              		.loc 1 1483 3
 1544 0008 FFF7FEFF 		bl	vPortEnterCritical
1484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the task
1486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			that called uxTaskPriorityGet() that is being queried. */
1487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1545              		.loc 1 1487 12
 1546 000c 7B68     		ldr	r3, [r7, #4]
 1547 000e 002B     		cmp	r3, #0
 1548 0010 02D1     		bne	.L90
 1549              		.loc 1 1487 12 is_stmt 0 discriminator 1
 1550 0012 074B     		ldr	r3, .L93
 1551 0014 1B68     		ldr	r3, [r3]
 1552 0016 00E0     		b	.L91
 1553              	.L90:
 1554              		.loc 1 1487 12 discriminator 2
 1555 0018 7B68     		ldr	r3, [r7, #4]
 1556              	.L91:
 1557              		.loc 1 1487 10 is_stmt 1 discriminator 4
 1558 001a FB60     		str	r3, [r7, #12]
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1559              		.loc 1 1488 13 discriminator 4
 1560 001c FB68     		ldr	r3, [r7, #12]
 1561 001e DB6A     		ldr	r3, [r3, #44]
 1562 0020 BB60     		str	r3, [r7, #8]
1489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1563              		.loc 1 1490 3 discriminator 4
 1564 0022 FFF7FEFF 		bl	vPortExitCritical
1491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 1565              		.loc 1 1492 10 discriminator 4
 1566 0026 BB68     		ldr	r3, [r7, #8]
1493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1567              		.loc 1 1493 2 discriminator 4
 1568 0028 1846     		mov	r0, r3
 1569 002a 1037     		adds	r7, r7, #16
 1570              	.LCFI43:
 1571              		.cfi_def_cfa_offset 8
 1572 002c BD46     		mov	sp, r7
 1573              	.LCFI44:
 1574              		.cfi_def_cfa_register 13
 1575              		@ sp needed
 1576 002e 80BD     		pop	{r7, pc}
 1577              	.L94:
 1578              		.align	2
 1579              	.L93:
 1580 0030 00000000 		.word	pxCurrentTCB
 1581              		.cfi_endproc
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 58


 1582              	.LFE12:
 1584              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1585              		.align	1
 1586              		.global	uxTaskPriorityGetFromISR
 1587              		.syntax unified
 1588              		.thumb
 1589              		.thumb_func
 1590              		.fpu fpv4-sp-d16
 1592              	uxTaskPriorityGetFromISR:
 1593              	.LFB13:
1494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
1501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1594              		.loc 1 1501 2
 1595              		.cfi_startproc
 1596              		@ args = 0, pretend = 0, frame = 32
 1597              		@ frame_needed = 1, uses_anonymous_args = 0
 1598 0000 80B5     		push	{r7, lr}
 1599              	.LCFI45:
 1600              		.cfi_def_cfa_offset 8
 1601              		.cfi_offset 7, -8
 1602              		.cfi_offset 14, -4
 1603 0002 88B0     		sub	sp, sp, #32
 1604              	.LCFI46:
 1605              		.cfi_def_cfa_offset 40
 1606 0004 00AF     		add	r7, sp, #0
 1607              	.LCFI47:
 1608              		.cfi_def_cfa_register 7
 1609 0006 7860     		str	r0, [r7, #4]
1502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
1503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1610              		.loc 1 1521 3
 1611 0008 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1612              	.LBB149:
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 59


 1613              	.LBB150:
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1614              		.loc 2 211 2
 1615              		.syntax unified
 1616              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1617 000c EFF31182 			mrs r2, basepri											
 1618 0010 4FF05003 		mov r3, #80												
 1619 0014 83F31188 		msr basepri, r3											
 1620 0018 BFF36F8F 		isb														
 1621 001c BFF34F8F 		dsb														
 1622              	
 1623              	@ 0 "" 2
 1624              		.thumb
 1625              		.syntax unified
 1626 0020 3A61     		str	r2, [r7, #16]
 1627 0022 FB60     		str	r3, [r7, #12]
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 1628              		.loc 2 223 9
 1629 0024 3B69     		ldr	r3, [r7, #16]
 1630              	.LBE150:
 1631              	.LBE149:
1522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 1632              		.loc 1 1523 27
 1633 0026 FB61     		str	r3, [r7, #28]
1524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being queried. */
1527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1634              		.loc 1 1527 12
 1635 0028 7B68     		ldr	r3, [r7, #4]
 1636 002a 002B     		cmp	r3, #0
 1637 002c 02D1     		bne	.L97
 1638              		.loc 1 1527 12 is_stmt 0 discriminator 1
 1639 002e 094B     		ldr	r3, .L100
 1640 0030 1B68     		ldr	r3, [r3]
 1641 0032 00E0     		b	.L98
 1642              	.L97:
 1643              		.loc 1 1527 12 discriminator 2
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 60


 1644 0034 7B68     		ldr	r3, [r7, #4]
 1645              	.L98:
 1646              		.loc 1 1527 10 is_stmt 1 discriminator 4
 1647 0036 BB61     		str	r3, [r7, #24]
1528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1648              		.loc 1 1528 13 discriminator 4
 1649 0038 BB69     		ldr	r3, [r7, #24]
 1650 003a DB6A     		ldr	r3, [r3, #44]
 1651 003c 7B61     		str	r3, [r7, #20]
 1652 003e FB69     		ldr	r3, [r7, #28]
 1653 0040 BB60     		str	r3, [r7, #8]
 1654              	.LBB151:
 1655              	.LBB152:
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1656              		.loc 2 229 2 discriminator 4
 1657 0042 BB68     		ldr	r3, [r7, #8]
 1658              		.syntax unified
 1659              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1660 0044 83F31188 			msr basepri, r3	
 1661              	@ 0 "" 2
 230:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 231:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
 232:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 233:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 1662              		.loc 2 233 1 discriminator 4
 1663              		.thumb
 1664              		.syntax unified
 1665 0048 00BF     		nop
 1666              	.LBE152:
 1667              	.LBE151:
1529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 1668              		.loc 1 1532 10 discriminator 4
 1669 004a 7B69     		ldr	r3, [r7, #20]
1533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1670              		.loc 1 1533 2 discriminator 4
 1671 004c 1846     		mov	r0, r3
 1672 004e 2037     		adds	r7, r7, #32
 1673              	.LCFI48:
 1674              		.cfi_def_cfa_offset 8
 1675 0050 BD46     		mov	sp, r7
 1676              	.LCFI49:
 1677              		.cfi_def_cfa_register 13
 1678              		@ sp needed
 1679 0052 80BD     		pop	{r7, pc}
 1680              	.L101:
 1681              		.align	2
 1682              	.L100:
 1683 0054 00000000 		.word	pxCurrentTCB
 1684              		.cfi_endproc
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 61


 1685              	.LFE13:
 1687              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1688              		.align	1
 1689              		.global	vTaskPrioritySet
 1690              		.syntax unified
 1691              		.thumb
 1692              		.thumb_func
 1693              		.fpu fpv4-sp-d16
 1695              	vTaskPrioritySet:
 1696              	.LFB14:
1534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1697              		.loc 1 1541 2
 1698              		.cfi_startproc
 1699              		@ args = 0, pretend = 0, frame = 32
 1700              		@ frame_needed = 1, uses_anonymous_args = 0
 1701 0000 80B5     		push	{r7, lr}
 1702              	.LCFI50:
 1703              		.cfi_def_cfa_offset 8
 1704              		.cfi_offset 7, -8
 1705              		.cfi_offset 14, -4
 1706 0002 88B0     		sub	sp, sp, #32
 1707              	.LCFI51:
 1708              		.cfi_def_cfa_offset 40
 1709 0004 00AF     		add	r7, sp, #0
 1710              	.LCFI52:
 1711              		.cfi_def_cfa_register 7
 1712 0006 7860     		str	r0, [r7, #4]
 1713 0008 3960     		str	r1, [r7]
1542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1714              		.loc 1 1544 13
 1715 000a 0023     		movs	r3, #0
 1716 000c FB61     		str	r3, [r7, #28]
1545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 1717              		.loc 1 1546 3
 1718 000e 3B68     		ldr	r3, [r7]
 1719 0010 372B     		cmp	r3, #55
 1720 0012 0AD9     		bls	.L103
 1721              	.LBB153:
 1722              	.LBB154:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1723              		.loc 2 195 2
 1724              		.syntax unified
 1725              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1726 0014 4FF05003 			mov r3, #80												
 1727 0018 83F31188 		msr basepri, r3											
 1728 001c BFF36F8F 		isb														
 1729 0020 BFF34F8F 		dsb														
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 62


 1730              	
 1731              	@ 0 "" 2
 1732              		.thumb
 1733              		.syntax unified
 1734 0024 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 1735              		.loc 2 203 1
 1736 0026 00BF     		nop
 1737              	.L104:
 1738              	.LBE154:
 1739              	.LBE153:
 1740              		.loc 1 1546 3 discriminator 1
 1741 0028 FEE7     		b	.L104
 1742              	.L103:
1547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
1549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 1743              		.loc 1 1549 5
 1744 002a 3B68     		ldr	r3, [r7]
 1745 002c 372B     		cmp	r3, #55
 1746 002e 01D9     		bls	.L105
1550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 1747              		.loc 1 1551 18
 1748 0030 3723     		movs	r3, #55
 1749 0032 3B60     		str	r3, [r7]
 1750              	.L105:
1552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 1751              		.loc 1 1558 3
 1752 0034 FFF7FEFF 		bl	vPortEnterCritical
1559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being changed. */
1562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1753              		.loc 1 1562 12
 1754 0038 7B68     		ldr	r3, [r7, #4]
 1755 003a 002B     		cmp	r3, #0
 1756 003c 02D1     		bne	.L106
 1757              		.loc 1 1562 12 is_stmt 0 discriminator 1
 1758 003e 3B4B     		ldr	r3, .L115
 1759 0040 1B68     		ldr	r3, [r3]
 1760 0042 00E0     		b	.L107
 1761              	.L106:
 1762              		.loc 1 1562 12 discriminator 2
 1763 0044 7B68     		ldr	r3, [r7, #4]
 1764              	.L107:
 1765              		.loc 1 1562 10 is_stmt 1 discriminator 4
 1766 0046 BB61     		str	r3, [r7, #24]
1563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 63


1566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
 1767              		.loc 1 1568 27 discriminator 4
 1768 0048 BB69     		ldr	r3, [r7, #24]
 1769 004a 1B6D     		ldr	r3, [r3, #80]
 1770 004c 7B61     		str	r3, [r7, #20]
1569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
1571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
 1771              		.loc 1 1576 6 discriminator 4
 1772 004e 7A69     		ldr	r2, [r7, #20]
 1773 0050 3B68     		ldr	r3, [r7]
 1774 0052 9A42     		cmp	r2, r3
 1775 0054 63D0     		beq	.L108
1577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
1580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
 1776              		.loc 1 1580 7
 1777 0056 3A68     		ldr	r2, [r7]
 1778 0058 7B69     		ldr	r3, [r7, #20]
 1779 005a 9A42     		cmp	r2, r3
 1780 005c 0DD9     		bls	.L109
1581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
 1781              		.loc 1 1582 16
 1782 005e 334B     		ldr	r3, .L115
 1783 0060 1B68     		ldr	r3, [r3]
 1784              		.loc 1 1582 8
 1785 0062 BA69     		ldr	r2, [r7, #24]
 1786 0064 9A42     		cmp	r2, r3
 1787 0066 0FD0     		beq	.L110
1583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of a task other than the currently
1585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						running task is being raised.  Is the priority being
1586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						raised above that of the running task? */
1587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 1788              		.loc 1 1587 40
 1789 0068 304B     		ldr	r3, .L115
 1790 006a 1B68     		ldr	r3, [r3]
 1791 006c DB6A     		ldr	r3, [r3, #44]
 1792              		.loc 1 1587 9
 1793 006e 3A68     		ldr	r2, [r7]
 1794 0070 9A42     		cmp	r2, r3
 1795 0072 09D3     		bcc	.L110
1588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xYieldRequired = pdTRUE;
 1796              		.loc 1 1589 23
 1797 0074 0123     		movs	r3, #1
 1798 0076 FB61     		str	r3, [r7, #28]
 1799 0078 06E0     		b	.L110
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 64


 1800              	.L109:
1590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
1592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of the running task is being raised,
1599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but the running task must already be the highest
1600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority task able to run so no yield is required. */
1601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
 1801              		.loc 1 1603 20
 1802 007a 2C4B     		ldr	r3, .L115
 1803 007c 1B68     		ldr	r3, [r3]
 1804              		.loc 1 1603 12
 1805 007e BA69     		ldr	r2, [r7, #24]
 1806 0080 9A42     		cmp	r2, r3
 1807 0082 01D1     		bne	.L110
1604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of the running task down means
1606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					there may now be another task of higher priority that
1607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is ready to execute. */
1608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
 1808              		.loc 1 1608 21
 1809 0084 0123     		movs	r3, #1
 1810 0086 FB61     		str	r3, [r7, #28]
 1811              	.L110:
1609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of any other task down does not
1613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					require a yield as the running task must be above the
1614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new priority of the task being modified. */
1615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				before its uxPriority member is changed so the
1619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 1812              		.loc 1 1620 27
 1813 0088 BB69     		ldr	r3, [r7, #24]
 1814 008a DB6A     		ldr	r3, [r3, #44]
 1815 008c 3B61     		str	r3, [r7, #16]
1621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
1625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
1626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 1816              		.loc 1 1626 15
 1817 008e BB69     		ldr	r3, [r7, #24]
 1818 0090 1A6D     		ldr	r2, [r3, #80]
 1819              		.loc 1 1626 40
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 65


 1820 0092 BB69     		ldr	r3, [r7, #24]
 1821 0094 DB6A     		ldr	r3, [r3, #44]
 1822              		.loc 1 1626 8
 1823 0096 9A42     		cmp	r2, r3
 1824 0098 02D1     		bne	.L111
1627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
 1825              		.loc 1 1628 25
 1826 009a BB69     		ldr	r3, [r7, #24]
 1827 009c 3A68     		ldr	r2, [r7]
 1828 009e DA62     		str	r2, [r3, #44]
 1829              	.L111:
1629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
1636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
 1830              		.loc 1 1636 28
 1831 00a0 BB69     		ldr	r3, [r7, #24]
 1832 00a2 3A68     		ldr	r2, [r7]
 1833 00a4 1A65     		str	r2, [r3, #80]
1637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
1639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
1643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				being used for anything else. */
1646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
 1834              		.loc 1 1646 11
 1835 00a6 BB69     		ldr	r3, [r7, #24]
 1836 00a8 9B69     		ldr	r3, [r3, #24]
 1837              		.loc 1 1646 7
 1838 00aa 002B     		cmp	r3, #0
 1839 00ac 04DB     		blt	.L112
1647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
 1840              		.loc 1 1648 6
 1841 00ae 3B68     		ldr	r3, [r7]
 1842 00b0 C3F13802 		rsb	r2, r3, #56
 1843 00b4 BB69     		ldr	r3, [r7, #24]
 1844 00b6 9A61     		str	r2, [r3, #24]
 1845              	.L112:
1649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing more than change its priority variable. However, if
1657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 66


1658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in the list appropriate to its new priority. */
1659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
 1846              		.loc 1 1659 9
 1847 00b8 BB69     		ldr	r3, [r7, #24]
 1848 00ba 5969     		ldr	r1, [r3, #20]
 1849 00bc 3A69     		ldr	r2, [r7, #16]
 1850 00be 1346     		mov	r3, r2
 1851 00c0 9B00     		lsls	r3, r3, #2
 1852 00c2 1344     		add	r3, r3, r2
 1853 00c4 9B00     		lsls	r3, r3, #2
 1854 00c6 1A4A     		ldr	r2, .L115+4
 1855 00c8 1344     		add	r3, r3, r2
 1856              		.loc 1 1659 7
 1857 00ca 9942     		cmp	r1, r3
 1858 00cc 1CD1     		bne	.L113
1660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before
1662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section we can do this even if the scheduler is suspended. */
1664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1859              		.loc 1 1664 10
 1860 00ce BB69     		ldr	r3, [r7, #24]
 1861 00d0 0433     		adds	r3, r3, #4
 1862 00d2 1846     		mov	r0, r3
 1863 00d4 FFF7FEFF 		bl	uxListRemove
1665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
1667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
1668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
1669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1864              		.loc 1 1675 6
 1865 00d8 BB69     		ldr	r3, [r7, #24]
 1866 00da DA6A     		ldr	r2, [r3, #44]
 1867 00dc 154B     		ldr	r3, .L115+8
 1868 00de 1B68     		ldr	r3, [r3]
 1869 00e0 9A42     		cmp	r2, r3
 1870 00e2 03D9     		bls	.L114
 1871              		.loc 1 1675 6 is_stmt 0 discriminator 1
 1872 00e4 BB69     		ldr	r3, [r7, #24]
 1873 00e6 DB6A     		ldr	r3, [r3, #44]
 1874 00e8 124A     		ldr	r2, .L115+8
 1875 00ea 1360     		str	r3, [r2]
 1876              	.L114:
 1877              		.loc 1 1675 6 discriminator 3
 1878 00ec BB69     		ldr	r3, [r7, #24]
 1879 00ee DA6A     		ldr	r2, [r3, #44]
 1880 00f0 1346     		mov	r3, r2
 1881 00f2 9B00     		lsls	r3, r3, #2
 1882 00f4 1344     		add	r3, r3, r2
 1883 00f6 9B00     		lsls	r3, r3, #2
 1884 00f8 0D4A     		ldr	r2, .L115+4
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 67


 1885 00fa 1A44     		add	r2, r2, r3
 1886 00fc BB69     		ldr	r3, [r7, #24]
 1887 00fe 0433     		adds	r3, r3, #4
 1888 0100 1946     		mov	r1, r3
 1889 0102 1046     		mov	r0, r2
 1890 0104 FFF7FEFF 		bl	vListInsertEnd
 1891              	.L113:
1676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
 1892              		.loc 1 1682 7 is_stmt 1
 1893 0108 FB69     		ldr	r3, [r7, #28]
 1894 010a 002B     		cmp	r3, #0
 1895 010c 07D0     		beq	.L108
1683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 1896              		.loc 1 1684 6
 1897 010e 0A4B     		ldr	r3, .L115+12
 1898 0110 4FF08052 		mov	r2, #268435456
 1899 0114 1A60     		str	r2, [r3]
 1900              		.syntax unified
 1901              	@ 1684 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1902 0116 BFF34F8F 		dsb
 1903              	@ 0 "" 2
 1904              	@ 1684 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1905 011a BFF36F8F 		isb
 1906              	@ 0 "" 2
 1907              		.thumb
 1908              		.syntax unified
 1909              	.L108:
1685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				optimised task selection is not being used. */
1693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1910              		.loc 1 1696 3
 1911 011e FFF7FEFF 		bl	vPortExitCritical
1697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1912              		.loc 1 1697 2
 1913 0122 00BF     		nop
 1914 0124 2037     		adds	r7, r7, #32
 1915              	.LCFI53:
 1916              		.cfi_def_cfa_offset 8
 1917 0126 BD46     		mov	sp, r7
 1918              	.LCFI54:
 1919              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 68


 1920              		@ sp needed
 1921 0128 80BD     		pop	{r7, pc}
 1922              	.L116:
 1923 012a 00BF     		.align	2
 1924              	.L115:
 1925 012c 00000000 		.word	pxCurrentTCB
 1926 0130 00000000 		.word	pxReadyTasksLists
 1927 0134 00000000 		.word	uxTopReadyPriority
 1928 0138 04ED00E0 		.word	-536810236
 1929              		.cfi_endproc
 1930              	.LFE14:
 1932              		.section	.text.vTaskSuspend,"ax",%progbits
 1933              		.align	1
 1934              		.global	vTaskSuspend
 1935              		.syntax unified
 1936              		.thumb
 1937              		.thumb_func
 1938              		.fpu fpv4-sp-d16
 1940              	vTaskSuspend:
 1941              	.LFB15:
1698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1942              		.loc 1 1705 2
 1943              		.cfi_startproc
 1944              		@ args = 0, pretend = 0, frame = 16
 1945              		@ frame_needed = 1, uses_anonymous_args = 0
 1946 0000 80B5     		push	{r7, lr}
 1947              	.LCFI55:
 1948              		.cfi_def_cfa_offset 8
 1949              		.cfi_offset 7, -8
 1950              		.cfi_offset 14, -4
 1951 0002 84B0     		sub	sp, sp, #16
 1952              	.LCFI56:
 1953              		.cfi_def_cfa_offset 24
 1954 0004 00AF     		add	r7, sp, #0
 1955              	.LCFI57:
 1956              		.cfi_def_cfa_register 7
 1957 0006 7860     		str	r0, [r7, #4]
1706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 1958              		.loc 1 1708 3
 1959 0008 FFF7FEFF 		bl	vPortEnterCritical
1709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being suspended. */
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 1960              		.loc 1 1712 12
 1961 000c 7B68     		ldr	r3, [r7, #4]
 1962 000e 002B     		cmp	r3, #0
 1963 0010 02D1     		bne	.L118
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 69


 1964              		.loc 1 1712 12 is_stmt 0 discriminator 1
 1965 0012 304B     		ldr	r3, .L129
 1966 0014 1B68     		ldr	r3, [r3]
 1967 0016 00E0     		b	.L119
 1968              	.L118:
 1969              		.loc 1 1712 12 discriminator 2
 1970 0018 7B68     		ldr	r3, [r7, #4]
 1971              	.L119:
 1972              		.loc 1 1712 10 is_stmt 1 discriminator 4
 1973 001a FB60     		str	r3, [r7, #12]
1713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			suspended list. */
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1974              		.loc 1 1718 8 discriminator 4
 1975 001c FB68     		ldr	r3, [r7, #12]
 1976 001e 0433     		adds	r3, r3, #4
 1977 0020 1846     		mov	r0, r3
 1978 0022 FFF7FEFF 		bl	uxListRemove
1719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 1979              		.loc 1 1728 8 discriminator 4
 1980 0026 FB68     		ldr	r3, [r7, #12]
 1981 0028 9B6A     		ldr	r3, [r3, #40]
 1982              		.loc 1 1728 6 discriminator 4
 1983 002a 002B     		cmp	r3, #0
 1984 002c 04D0     		beq	.L120
1729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1985              		.loc 1 1730 14
 1986 002e FB68     		ldr	r3, [r7, #12]
 1987 0030 1833     		adds	r3, r3, #24
 1988 0032 1846     		mov	r0, r3
 1989 0034 FFF7FEFF 		bl	uxListRemove
 1990              	.L120:
1731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 1991              		.loc 1 1737 4
 1992 0038 FB68     		ldr	r3, [r7, #12]
 1993 003a 0433     		adds	r3, r3, #4
 1994 003c 1946     		mov	r1, r3
 1995 003e 2648     		ldr	r0, .L129+4
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 70


 1996 0040 FFF7FEFF 		bl	vListInsertEnd
1738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 1997              		.loc 1 1741 14
 1998 0044 FB68     		ldr	r3, [r7, #12]
 1999 0046 93F86030 		ldrb	r3, [r3, #96]
 2000 004a DBB2     		uxtb	r3, r3
 2001              		.loc 1 1741 7
 2002 004c 012B     		cmp	r3, #1
 2003 004e 03D1     		bne	.L121
1742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task was blocked to wait for a notification, but is
1744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					now suspended, so no notification was received. */
1745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 2004              		.loc 1 1745 27
 2005 0050 FB68     		ldr	r3, [r7, #12]
 2006 0052 0022     		movs	r2, #0
 2007 0054 83F86020 		strb	r2, [r3, #96]
 2008              	.L121:
1746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 2009              		.loc 1 1750 3
 2010 0058 FFF7FEFF 		bl	vPortExitCritical
1751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 2011              		.loc 1 1752 25
 2012 005c 1F4B     		ldr	r3, .L129+8
 2013 005e 1B68     		ldr	r3, [r3]
 2014              		.loc 1 1752 5
 2015 0060 002B     		cmp	r3, #0
 2016 0062 05D0     		beq	.L122
1753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is now in the Suspended state. */
1756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 2017              		.loc 1 1756 4
 2018 0064 FFF7FEFF 		bl	vPortEnterCritical
1757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
 2019              		.loc 1 1758 5
 2020 0068 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
1759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 2021              		.loc 1 1760 4
 2022 006c FFF7FEFF 		bl	vPortExitCritical
 2023              	.L122:
1761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 71


1767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 2024              		.loc 1 1767 13
 2025 0070 184B     		ldr	r3, .L129
 2026 0072 1B68     		ldr	r3, [r3]
 2027              		.loc 1 1767 5
 2028 0074 FA68     		ldr	r2, [r7, #12]
 2029 0076 9A42     		cmp	r2, r3
 2030 0078 27D1     		bne	.L128
1768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
 2031              		.loc 1 1769 26
 2032 007a 184B     		ldr	r3, .L129+8
 2033 007c 1B68     		ldr	r3, [r3]
 2034              		.loc 1 1769 6
 2035 007e 002B     		cmp	r3, #0
 2036 0080 17D0     		beq	.L124
1770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The current task has just been suspended. */
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 2037              		.loc 1 1772 5
 2038 0082 174B     		ldr	r3, .L129+12
 2039 0084 1B68     		ldr	r3, [r3]
 2040 0086 002B     		cmp	r3, #0
 2041 0088 0AD0     		beq	.L125
 2042              	.LBB155:
 2043              	.LBB156:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2044              		.loc 2 195 2
 2045              		.syntax unified
 2046              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2047 008a 4FF05003 			mov r3, #80												
 2048 008e 83F31188 		msr basepri, r3											
 2049 0092 BFF36F8F 		isb														
 2050 0096 BFF34F8F 		dsb														
 2051              	
 2052              	@ 0 "" 2
 2053              		.thumb
 2054              		.syntax unified
 2055 009a BB60     		str	r3, [r7, #8]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2056              		.loc 2 203 1
 2057 009c 00BF     		nop
 2058              	.L126:
 2059              	.LBE156:
 2060              	.LBE155:
 2061              		.loc 1 1772 5 discriminator 1
 2062 009e FEE7     		b	.L126
 2063              	.L125:
1773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 2064              		.loc 1 1773 5
 2065 00a0 104B     		ldr	r3, .L129+16
 2066 00a2 4FF08052 		mov	r2, #268435456
 2067 00a6 1A60     		str	r2, [r3]
 2068              		.syntax unified
 2069              	@ 1773 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2070 00a8 BFF34F8F 		dsb
 2071              	@ 0 "" 2
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 72


 2072              	@ 1773 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2073 00ac BFF36F8F 		isb
 2074              	@ 0 "" 2
1774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Rig
1781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is. */
1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
1787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2075              		.loc 1 1798 2
 2076              		.thumb
 2077              		.syntax unified
 2078 00b0 0BE0     		b	.L128
 2079              	.L124:
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2080              		.loc 1 1780 9
 2081 00b2 094B     		ldr	r3, .L129+4
 2082 00b4 1A68     		ldr	r2, [r3]
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2083              		.loc 1 1780 56
 2084 00b6 0C4B     		ldr	r3, .L129+20
 2085 00b8 1B68     		ldr	r3, [r3]
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2086              		.loc 1 1780 7
 2087 00ba 9A42     		cmp	r2, r3
 2088 00bc 03D1     		bne	.L127
1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2089              		.loc 1 1786 19
 2090 00be 054B     		ldr	r3, .L129
 2091 00c0 0022     		movs	r2, #0
 2092 00c2 1A60     		str	r2, [r3]
 2093              		.loc 1 1798 2
 2094 00c4 01E0     		b	.L128
 2095              	.L127:
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2096              		.loc 1 1790 6
 2097 00c6 FFF7FEFF 		bl	vTaskSwitchContext
 2098              	.L128:
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 73


 2099              		.loc 1 1798 2
 2100 00ca 00BF     		nop
 2101 00cc 1037     		adds	r7, r7, #16
 2102              	.LCFI58:
 2103              		.cfi_def_cfa_offset 8
 2104 00ce BD46     		mov	sp, r7
 2105              	.LCFI59:
 2106              		.cfi_def_cfa_register 13
 2107              		@ sp needed
 2108 00d0 80BD     		pop	{r7, pc}
 2109              	.L130:
 2110 00d2 00BF     		.align	2
 2111              	.L129:
 2112 00d4 00000000 		.word	pxCurrentTCB
 2113 00d8 00000000 		.word	xSuspendedTaskList
 2114 00dc 00000000 		.word	xSchedulerRunning
 2115 00e0 00000000 		.word	uxSchedulerSuspended
 2116 00e4 04ED00E0 		.word	-536810236
 2117 00e8 00000000 		.word	uxCurrentNumberOfTasks
 2118              		.cfi_endproc
 2119              	.LFE15:
 2121              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
 2122              		.align	1
 2123              		.syntax unified
 2124              		.thumb
 2125              		.thumb_func
 2126              		.fpu fpv4-sp-d16
 2128              	prvTaskIsTaskSuspended:
 2129              	.LFB16:
1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2130              		.loc 1 1806 2
 2131              		.cfi_startproc
 2132              		@ args = 0, pretend = 0, frame = 24
 2133              		@ frame_needed = 1, uses_anonymous_args = 0
 2134              		@ link register save eliminated.
 2135 0000 80B4     		push	{r7}
 2136              	.LCFI60:
 2137              		.cfi_def_cfa_offset 4
 2138              		.cfi_offset 7, -4
 2139 0002 87B0     		sub	sp, sp, #28
 2140              	.LCFI61:
 2141              		.cfi_def_cfa_offset 32
 2142 0004 00AF     		add	r7, sp, #0
 2143              	.LCFI62:
 2144              		.cfi_def_cfa_register 7
 2145 0006 7860     		str	r0, [r7, #4]
1807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 2146              		.loc 1 1807 13
 2147 0008 0023     		movs	r3, #0
 2148 000a 7B61     		str	r3, [r7, #20]
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 74


1808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
 2149              		.loc 1 1808 22
 2150 000c 7B68     		ldr	r3, [r7, #4]
 2151 000e 3B61     		str	r3, [r7, #16]
1809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		section. */
1812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
 2152              		.loc 1 1814 3
 2153 0010 7B68     		ldr	r3, [r7, #4]
 2154 0012 002B     		cmp	r3, #0
 2155 0014 0AD1     		bne	.L132
 2156              	.LBB157:
 2157              	.LBB158:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2158              		.loc 2 195 2
 2159              		.syntax unified
 2160              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2161 0016 4FF05003 			mov r3, #80												
 2162 001a 83F31188 		msr basepri, r3											
 2163 001e BFF36F8F 		isb														
 2164 0022 BFF34F8F 		dsb														
 2165              	
 2166              	@ 0 "" 2
 2167              		.thumb
 2168              		.syntax unified
 2169 0026 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2170              		.loc 2 203 1
 2171 0028 00BF     		nop
 2172              	.L133:
 2173              	.LBE158:
 2174              	.LBE157:
 2175              		.loc 1 1814 3 discriminator 1
 2176 002a FEE7     		b	.L133
 2177              	.L132:
1815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 2178              		.loc 1 1817 7
 2179 002c 3B69     		ldr	r3, [r7, #16]
 2180 002e 5B69     		ldr	r3, [r3, #20]
 2181              		.loc 1 1817 5
 2182 0030 0A4A     		ldr	r2, .L136
 2183 0032 9342     		cmp	r3, r2
 2184 0034 0AD1     		bne	.L134
1818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 2185              		.loc 1 1820 8
 2186 0036 3B69     		ldr	r3, [r7, #16]
 2187 0038 9B6A     		ldr	r3, [r3, #40]
 2188              		.loc 1 1820 6
 2189 003a 094A     		ldr	r2, .L136+4
 2190 003c 9342     		cmp	r3, r2
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 75


 2191 003e 05D0     		beq	.L134
1821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
 2192              		.loc 1 1824 9
 2193 0040 3B69     		ldr	r3, [r7, #16]
 2194 0042 9B6A     		ldr	r3, [r3, #40]
 2195              		.loc 1 1824 7
 2196 0044 002B     		cmp	r3, #0
 2197 0046 01D1     		bne	.L134
1825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 2198              		.loc 1 1826 14
 2199 0048 0123     		movs	r3, #1
 2200 004a 7B61     		str	r3, [r7, #20]
 2201              	.L134:
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 2202              		.loc 1 1843 10
 2203 004c 7B69     		ldr	r3, [r7, #20]
1844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 2204              		.loc 1 1844 2
 2205 004e 1846     		mov	r0, r3
 2206 0050 1C37     		adds	r7, r7, #28
 2207              	.LCFI63:
 2208              		.cfi_def_cfa_offset 4
 2209 0052 BD46     		mov	sp, r7
 2210              	.LCFI64:
 2211              		.cfi_def_cfa_register 13
 2212              		@ sp needed
 2213 0054 5DF8047B 		ldr	r7, [sp], #4
 2214              	.LCFI65:
 2215              		.cfi_restore 7
 2216              		.cfi_def_cfa_offset 0
 2217 0058 7047     		bx	lr
 2218              	.L137:
 2219 005a 00BF     		.align	2
 2220              	.L136:
 2221 005c 00000000 		.word	xSuspendedTaskList
 2222 0060 00000000 		.word	xPendingReadyList
 2223              		.cfi_endproc
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 76


 2224              	.LFE16:
 2226              		.section	.text.vTaskResume,"ax",%progbits
 2227              		.align	1
 2228              		.global	vTaskResume
 2229              		.syntax unified
 2230              		.thumb
 2231              		.thumb_func
 2232              		.fpu fpv4-sp-d16
 2234              	vTaskResume:
 2235              	.LFB17:
1845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2236              		.loc 1 1852 2
 2237              		.cfi_startproc
 2238              		@ args = 0, pretend = 0, frame = 16
 2239              		@ frame_needed = 1, uses_anonymous_args = 0
 2240 0000 80B5     		push	{r7, lr}
 2241              	.LCFI66:
 2242              		.cfi_def_cfa_offset 8
 2243              		.cfi_offset 7, -8
 2244              		.cfi_offset 14, -4
 2245 0002 84B0     		sub	sp, sp, #16
 2246              	.LCFI67:
 2247              		.cfi_def_cfa_offset 24
 2248 0004 00AF     		add	r7, sp, #0
 2249              	.LCFI68:
 2250              		.cfi_def_cfa_register 7
 2251 0006 7860     		str	r0, [r7, #4]
1853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 2252              		.loc 1 1853 16
 2253 0008 7B68     		ldr	r3, [r7, #4]
 2254 000a FB60     		str	r3, [r7, #12]
1854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
 2255              		.loc 1 1856 3
 2256 000c 7B68     		ldr	r3, [r7, #4]
 2257 000e 002B     		cmp	r3, #0
 2258 0010 0AD1     		bne	.L139
 2259              	.LBB159:
 2260              	.LBB160:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2261              		.loc 2 195 2
 2262              		.syntax unified
 2263              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2264 0012 4FF05003 			mov r3, #80												
 2265 0016 83F31188 		msr basepri, r3											
 2266 001a BFF36F8F 		isb														
 2267 001e BFF34F8F 		dsb														
 2268              	
 2269              	@ 0 "" 2
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 77


 2270              		.thumb
 2271              		.syntax unified
 2272 0022 BB60     		str	r3, [r7, #8]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2273              		.loc 2 203 1
 2274 0024 00BF     		nop
 2275              	.L140:
 2276              	.LBE160:
 2277              	.LBE159:
 2278              		.loc 1 1856 3 discriminator 1
 2279 0026 FEE7     		b	.L140
 2280              	.L139:
1857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		currently executing task. */
1860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 2281              		.loc 1 1860 15
 2282 0028 204B     		ldr	r3, .L145
 2283 002a 1B68     		ldr	r3, [r3]
 2284              		.loc 1 1860 5
 2285 002c FA68     		ldr	r2, [r7, #12]
 2286 002e 9A42     		cmp	r2, r3
 2287 0030 38D0     		beq	.L144
 2288              		.loc 1 1860 33 discriminator 1
 2289 0032 FB68     		ldr	r3, [r7, #12]
 2290 0034 002B     		cmp	r3, #0
 2291 0036 35D0     		beq	.L144
1861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 2292              		.loc 1 1862 4
 2293 0038 FFF7FEFF 		bl	vPortEnterCritical
1863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 2294              		.loc 1 1864 9
 2295 003c F868     		ldr	r0, [r7, #12]
 2296 003e FFF7FEFF 		bl	prvTaskIsTaskSuspended
 2297 0042 0346     		mov	r3, r0
 2298              		.loc 1 1864 7
 2299 0044 002B     		cmp	r3, #0
 2300 0046 2BD0     		beq	.L142
1865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended because this is inside a critical section. */
1870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 2301              		.loc 1 1870 15
 2302 0048 FB68     		ldr	r3, [r7, #12]
 2303 004a 0433     		adds	r3, r3, #4
 2304 004c 1846     		mov	r0, r3
 2305 004e FFF7FEFF 		bl	uxListRemove
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2306              		.loc 1 1871 6
 2307 0052 FB68     		ldr	r3, [r7, #12]
 2308 0054 DA6A     		ldr	r2, [r3, #44]
 2309 0056 164B     		ldr	r3, .L145+4
 2310 0058 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 78


 2311 005a 9A42     		cmp	r2, r3
 2312 005c 03D9     		bls	.L143
 2313              		.loc 1 1871 6 is_stmt 0 discriminator 1
 2314 005e FB68     		ldr	r3, [r7, #12]
 2315 0060 DB6A     		ldr	r3, [r3, #44]
 2316 0062 134A     		ldr	r2, .L145+4
 2317 0064 1360     		str	r3, [r2]
 2318              	.L143:
 2319              		.loc 1 1871 6 discriminator 3
 2320 0066 FB68     		ldr	r3, [r7, #12]
 2321 0068 DA6A     		ldr	r2, [r3, #44]
 2322 006a 1346     		mov	r3, r2
 2323 006c 9B00     		lsls	r3, r3, #2
 2324 006e 1344     		add	r3, r3, r2
 2325 0070 9B00     		lsls	r3, r3, #2
 2326 0072 104A     		ldr	r2, .L145+8
 2327 0074 1A44     		add	r2, r2, r3
 2328 0076 FB68     		ldr	r3, [r7, #12]
 2329 0078 0433     		adds	r3, r3, #4
 2330 007a 1946     		mov	r1, r3
 2331 007c 1046     		mov	r0, r2
 2332 007e FFF7FEFF 		bl	vListInsertEnd
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A higher priority task may have just been resumed. */
1874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2333              		.loc 1 1874 15 is_stmt 1 discriminator 3
 2334 0082 FB68     		ldr	r3, [r7, #12]
 2335 0084 DA6A     		ldr	r2, [r3, #44]
 2336              		.loc 1 1874 43 discriminator 3
 2337 0086 094B     		ldr	r3, .L145
 2338 0088 1B68     		ldr	r3, [r3]
 2339 008a DB6A     		ldr	r3, [r3, #44]
 2340              		.loc 1 1874 8 discriminator 3
 2341 008c 9A42     		cmp	r2, r3
 2342 008e 07D3     		bcc	.L142
1875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but will leave the lists in the correct state for the
1878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						next yield. */
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
 2343              		.loc 1 1879 7
 2344 0090 094B     		ldr	r3, .L145+12
 2345 0092 4FF08052 		mov	r2, #268435456
 2346 0096 1A60     		str	r2, [r3]
 2347              		.syntax unified
 2348              	@ 1879 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2349 0098 BFF34F8F 		dsb
 2350              	@ 0 "" 2
 2351              	@ 1879 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2352 009c BFF36F8F 		isb
 2353              	@ 0 "" 2
 2354              		.thumb
 2355              		.syntax unified
 2356              	.L142:
1880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 79


1883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 2357              		.loc 1 1891 4
 2358 00a0 FFF7FEFF 		bl	vPortExitCritical
 2359              	.L144:
1892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2360              		.loc 1 1897 2
 2361 00a4 00BF     		nop
 2362 00a6 1037     		adds	r7, r7, #16
 2363              	.LCFI69:
 2364              		.cfi_def_cfa_offset 8
 2365 00a8 BD46     		mov	sp, r7
 2366              	.LCFI70:
 2367              		.cfi_def_cfa_register 13
 2368              		@ sp needed
 2369 00aa 80BD     		pop	{r7, pc}
 2370              	.L146:
 2371              		.align	2
 2372              	.L145:
 2373 00ac 00000000 		.word	pxCurrentTCB
 2374 00b0 00000000 		.word	uxTopReadyPriority
 2375 00b4 00000000 		.word	pxReadyTasksLists
 2376 00b8 04ED00E0 		.word	-536810236
 2377              		.cfi_endproc
 2378              	.LFE17:
 2380              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 2381              		.align	1
 2382              		.global	xTaskResumeFromISR
 2383              		.syntax unified
 2384              		.thumb
 2385              		.thumb_func
 2386              		.fpu fpv4-sp-d16
 2388              	xTaskResumeFromISR:
 2389              	.LFB18:
1898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2390              		.loc 1 1906 2
 2391              		.cfi_startproc
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 80


 2392              		@ args = 0, pretend = 0, frame = 40
 2393              		@ frame_needed = 1, uses_anonymous_args = 0
 2394 0000 80B5     		push	{r7, lr}
 2395              	.LCFI71:
 2396              		.cfi_def_cfa_offset 8
 2397              		.cfi_offset 7, -8
 2398              		.cfi_offset 14, -4
 2399 0002 8AB0     		sub	sp, sp, #40
 2400              	.LCFI72:
 2401              		.cfi_def_cfa_offset 48
 2402 0004 00AF     		add	r7, sp, #0
 2403              	.LCFI73:
 2404              		.cfi_def_cfa_register 7
 2405 0006 7860     		str	r0, [r7, #4]
1907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 2406              		.loc 1 1907 13
 2407 0008 0023     		movs	r3, #0
 2408 000a 7B62     		str	r3, [r7, #36]
1908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 2409              		.loc 1 1908 16
 2410 000c 7B68     		ldr	r3, [r7, #4]
 2411 000e 3B62     		str	r3, [r7, #32]
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
 2412              		.loc 1 1911 3
 2413 0010 7B68     		ldr	r3, [r7, #4]
 2414 0012 002B     		cmp	r3, #0
 2415 0014 0AD1     		bne	.L148
 2416              	.LBB161:
 2417              	.LBB162:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2418              		.loc 2 195 2
 2419              		.syntax unified
 2420              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2421 0016 4FF05003 			mov r3, #80												
 2422 001a 83F31188 		msr basepri, r3											
 2423 001e BFF36F8F 		isb														
 2424 0022 BFF34F8F 		dsb														
 2425              	
 2426              	@ 0 "" 2
 2427              		.thumb
 2428              		.syntax unified
 2429 0026 BB61     		str	r3, [r7, #24]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2430              		.loc 2 203 1
 2431 0028 00BF     		nop
 2432              	.L149:
 2433              	.LBE162:
 2434              	.LBE161:
 2435              		.loc 1 1911 3 discriminator 1
 2436 002a FEE7     		b	.L149
 2437              	.L148:
1912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 81


1916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 2438              		.loc 1 1929 3
 2439 002c FFF7FEFF 		bl	vPortValidateInterruptPriority
 2440              	.LBB163:
 2441              	.LBB164:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2442              		.loc 2 211 2
 2443              		.syntax unified
 2444              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2445 0030 EFF31182 			mrs r2, basepri											
 2446 0034 4FF05003 		mov r3, #80												
 2447 0038 83F31188 		msr basepri, r3											
 2448 003c BFF36F8F 		isb														
 2449 0040 BFF34F8F 		dsb														
 2450              	
 2451              	@ 0 "" 2
 2452              		.thumb
 2453              		.syntax unified
 2454 0044 7A61     		str	r2, [r7, #20]
 2455 0046 3B61     		str	r3, [r7, #16]
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 2456              		.loc 2 223 9
 2457 0048 7B69     		ldr	r3, [r7, #20]
 2458              	.LBE164:
 2459              	.LBE163:
1930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 2460              		.loc 1 1931 28
 2461 004a FB61     		str	r3, [r7, #28]
1932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 2462              		.loc 1 1933 8
 2463 004c 386A     		ldr	r0, [r7, #32]
 2464 004e FFF7FEFF 		bl	prvTaskIsTaskSuspended
 2465 0052 0346     		mov	r3, r0
 2466              		.loc 1 1933 6
 2467 0054 002B     		cmp	r3, #0
 2468 0056 30D0     		beq	.L151
1934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2469              		.loc 1 1938 30
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 82


 2470 0058 1D4B     		ldr	r3, .L156
 2471 005a 1B68     		ldr	r3, [r3]
 2472              		.loc 1 1938 7
 2473 005c 002B     		cmp	r3, #0
 2474 005e 26D1     		bne	.L152
1939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended list to the ready list directly. */
1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2475              		.loc 1 1942 15
 2476 0060 3B6A     		ldr	r3, [r7, #32]
 2477 0062 DA6A     		ldr	r2, [r3, #44]
 2478              		.loc 1 1942 43
 2479 0064 1B4B     		ldr	r3, .L156+4
 2480 0066 1B68     		ldr	r3, [r3]
 2481 0068 DB6A     		ldr	r3, [r3, #44]
 2482              		.loc 1 1942 8
 2483 006a 9A42     		cmp	r2, r3
 2484 006c 01D3     		bcc	.L153
1943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
 2485              		.loc 1 1944 22
 2486 006e 0123     		movs	r3, #1
 2487 0070 7B62     		str	r3, [r7, #36]
 2488              	.L153:
1945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2489              		.loc 1 1951 15
 2490 0072 3B6A     		ldr	r3, [r7, #32]
 2491 0074 0433     		adds	r3, r3, #4
 2492 0076 1846     		mov	r0, r3
 2493 0078 FFF7FEFF 		bl	uxListRemove
1952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2494              		.loc 1 1952 6
 2495 007c 3B6A     		ldr	r3, [r7, #32]
 2496 007e DA6A     		ldr	r2, [r3, #44]
 2497 0080 154B     		ldr	r3, .L156+8
 2498 0082 1B68     		ldr	r3, [r3]
 2499 0084 9A42     		cmp	r2, r3
 2500 0086 03D9     		bls	.L154
 2501              		.loc 1 1952 6 is_stmt 0 discriminator 1
 2502 0088 3B6A     		ldr	r3, [r7, #32]
 2503 008a DB6A     		ldr	r3, [r3, #44]
 2504 008c 124A     		ldr	r2, .L156+8
 2505 008e 1360     		str	r3, [r2]
 2506              	.L154:
 2507              		.loc 1 1952 6 discriminator 3
 2508 0090 3B6A     		ldr	r3, [r7, #32]
 2509 0092 DA6A     		ldr	r2, [r3, #44]
 2510 0094 1346     		mov	r3, r2
 2511 0096 9B00     		lsls	r3, r3, #2
 2512 0098 1344     		add	r3, r3, r2
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 83


 2513 009a 9B00     		lsls	r3, r3, #2
 2514 009c 0F4A     		ldr	r2, .L156+12
 2515 009e 1A44     		add	r2, r2, r3
 2516 00a0 3B6A     		ldr	r3, [r7, #32]
 2517 00a2 0433     		adds	r3, r3, #4
 2518 00a4 1946     		mov	r1, r3
 2519 00a6 1046     		mov	r0, r2
 2520 00a8 FFF7FEFF 		bl	vListInsertEnd
 2521 00ac 05E0     		b	.L151
 2522              	.L152:
1953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unsuspended. */
1959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 2523              		.loc 1 1959 6 is_stmt 1
 2524 00ae 3B6A     		ldr	r3, [r7, #32]
 2525 00b0 1833     		adds	r3, r3, #24
 2526 00b2 1946     		mov	r1, r3
 2527 00b4 0A48     		ldr	r0, .L156+16
 2528 00b6 FFF7FEFF 		bl	vListInsertEnd
 2529              	.L151:
 2530 00ba FB69     		ldr	r3, [r7, #28]
 2531 00bc FB60     		str	r3, [r7, #12]
 2532              	.LBB165:
 2533              	.LBB166:
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2534              		.loc 2 229 2
 2535 00be FB68     		ldr	r3, [r7, #12]
 2536              		.syntax unified
 2537              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2538 00c0 83F31188 			msr basepri, r3	
 2539              	@ 0 "" 2
 2540              		.loc 2 233 1
 2541              		.thumb
 2542              		.syntax unified
 2543 00c4 00BF     		nop
 2544              	.LBE166:
 2545              	.LBE165:
1960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
 2546              		.loc 1 1969 10
 2547 00c6 7B6A     		ldr	r3, [r7, #36]
1970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2548              		.loc 1 1970 2
 2549 00c8 1846     		mov	r0, r3
 2550 00ca 2837     		adds	r7, r7, #40
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 84


 2551              	.LCFI74:
 2552              		.cfi_def_cfa_offset 8
 2553 00cc BD46     		mov	sp, r7
 2554              	.LCFI75:
 2555              		.cfi_def_cfa_register 13
 2556              		@ sp needed
 2557 00ce 80BD     		pop	{r7, pc}
 2558              	.L157:
 2559              		.align	2
 2560              	.L156:
 2561 00d0 00000000 		.word	uxSchedulerSuspended
 2562 00d4 00000000 		.word	pxCurrentTCB
 2563 00d8 00000000 		.word	uxTopReadyPriority
 2564 00dc 00000000 		.word	pxReadyTasksLists
 2565 00e0 00000000 		.word	xPendingReadyList
 2566              		.cfi_endproc
 2567              	.LFE18:
 2569              		.section	.rodata
 2570              		.align	2
 2571              	.LC0:
 2572 0000 49444C45 		.ascii	"IDLE\000"
 2572      00
 2573              		.section	.text.vTaskStartScheduler,"ax",%progbits
 2574              		.align	1
 2575              		.global	vTaskStartScheduler
 2576              		.syntax unified
 2577              		.thumb
 2578              		.thumb_func
 2579              		.fpu fpv4-sp-d16
 2581              	vTaskStartScheduler:
 2582              	.LFB19:
1971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2583              		.loc 1 1976 1
 2584              		.cfi_startproc
 2585              		@ args = 0, pretend = 0, frame = 24
 2586              		@ frame_needed = 1, uses_anonymous_args = 0
 2587 0000 80B5     		push	{r7, lr}
 2588              	.LCFI76:
 2589              		.cfi_def_cfa_offset 8
 2590              		.cfi_offset 7, -8
 2591              		.cfi_offset 14, -4
 2592 0002 8AB0     		sub	sp, sp, #40
 2593              	.LCFI77:
 2594              		.cfi_def_cfa_offset 48
 2595 0004 04AF     		add	r7, sp, #16
 2596              	.LCFI78:
 2597              		.cfi_def_cfa 7, 32
 2598              	.LBB167:
1977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
1978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 85


1981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 2599              		.loc 1 1982 17
 2600 0006 0023     		movs	r3, #0
 2601 0008 BB60     		str	r3, [r7, #8]
1983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
 2602              		.loc 1 1983 16
 2603 000a 0023     		movs	r3, #0
 2604 000c 7B60     		str	r3, [r7, #4]
1984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		address of the RAM then create the idle task. */
1988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
 2605              		.loc 1 1988 3
 2606 000e 3A46     		mov	r2, r7
 2607 0010 391D     		adds	r1, r7, #4
 2608 0012 07F10803 		add	r3, r7, #8
 2609 0016 1846     		mov	r0, r3
 2610 0018 FFF7FEFF 		bl	vApplicationGetIdleTaskMemory
1989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 2611              		.loc 1 1989 21
 2612 001c 3968     		ldr	r1, [r7]
 2613 001e 7B68     		ldr	r3, [r7, #4]
 2614 0020 BA68     		ldr	r2, [r7, #8]
 2615 0022 0292     		str	r2, [sp, #8]
 2616 0024 0193     		str	r3, [sp, #4]
 2617 0026 0023     		movs	r3, #0
 2618 0028 0093     		str	r3, [sp]
 2619 002a 0023     		movs	r3, #0
 2620 002c 0A46     		mov	r2, r1
 2621 002e 2249     		ldr	r1, .L166
 2622 0030 2248     		ldr	r0, .L166+4
 2623 0032 FFF7FEFF 		bl	xTaskCreateStatic
 2624 0036 0346     		mov	r3, r0
 2625              		.loc 1 1989 19
 2626 0038 214A     		ldr	r2, .L166+8
 2627 003a 1360     		str	r3, [r2]
1990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												configIDLE_TASK_NAME,
1991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												ulIdleTaskStackSize,
1992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
1993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_P
1994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskStackBuffer,
1995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
 2628              		.loc 1 1997 23
 2629 003c 204B     		ldr	r3, .L166+8
 2630 003e 1B68     		ldr	r3, [r3]
 2631              		.loc 1 1997 5
 2632 0040 002B     		cmp	r3, #0
 2633 0042 02D0     		beq	.L159
1998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 2634              		.loc 1 1999 12
 2635 0044 0123     		movs	r3, #1
 2636 0046 7B61     		str	r3, [r7, #20]
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 86


 2637 0048 01E0     		b	.L160
 2638              	.L159:
2000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
 2639              		.loc 1 2003 12
 2640 004a 0023     		movs	r3, #0
 2641 004c 7B61     		str	r3, [r7, #20]
 2642              	.L160:
 2643              	.LBE167:
2004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
2007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
2009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
2010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configIDLE_TASK_NAME,
2011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configMINIMAL_STACK_SIZE,
2012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( void * ) NULL,
2013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIOR
2014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
2015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
2017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
2019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
 2644              		.loc 1 2020 5
 2645 004e 7B69     		ldr	r3, [r7, #20]
 2646 0050 012B     		cmp	r3, #1
 2647 0052 02D1     		bne	.L161
2021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
 2648              		.loc 1 2022 14
 2649 0054 FFF7FEFF 		bl	xTimerCreateTimerTask
 2650 0058 7861     		str	r0, [r7, #20]
 2651              	.L161:
2023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
2030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
 2652              		.loc 1 2031 4
 2653 005a 7B69     		ldr	r3, [r7, #20]
 2654 005c 012B     		cmp	r3, #1
 2655 005e 18D1     		bne	.L162
 2656              	.LBB168:
 2657              	.LBB169:
 2658              	.LBB170:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2659              		.loc 2 195 2
 2660              		.syntax unified
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 87


 2661              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2662 0060 4FF05003 			mov r3, #80												
 2663 0064 83F31188 		msr basepri, r3											
 2664 0068 BFF36F8F 		isb														
 2665 006c BFF34F8F 		dsb														
 2666              	
 2667              	@ 0 "" 2
 2668              		.thumb
 2669              		.syntax unified
 2670 0070 3B61     		str	r3, [r7, #16]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2671              		.loc 2 203 1
 2672 0072 00BF     		nop
 2673              	.LBE170:
 2674              	.LBE169:
2032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
2034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
2035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the only macro called by the function. */
2036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
2037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			freertos_tasks_c_additions_init();
2039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
2043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
2044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
2045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
2046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		starts to run. */
2047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
2048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to the task that will run first.
2053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
2054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for additional information. */
2055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 2675              		.loc 1 2059 24
 2676 0074 134B     		ldr	r3, .L166+12
 2677 0076 4FF0FF32 		mov	r2, #-1
 2678 007a 1A60     		str	r2, [r3]
2060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 2679              		.loc 1 2060 21
 2680 007c 124B     		ldr	r3, .L166+16
 2681 007e 0122     		movs	r2, #1
 2682 0080 1A60     		str	r2, [r3]
2061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 2683              		.loc 1 2061 14
 2684 0082 124B     		ldr	r3, .L166+20
 2685 0084 0022     		movs	r2, #0
 2686 0086 1A60     		str	r2, [r3]
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 88


2062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
2064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
2065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
2066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
2067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
2068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		FreeRTOSConfig.h file. */
2069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 2687              		.loc 1 2069 3
 2688 0088 FFF7FEFF 		bl	CONFIGURE_TIMER_FOR_RUN_TIME_STATS
2070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
2074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portable interface. */
2075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
 2689              		.loc 1 2075 7
 2690 008c FFF7FEFF 		bl	xPortStartScheduler
 2691              	.LBE168:
2076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
2078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function will not return. */
2079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
2083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		or the timer task. */
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) xIdleTaskHandle;
2096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2692              		.loc 1 2096 1
 2693 0090 0EE0     		b	.L165
 2694              	.L162:
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2695              		.loc 1 2090 3
 2696 0092 7B69     		ldr	r3, [r7, #20]
 2697 0094 B3F1FF3F 		cmp	r3, #-1
 2698 0098 0AD1     		bne	.L165
 2699              	.LBB171:
 2700              	.LBB172:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2701              		.loc 2 195 2
 2702              		.syntax unified
 2703              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2704 009a 4FF05003 			mov r3, #80												
 2705 009e 83F31188 		msr basepri, r3											
 2706 00a2 BFF36F8F 		isb														
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 89


 2707 00a6 BFF34F8F 		dsb														
 2708              	
 2709              	@ 0 "" 2
 2710              		.thumb
 2711              		.syntax unified
 2712 00aa FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2713              		.loc 2 203 1
 2714 00ac 00BF     		nop
 2715              	.L164:
 2716              	.LBE172:
 2717              	.LBE171:
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2718              		.loc 1 2090 3 discriminator 2
 2719 00ae FEE7     		b	.L164
 2720              	.L165:
 2721              		.loc 1 2096 1
 2722 00b0 00BF     		nop
 2723 00b2 1837     		adds	r7, r7, #24
 2724              	.LCFI79:
 2725              		.cfi_def_cfa_offset 8
 2726 00b4 BD46     		mov	sp, r7
 2727              	.LCFI80:
 2728              		.cfi_def_cfa_register 13
 2729              		@ sp needed
 2730 00b6 80BD     		pop	{r7, pc}
 2731              	.L167:
 2732              		.align	2
 2733              	.L166:
 2734 00b8 00000000 		.word	.LC0
 2735 00bc 00000000 		.word	prvIdleTask
 2736 00c0 00000000 		.word	xIdleTaskHandle
 2737 00c4 00000000 		.word	xNextTaskUnblockTime
 2738 00c8 00000000 		.word	xSchedulerRunning
 2739 00cc 00000000 		.word	xTickCount
 2740              		.cfi_endproc
 2741              	.LFE19:
 2743              		.section	.text.vTaskEndScheduler,"ax",%progbits
 2744              		.align	1
 2745              		.global	vTaskEndScheduler
 2746              		.syntax unified
 2747              		.thumb
 2748              		.thumb_func
 2749              		.fpu fpv4-sp-d16
 2751              	vTaskEndScheduler:
 2752              	.LFB20:
2097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2753              		.loc 1 2100 1
 2754              		.cfi_startproc
 2755              		@ args = 0, pretend = 0, frame = 8
 2756              		@ frame_needed = 1, uses_anonymous_args = 0
 2757 0000 80B5     		push	{r7, lr}
 2758              	.LCFI81:
 2759              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 90


 2760              		.cfi_offset 7, -8
 2761              		.cfi_offset 14, -4
 2762 0002 82B0     		sub	sp, sp, #8
 2763              	.LCFI82:
 2764              		.cfi_def_cfa_offset 16
 2765 0004 00AF     		add	r7, sp, #0
 2766              	.LCFI83:
 2767              		.cfi_def_cfa_register 7
 2768              	.LBB173:
 2769              	.LBB174:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2770              		.loc 2 195 2
 2771              		.syntax unified
 2772              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2773 0006 4FF05003 			mov r3, #80												
 2774 000a 83F31188 		msr basepri, r3											
 2775 000e BFF36F8F 		isb														
 2776 0012 BFF34F8F 		dsb														
 2777              	
 2778              	@ 0 "" 2
 2779              		.thumb
 2780              		.syntax unified
 2781 0016 7B60     		str	r3, [r7, #4]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2782              		.loc 2 203 1
 2783 0018 00BF     		nop
 2784              	.LBE174:
 2785              	.LBE173:
2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
2105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
 2786              		.loc 1 2105 20
 2787 001a 044B     		ldr	r3, .L169
 2788 001c 0022     		movs	r2, #0
 2789 001e 1A60     		str	r2, [r3]
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 2790              		.loc 1 2106 2
 2791 0020 FFF7FEFF 		bl	vPortEndScheduler
2107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2792              		.loc 1 2107 1
 2793 0024 00BF     		nop
 2794 0026 0837     		adds	r7, r7, #8
 2795              	.LCFI84:
 2796              		.cfi_def_cfa_offset 8
 2797 0028 BD46     		mov	sp, r7
 2798              	.LCFI85:
 2799              		.cfi_def_cfa_register 13
 2800              		@ sp needed
 2801 002a 80BD     		pop	{r7, pc}
 2802              	.L170:
 2803              		.align	2
 2804              	.L169:
 2805 002c 00000000 		.word	xSchedulerRunning
 2806              		.cfi_endproc
 2807              	.LFE20:
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 91


 2809              		.section	.text.vTaskSuspendAll,"ax",%progbits
 2810              		.align	1
 2811              		.global	vTaskSuspendAll
 2812              		.syntax unified
 2813              		.thumb
 2814              		.thumb_func
 2815              		.fpu fpv4-sp-d16
 2817              	vTaskSuspendAll:
 2818              	.LFB21:
2108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
2111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2819              		.loc 1 2111 1
 2820              		.cfi_startproc
 2821              		@ args = 0, pretend = 0, frame = 0
 2822              		@ frame_needed = 1, uses_anonymous_args = 0
 2823              		@ link register save eliminated.
 2824 0000 80B4     		push	{r7}
 2825              	.LCFI86:
 2826              		.cfi_def_cfa_offset 4
 2827              		.cfi_offset 7, -4
 2828 0002 00AF     		add	r7, sp, #0
 2829              	.LCFI87:
 2830              		.cfi_def_cfa_register 7
2112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
2113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	http://goo.gl/wu4acr */
2116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* portSOFRWARE_BARRIER() is only implemented for emulated/simulated ports that
2118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	do not otherwise exhibit real time behaviour. */
2119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSOFTWARE_BARRIER();
2120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
2122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is used to allow calls to vTaskSuspendAll() to nest. */
2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
 2831              		.loc 1 2123 2
 2832 0004 044B     		ldr	r3, .L172
 2833 0006 1B68     		ldr	r3, [r3]
 2834 0008 0133     		adds	r3, r3, #1
 2835 000a 034A     		ldr	r2, .L172
 2836 000c 1360     		str	r3, [r2]
2124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Enforces ordering for ports and optimised compilers that may otherwise place
2126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the above increment elsewhere. */
2127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portMEMORY_BARRIER();
 2837              		.loc 1 2127 2
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2838              		.loc 1 2128 1
 2839 000e 00BF     		nop
 2840 0010 BD46     		mov	sp, r7
 2841              	.LCFI88:
 2842              		.cfi_def_cfa_register 13
 2843              		@ sp needed
 2844 0012 5DF8047B 		ldr	r7, [sp], #4
 2845              	.LCFI89:
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 92


 2846              		.cfi_restore 7
 2847              		.cfi_def_cfa_offset 0
 2848 0016 7047     		bx	lr
 2849              	.L173:
 2850              		.align	2
 2851              	.L172:
 2852 0018 00000000 		.word	uxSchedulerSuspended
 2853              		.cfi_endproc
 2854              	.LFE21:
 2856              		.section	.text.prvGetExpectedIdleTime,"ax",%progbits
 2857              		.align	1
 2858              		.syntax unified
 2859              		.thumb
 2860              		.thumb_func
 2861              		.fpu fpv4-sp-d16
 2863              	prvGetExpectedIdleTime:
 2864              	.LFB22:
2129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2865              		.loc 1 2134 2
 2866              		.cfi_startproc
 2867              		@ args = 0, pretend = 0, frame = 8
 2868              		@ frame_needed = 1, uses_anonymous_args = 0
 2869              		@ link register save eliminated.
 2870 0000 80B4     		push	{r7}
 2871              	.LCFI90:
 2872              		.cfi_def_cfa_offset 4
 2873              		.cfi_offset 7, -4
 2874 0002 83B0     		sub	sp, sp, #12
 2875              	.LCFI91:
 2876              		.cfi_def_cfa_offset 16
 2877 0004 00AF     		add	r7, sp, #0
 2878              	.LCFI92:
 2879              		.cfi_def_cfa_register 7
2135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xReturn;
2136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 2880              		.loc 1 2136 14
 2881 0006 0023     		movs	r3, #0
 2882 0008 3B60     		str	r3, [r7]
2137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
2141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		running. */
2142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 2883              		.loc 1 2144 27
 2884 000a 144B     		ldr	r3, .L181
 2885 000c 1B68     		ldr	r3, [r3]
 2886              		.loc 1 2144 6
 2887 000e 002B     		cmp	r3, #0
 2888 0010 01D0     		beq	.L175
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 93


2145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
 2889              		.loc 1 2146 32
 2890 0012 0123     		movs	r3, #1
 2891 0014 3B60     		str	r3, [r7]
 2892              	.L175:
2147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
2150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
2155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
2156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
2159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 2893              		.loc 1 2165 19
 2894 0016 124B     		ldr	r3, .L181+4
 2895 0018 1B68     		ldr	r3, [r3]
 2896 001a DB6A     		ldr	r3, [r3, #44]
 2897              		.loc 1 2165 5
 2898 001c 002B     		cmp	r3, #0
 2899 001e 02D0     		beq	.L176
2166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
 2900              		.loc 1 2167 12
 2901 0020 0023     		movs	r3, #0
 2902 0022 7B60     		str	r3, [r7, #4]
 2903 0024 12E0     		b	.L177
 2904              	.L176:
2168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 2905              		.loc 1 2169 12
 2906 0026 0F4B     		ldr	r3, .L181+8
 2907 0028 1B68     		ldr	r3, [r3]
 2908              		.loc 1 2169 10
 2909 002a 012B     		cmp	r3, #1
 2910 002c 02D9     		bls	.L178
2170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			processed. */
2174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
 2911              		.loc 1 2174 12
 2912 002e 0023     		movs	r3, #0
 2913 0030 7B60     		str	r3, [r7, #4]
 2914 0032 0BE0     		b	.L177
 2915              	.L178:
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 94


2175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
 2916              		.loc 1 2176 10
 2917 0034 3B68     		ldr	r3, [r7]
 2918 0036 002B     		cmp	r3, #0
 2919 0038 02D0     		beq	.L179
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			idle priority.  This path can only be reached if
2180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
 2920              		.loc 1 2181 12
 2921 003a 0023     		movs	r3, #0
 2922 003c 7B60     		str	r3, [r7, #4]
 2923 003e 05E0     		b	.L177
 2924              	.L179:
2182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
 2925              		.loc 1 2185 35
 2926 0040 094B     		ldr	r3, .L181+12
 2927 0042 1A68     		ldr	r2, [r3]
 2928 0044 094B     		ldr	r3, .L181+16
 2929 0046 1B68     		ldr	r3, [r3]
 2930              		.loc 1 2185 12
 2931 0048 D31A     		subs	r3, r2, r3
 2932 004a 7B60     		str	r3, [r7, #4]
 2933              	.L177:
2186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 2934              		.loc 1 2188 10
 2935 004c 7B68     		ldr	r3, [r7, #4]
2189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2936              		.loc 1 2189 2
 2937 004e 1846     		mov	r0, r3
 2938 0050 0C37     		adds	r7, r7, #12
 2939              	.LCFI93:
 2940              		.cfi_def_cfa_offset 4
 2941 0052 BD46     		mov	sp, r7
 2942              	.LCFI94:
 2943              		.cfi_def_cfa_register 13
 2944              		@ sp needed
 2945 0054 5DF8047B 		ldr	r7, [sp], #4
 2946              	.LCFI95:
 2947              		.cfi_restore 7
 2948              		.cfi_def_cfa_offset 0
 2949 0058 7047     		bx	lr
 2950              	.L182:
 2951 005a 00BF     		.align	2
 2952              	.L181:
 2953 005c 00000000 		.word	uxTopReadyPriority
 2954 0060 00000000 		.word	pxCurrentTCB
 2955 0064 00000000 		.word	pxReadyTasksLists
 2956 0068 00000000 		.word	xNextTaskUnblockTime
 2957 006c 00000000 		.word	xTickCount
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 95


 2958              		.cfi_endproc
 2959              	.LFE22:
 2961              		.section	.text.xTaskResumeAll,"ax",%progbits
 2962              		.align	1
 2963              		.global	xTaskResumeAll
 2964              		.syntax unified
 2965              		.thumb
 2966              		.thumb_func
 2967              		.fpu fpv4-sp-d16
 2969              	xTaskResumeAll:
 2970              	.LFB23:
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2971              		.loc 1 2195 1
 2972              		.cfi_startproc
 2973              		@ args = 0, pretend = 0, frame = 16
 2974              		@ frame_needed = 1, uses_anonymous_args = 0
 2975 0000 80B5     		push	{r7, lr}
 2976              	.LCFI96:
 2977              		.cfi_def_cfa_offset 8
 2978              		.cfi_offset 7, -8
 2979              		.cfi_offset 14, -4
 2980 0002 84B0     		sub	sp, sp, #16
 2981              	.LCFI97:
 2982              		.cfi_def_cfa_offset 24
 2983 0004 00AF     		add	r7, sp, #0
 2984              	.LCFI98:
 2985              		.cfi_def_cfa_register 7
2196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
 2986              		.loc 1 2196 8
 2987 0006 0023     		movs	r3, #0
 2988 0008 FB60     		str	r3, [r7, #12]
2197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 2989              		.loc 1 2197 12
 2990 000a 0023     		movs	r3, #0
 2991 000c BB60     		str	r3, [r7, #8]
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
 2992              		.loc 1 2201 2
 2993 000e 424B     		ldr	r3, .L195
 2994 0010 1B68     		ldr	r3, [r3]
 2995 0012 002B     		cmp	r3, #0
 2996 0014 0AD1     		bne	.L184
 2997              	.LBB175:
 2998              	.LBB176:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2999              		.loc 2 195 2
 3000              		.syntax unified
 3001              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3002 0016 4FF05003 			mov r3, #80												
 3003 001a 83F31188 		msr basepri, r3											
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 96


 3004 001e BFF36F8F 		isb														
 3005 0022 BFF34F8F 		dsb														
 3006              	
 3007              	@ 0 "" 2
 3008              		.thumb
 3009              		.syntax unified
 3010 0026 3B60     		str	r3, [r7]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3011              		.loc 2 203 1
 3012 0028 00BF     		nop
 3013              	.L185:
 3014              	.LBE176:
 3015              	.LBE175:
 3016              		.loc 1 2201 2 discriminator 1
 3017 002a FEE7     		b	.L185
 3018              	.L184:
2202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 3019              		.loc 1 2208 2
 3020 002c FFF7FEFF 		bl	vPortEnterCritical
2209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
 3021              		.loc 1 2210 3
 3022 0030 394B     		ldr	r3, .L195
 3023 0032 1B68     		ldr	r3, [r3]
 3024 0034 013B     		subs	r3, r3, #1
 3025 0036 384A     		ldr	r2, .L195
 3026 0038 1360     		str	r3, [r2]
2211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 3027              		.loc 1 2212 28
 3028 003a 374B     		ldr	r3, .L195
 3029 003c 1B68     		ldr	r3, [r3]
 3030              		.loc 1 2212 5
 3031 003e 002B     		cmp	r3, #0
 3032 0040 62D1     		bne	.L186
2213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 3033              		.loc 1 2214 31
 3034 0042 364B     		ldr	r3, .L195+4
 3035 0044 1B68     		ldr	r3, [r3]
 3036              		.loc 1 2214 6
 3037 0046 002B     		cmp	r3, #0
 3038 0048 5ED0     		beq	.L186
2215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 3039              		.loc 1 2218 10
 3040 004a 2FE0     		b	.L187
 3041              	.L189:
2219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 97


2220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as
 3042              		.loc 1 2220 14
 3043 004c 344B     		ldr	r3, .L195+8
 3044 004e DB68     		ldr	r3, [r3, #12]
 3045              		.loc 1 2220 12
 3046 0050 DB68     		ldr	r3, [r3, #12]
 3047 0052 FB60     		str	r3, [r7, #12]
2221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 3048              		.loc 1 2221 15
 3049 0054 FB68     		ldr	r3, [r7, #12]
 3050 0056 1833     		adds	r3, r3, #24
 3051 0058 1846     		mov	r0, r3
 3052 005a FFF7FEFF 		bl	uxListRemove
2222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 3053              		.loc 1 2222 15
 3054 005e FB68     		ldr	r3, [r7, #12]
 3055 0060 0433     		adds	r3, r3, #4
 3056 0062 1846     		mov	r0, r3
 3057 0064 FFF7FEFF 		bl	uxListRemove
2223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3058              		.loc 1 2223 6
 3059 0068 FB68     		ldr	r3, [r7, #12]
 3060 006a DA6A     		ldr	r2, [r3, #44]
 3061 006c 2D4B     		ldr	r3, .L195+12
 3062 006e 1B68     		ldr	r3, [r3]
 3063 0070 9A42     		cmp	r2, r3
 3064 0072 03D9     		bls	.L188
 3065              		.loc 1 2223 6 is_stmt 0 discriminator 1
 3066 0074 FB68     		ldr	r3, [r7, #12]
 3067 0076 DB6A     		ldr	r3, [r3, #44]
 3068 0078 2A4A     		ldr	r2, .L195+12
 3069 007a 1360     		str	r3, [r2]
 3070              	.L188:
 3071              		.loc 1 2223 6 discriminator 3
 3072 007c FB68     		ldr	r3, [r7, #12]
 3073 007e DA6A     		ldr	r2, [r3, #44]
 3074 0080 1346     		mov	r3, r2
 3075 0082 9B00     		lsls	r3, r3, #2
 3076 0084 1344     		add	r3, r3, r2
 3077 0086 9B00     		lsls	r3, r3, #2
 3078 0088 274A     		ldr	r2, .L195+16
 3079 008a 1A44     		add	r2, r2, r3
 3080 008c FB68     		ldr	r3, [r7, #12]
 3081 008e 0433     		adds	r3, r3, #4
 3082 0090 1946     		mov	r1, r3
 3083 0092 1046     		mov	r0, r2
 3084 0094 FFF7FEFF 		bl	vListInsertEnd
2224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					task then a yield must be performed. */
2227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 3085              		.loc 1 2227 15 is_stmt 1 discriminator 3
 3086 0098 FB68     		ldr	r3, [r7, #12]
 3087 009a DA6A     		ldr	r2, [r3, #44]
 3088              		.loc 1 2227 43 discriminator 3
 3089 009c 234B     		ldr	r3, .L195+20
 3090 009e 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 98


 3091 00a0 DB6A     		ldr	r3, [r3, #44]
 3092              		.loc 1 2227 8 discriminator 3
 3093 00a2 9A42     		cmp	r2, r3
 3094 00a4 02D3     		bcc	.L187
2228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
 3095              		.loc 1 2229 21
 3096 00a6 224B     		ldr	r3, .L195+24
 3097 00a8 0122     		movs	r2, #1
 3098 00aa 1A60     		str	r2, [r3]
 3099              	.L187:
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3100              		.loc 1 2218 12
 3101 00ac 1C4B     		ldr	r3, .L195+8
 3102 00ae 1B68     		ldr	r3, [r3]
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3103              		.loc 1 2218 10
 3104 00b0 002B     		cmp	r3, #0
 3105 00b2 CBD1     		bne	.L189
2230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
 3106              		.loc 1 2237 7
 3107 00b4 FB68     		ldr	r3, [r7, #12]
 3108 00b6 002B     		cmp	r3, #0
 3109 00b8 01D0     		beq	.L190
2238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					which may have prevented the next unblock time from being
2241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					important for low power tickless implementations, where
2243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
2245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
 3110              		.loc 1 2245 6
 3111 00ba FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3112              	.L190:
 3113              	.LBB177:
2246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				time. */
2252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 3114              		.loc 1 2253 17
 3115 00be 1D4B     		ldr	r3, .L195+28
 3116 00c0 1B68     		ldr	r3, [r3]
 3117 00c2 7B60     		str	r3, [r7, #4]
2254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xPendedCounts > ( TickType_t ) 0U )
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 99


 3118              		.loc 1 2255 8
 3119 00c4 7B68     		ldr	r3, [r7, #4]
 3120 00c6 002B     		cmp	r3, #0
 3121 00c8 10D0     		beq	.L191
 3122              	.L193:
2256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						do
2258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
 3123              		.loc 1 2259 12
 3124 00ca FFF7FEFF 		bl	xTaskIncrementTick
 3125 00ce 0346     		mov	r3, r0
 3126              		.loc 1 2259 10
 3127 00d0 002B     		cmp	r3, #0
 3128 00d2 02D0     		beq	.L192
2260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								xYieldPending = pdTRUE;
 3129              		.loc 1 2261 23
 3130 00d4 164B     		ldr	r3, .L195+24
 3131 00d6 0122     		movs	r2, #1
 3132 00d8 1A60     		str	r2, [r3]
 3133              	.L192:
2262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
2264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							--xPendedCounts;
 3134              		.loc 1 2267 8
 3135 00da 7B68     		ldr	r3, [r7, #4]
 3136 00dc 013B     		subs	r3, r3, #1
 3137 00de 7B60     		str	r3, [r7, #4]
2268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						} while( xPendedCounts > ( TickType_t ) 0U );
 3138              		.loc 1 2268 7
 3139 00e0 7B68     		ldr	r3, [r7, #4]
 3140 00e2 002B     		cmp	r3, #0
 3141 00e4 F1D1     		bne	.L193
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xPendedTicks = 0;
 3142              		.loc 1 2270 20
 3143 00e6 134B     		ldr	r3, .L195+28
 3144 00e8 0022     		movs	r2, #0
 3145 00ea 1A60     		str	r2, [r3]
 3146              	.L191:
 3147              	.LBE177:
2271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldPending != pdFALSE )
 3148              		.loc 1 2278 23
 3149 00ec 104B     		ldr	r3, .L195+24
 3150 00ee 1B68     		ldr	r3, [r3]
 3151              		.loc 1 2278 7
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 100


 3152 00f0 002B     		cmp	r3, #0
 3153 00f2 09D0     		beq	.L186
2279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
 3154              		.loc 1 2282 23
 3155 00f4 0123     		movs	r3, #1
 3156 00f6 BB60     		str	r3, [r7, #8]
2283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif
2285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 3157              		.loc 1 2285 6
 3158 00f8 0F4B     		ldr	r3, .L195+32
 3159 00fa 4FF08052 		mov	r2, #268435456
 3160 00fe 1A60     		str	r2, [r3]
 3161              		.syntax unified
 3162              	@ 2285 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3163 0100 BFF34F8F 		dsb
 3164              	@ 0 "" 2
 3165              	@ 2285 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3166 0104 BFF36F8F 		isb
 3167              	@ 0 "" 2
 3168              		.thumb
 3169              		.syntax unified
 3170              	.L186:
2286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 3171              		.loc 1 2298 2
 3172 0108 FFF7FEFF 		bl	vPortExitCritical
2299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
 3173              		.loc 1 2300 9
 3174 010c BB68     		ldr	r3, [r7, #8]
2301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3175              		.loc 1 2301 1
 3176 010e 1846     		mov	r0, r3
 3177 0110 1037     		adds	r7, r7, #16
 3178              	.LCFI99:
 3179              		.cfi_def_cfa_offset 8
 3180 0112 BD46     		mov	sp, r7
 3181              	.LCFI100:
 3182              		.cfi_def_cfa_register 13
 3183              		@ sp needed
 3184 0114 80BD     		pop	{r7, pc}
 3185              	.L196:
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 101


 3186 0116 00BF     		.align	2
 3187              	.L195:
 3188 0118 00000000 		.word	uxSchedulerSuspended
 3189 011c 00000000 		.word	uxCurrentNumberOfTasks
 3190 0120 00000000 		.word	xPendingReadyList
 3191 0124 00000000 		.word	uxTopReadyPriority
 3192 0128 00000000 		.word	pxReadyTasksLists
 3193 012c 00000000 		.word	pxCurrentTCB
 3194 0130 00000000 		.word	xYieldPending
 3195 0134 00000000 		.word	xPendedTicks
 3196 0138 04ED00E0 		.word	-536810236
 3197              		.cfi_endproc
 3198              	.LFE23:
 3200              		.section	.text.xTaskGetTickCount,"ax",%progbits
 3201              		.align	1
 3202              		.global	xTaskGetTickCount
 3203              		.syntax unified
 3204              		.thumb
 3205              		.thumb_func
 3206              		.fpu fpv4-sp-d16
 3208              	xTaskGetTickCount:
 3209              	.LFB24:
2302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3210              		.loc 1 2305 1
 3211              		.cfi_startproc
 3212              		@ args = 0, pretend = 0, frame = 8
 3213              		@ frame_needed = 1, uses_anonymous_args = 0
 3214              		@ link register save eliminated.
 3215 0000 80B4     		push	{r7}
 3216              	.LCFI101:
 3217              		.cfi_def_cfa_offset 4
 3218              		.cfi_offset 7, -4
 3219 0002 83B0     		sub	sp, sp, #12
 3220              	.LCFI102:
 3221              		.cfi_def_cfa_offset 16
 3222 0004 00AF     		add	r7, sp, #0
 3223              	.LCFI103:
 3224              		.cfi_def_cfa_register 7
2306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
2307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
 3225              		.loc 1 2311 10
 3226 0006 054B     		ldr	r3, .L199
 3227 0008 1B68     		ldr	r3, [r3]
 3228 000a 7B60     		str	r3, [r7, #4]
2312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xTicks;
 3229              		.loc 1 2315 9
 3230 000c 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 102


2316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3231              		.loc 1 2316 1
 3232 000e 1846     		mov	r0, r3
 3233 0010 0C37     		adds	r7, r7, #12
 3234              	.LCFI104:
 3235              		.cfi_def_cfa_offset 4
 3236 0012 BD46     		mov	sp, r7
 3237              	.LCFI105:
 3238              		.cfi_def_cfa_register 13
 3239              		@ sp needed
 3240 0014 5DF8047B 		ldr	r7, [sp], #4
 3241              	.LCFI106:
 3242              		.cfi_restore 7
 3243              		.cfi_def_cfa_offset 0
 3244 0018 7047     		bx	lr
 3245              	.L200:
 3246 001a 00BF     		.align	2
 3247              	.L199:
 3248 001c 00000000 		.word	xTickCount
 3249              		.cfi_endproc
 3250              	.LFE24:
 3252              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 3253              		.align	1
 3254              		.global	xTaskGetTickCountFromISR
 3255              		.syntax unified
 3256              		.thumb
 3257              		.thumb_func
 3258              		.fpu fpv4-sp-d16
 3260              	xTaskGetTickCountFromISR:
 3261              	.LFB25:
2317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3262              		.loc 1 2320 1
 3263              		.cfi_startproc
 3264              		@ args = 0, pretend = 0, frame = 8
 3265              		@ frame_needed = 1, uses_anonymous_args = 0
 3266 0000 80B5     		push	{r7, lr}
 3267              	.LCFI107:
 3268              		.cfi_def_cfa_offset 8
 3269              		.cfi_offset 7, -8
 3270              		.cfi_offset 14, -4
 3271 0002 82B0     		sub	sp, sp, #8
 3272              	.LCFI108:
 3273              		.cfi_def_cfa_offset 16
 3274 0004 00AF     		add	r7, sp, #0
 3275              	.LCFI109:
 3276              		.cfi_def_cfa_register 7
2321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
2322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 103


2329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
2338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 3277              		.loc 1 2338 2
 3278 0006 FFF7FEFF 		bl	vPortValidateInterruptPriority
2339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 3279              		.loc 1 2340 25
 3280 000a 0023     		movs	r3, #0
 3281 000c 7B60     		str	r3, [r7, #4]
2341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTickCount;
 3282              		.loc 1 2342 11
 3283 000e 044B     		ldr	r3, .L203
 3284 0010 1B68     		ldr	r3, [r3]
 3285 0012 3B60     		str	r3, [r7]
2343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 3286              		.loc 1 2346 9
 3287 0014 3B68     		ldr	r3, [r7]
2347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3288              		.loc 1 2347 1
 3289 0016 1846     		mov	r0, r3
 3290 0018 0837     		adds	r7, r7, #8
 3291              	.LCFI110:
 3292              		.cfi_def_cfa_offset 8
 3293 001a BD46     		mov	sp, r7
 3294              	.LCFI111:
 3295              		.cfi_def_cfa_register 13
 3296              		@ sp needed
 3297 001c 80BD     		pop	{r7, pc}
 3298              	.L204:
 3299 001e 00BF     		.align	2
 3300              	.L203:
 3301 0020 00000000 		.word	xTickCount
 3302              		.cfi_endproc
 3303              	.LFE25:
 3305              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 3306              		.align	1
 3307              		.global	uxTaskGetNumberOfTasks
 3308              		.syntax unified
 3309              		.thumb
 3310              		.thumb_func
 3311              		.fpu fpv4-sp-d16
 3313              	uxTaskGetNumberOfTasks:
 3314              	.LFB26:
2348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 104


2350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3315              		.loc 1 2351 1
 3316              		.cfi_startproc
 3317              		@ args = 0, pretend = 0, frame = 0
 3318              		@ frame_needed = 1, uses_anonymous_args = 0
 3319              		@ link register save eliminated.
 3320 0000 80B4     		push	{r7}
 3321              	.LCFI112:
 3322              		.cfi_def_cfa_offset 4
 3323              		.cfi_offset 7, -4
 3324 0002 00AF     		add	r7, sp, #0
 3325              	.LCFI113:
 3326              		.cfi_def_cfa_register 7
2352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t. */
2354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
 3327              		.loc 1 2354 9
 3328 0004 034B     		ldr	r3, .L207
 3329 0006 1B68     		ldr	r3, [r3]
2355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3330              		.loc 1 2355 1
 3331 0008 1846     		mov	r0, r3
 3332 000a BD46     		mov	sp, r7
 3333              	.LCFI114:
 3334              		.cfi_def_cfa_register 13
 3335              		@ sp needed
 3336 000c 5DF8047B 		ldr	r7, [sp], #4
 3337              	.LCFI115:
 3338              		.cfi_restore 7
 3339              		.cfi_def_cfa_offset 0
 3340 0010 7047     		bx	lr
 3341              	.L208:
 3342 0012 00BF     		.align	2
 3343              	.L207:
 3344 0014 00000000 		.word	uxCurrentNumberOfTasks
 3345              		.cfi_endproc
 3346              	.LFE26:
 3348              		.section	.text.pcTaskGetName,"ax",%progbits
 3349              		.align	1
 3350              		.global	pcTaskGetName
 3351              		.syntax unified
 3352              		.thumb
 3353              		.thumb_func
 3354              		.fpu fpv4-sp-d16
 3356              	pcTaskGetName:
 3357              	.LFB27:
2356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3358              		.loc 1 2359 1
 3359              		.cfi_startproc
 3360              		@ args = 0, pretend = 0, frame = 16
 3361              		@ frame_needed = 1, uses_anonymous_args = 0
 3362              		@ link register save eliminated.
 3363 0000 80B4     		push	{r7}
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 105


 3364              	.LCFI116:
 3365              		.cfi_def_cfa_offset 4
 3366              		.cfi_offset 7, -4
 3367 0002 85B0     		sub	sp, sp, #20
 3368              	.LCFI117:
 3369              		.cfi_def_cfa_offset 24
 3370 0004 00AF     		add	r7, sp, #0
 3371              	.LCFI118:
 3372              		.cfi_def_cfa_register 7
 3373 0006 7860     		str	r0, [r7, #4]
2360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
2361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queried. */
2364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 3374              		.loc 1 2364 10
 3375 0008 7B68     		ldr	r3, [r7, #4]
 3376 000a 002B     		cmp	r3, #0
 3377 000c 02D1     		bne	.L210
 3378              		.loc 1 2364 10 is_stmt 0 discriminator 1
 3379 000e 0D4B     		ldr	r3, .L215
 3380 0010 1B68     		ldr	r3, [r3]
 3381 0012 00E0     		b	.L211
 3382              	.L210:
 3383              		.loc 1 2364 10 discriminator 2
 3384 0014 7B68     		ldr	r3, [r7, #4]
 3385              	.L211:
 3386              		.loc 1 2364 8 is_stmt 1 discriminator 4
 3387 0016 FB60     		str	r3, [r7, #12]
2365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 3388              		.loc 1 2365 2 discriminator 4
 3389 0018 FB68     		ldr	r3, [r7, #12]
 3390 001a 002B     		cmp	r3, #0
 3391 001c 0AD1     		bne	.L212
 3392              	.LBB178:
 3393              	.LBB179:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3394              		.loc 2 195 2
 3395              		.syntax unified
 3396              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3397 001e 4FF05003 			mov r3, #80												
 3398 0022 83F31188 		msr basepri, r3											
 3399 0026 BFF36F8F 		isb														
 3400 002a BFF34F8F 		dsb														
 3401              	
 3402              	@ 0 "" 2
 3403              		.thumb
 3404              		.syntax unified
 3405 002e BB60     		str	r3, [r7, #8]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3406              		.loc 2 203 1
 3407 0030 00BF     		nop
 3408              	.L213:
 3409              	.LBE179:
 3410              	.LBE178:
 3411              		.loc 1 2365 2 discriminator 1
 3412 0032 FEE7     		b	.L213
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 106


 3413              	.L212:
2366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 3414              		.loc 1 2366 9
 3415 0034 FB68     		ldr	r3, [r7, #12]
 3416 0036 3433     		adds	r3, r3, #52
2367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3417              		.loc 1 2367 1
 3418 0038 1846     		mov	r0, r3
 3419 003a 1437     		adds	r7, r7, #20
 3420              	.LCFI119:
 3421              		.cfi_def_cfa_offset 4
 3422 003c BD46     		mov	sp, r7
 3423              	.LCFI120:
 3424              		.cfi_def_cfa_register 13
 3425              		@ sp needed
 3426 003e 5DF8047B 		ldr	r7, [sp], #4
 3427              	.LCFI121:
 3428              		.cfi_restore 7
 3429              		.cfi_def_cfa_offset 0
 3430 0042 7047     		bx	lr
 3431              	.L216:
 3432              		.align	2
 3433              	.L215:
 3434 0044 00000000 		.word	pxCurrentTCB
 3435              		.cfi_endproc
 3436              	.LFE27:
 3438              		.section	.text.uxTaskGetSystemState,"ax",%progbits
 3439              		.align	1
 3440              		.global	uxTaskGetSystemState
 3441              		.syntax unified
 3442              		.thumb
 3443              		.thumb_func
 3444              		.fpu fpv4-sp-d16
 3446              	uxTaskGetSystemState:
 3447              	.LFB28:
2368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t x;
2376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cNextChar;
2377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xBreakLoop;
2378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro i
2384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
2388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check each character in the name looking for a match or
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 107


2390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mismatch. */
2391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xBreakLoop = pdFALSE;
2392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Characters didn't match. */
2399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xBreakLoop = pdTRUE;
2400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else if( cNextChar == ( char ) 0x00 )
2402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Both strings terminated, a match must have been
2404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						found. */
2405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxReturn = pxNextTCB;
2406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xBreakLoop = pdTRUE;
2407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xBreakLoop != pdFALSE )
2414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxReturn != NULL )
2420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The handle has been found. */
2422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxReturn;
2433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t* pxTCB;
2444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 108


2447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the ready lists. */
2451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxQueue--;
2454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Found the handle. */
2459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the delayed lists. */
2465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the suspended list. */
2480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the deleted list. */
2490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxTCB;
2498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 109


2504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3448              		.loc 1 2506 2
 3449              		.cfi_startproc
 3450              		@ args = 0, pretend = 0, frame = 24
 3451              		@ frame_needed = 1, uses_anonymous_args = 0
 3452 0000 80B5     		push	{r7, lr}
 3453              	.LCFI122:
 3454              		.cfi_def_cfa_offset 8
 3455              		.cfi_offset 7, -8
 3456              		.cfi_offset 14, -4
 3457 0002 86B0     		sub	sp, sp, #24
 3458              	.LCFI123:
 3459              		.cfi_def_cfa_offset 32
 3460 0004 00AF     		add	r7, sp, #0
 3461              	.LCFI124:
 3462              		.cfi_def_cfa_register 7
 3463 0006 F860     		str	r0, [r7, #12]
 3464 0008 B960     		str	r1, [r7, #8]
 3465 000a 7A60     		str	r2, [r7, #4]
2507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 3466              		.loc 1 2507 14
 3467 000c 0023     		movs	r3, #0
 3468 000e 7B61     		str	r3, [r7, #20]
 3469              		.loc 1 2507 26
 3470 0010 3823     		movs	r3, #56
 3471 0012 3B61     		str	r3, [r7, #16]
2508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
 3472              		.loc 1 2509 3
 3473 0014 FFF7FEFF 		bl	vTaskSuspendAll
2510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
 3474              		.loc 1 2512 20
 3475 0018 3B4B     		ldr	r3, .L221
 3476 001a 1B68     		ldr	r3, [r3]
 3477              		.loc 1 2512 6
 3478 001c BA68     		ldr	r2, [r7, #8]
 3479 001e 9A42     		cmp	r2, r3
 3480 0020 6BD3     		bcc	.L218
 3481              	.L219:
2513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Ready state. */
2516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				do
2517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxQueue--;
 3482              		.loc 1 2518 13 discriminator 1
 3483 0022 3B69     		ldr	r3, [r7, #16]
 3484 0024 013B     		subs	r3, r3, #1
 3485 0026 3B61     		str	r3, [r7, #16]
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
 3486              		.loc 1 2519 66 discriminator 1
 3487 0028 7A69     		ldr	r2, [r7, #20]
 3488 002a 1346     		mov	r3, r2
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 110


 3489 002c DB00     		lsls	r3, r3, #3
 3490 002e 1344     		add	r3, r3, r2
 3491 0030 9B00     		lsls	r3, r3, #2
 3492 0032 1A46     		mov	r2, r3
 3493              		.loc 1 2519 16 discriminator 1
 3494 0034 FB68     		ldr	r3, [r7, #12]
 3495 0036 9818     		adds	r0, r3, r2
 3496 0038 3A69     		ldr	r2, [r7, #16]
 3497 003a 1346     		mov	r3, r2
 3498 003c 9B00     		lsls	r3, r3, #2
 3499 003e 1344     		add	r3, r3, r2
 3500 0040 9B00     		lsls	r3, r3, #2
 3501 0042 324A     		ldr	r2, .L221+4
 3502 0044 1344     		add	r3, r3, r2
 3503 0046 0122     		movs	r2, #1
 3504 0048 1946     		mov	r1, r3
 3505 004a FFF7FEFF 		bl	prvListTasksWithinSingleList
 3506 004e 0246     		mov	r2, r0
 3507              		.loc 1 2519 13 discriminator 1
 3508 0050 7B69     		ldr	r3, [r7, #20]
 3509 0052 1344     		add	r3, r3, r2
 3510 0054 7B61     		str	r3, [r7, #20]
2520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
 3511              		.loc 1 2521 5 discriminator 1
 3512 0056 3B69     		ldr	r3, [r7, #16]
 3513 0058 002B     		cmp	r3, #0
 3514 005a E2D1     		bne	.L219
2522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Blocked state. */
2525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
 3515              		.loc 1 2525 65
 3516 005c 7A69     		ldr	r2, [r7, #20]
 3517 005e 1346     		mov	r3, r2
 3518 0060 DB00     		lsls	r3, r3, #3
 3519 0062 1344     		add	r3, r3, r2
 3520 0064 9B00     		lsls	r3, r3, #2
 3521 0066 1A46     		mov	r2, r3
 3522              		.loc 1 2525 15
 3523 0068 FB68     		ldr	r3, [r7, #12]
 3524 006a 1344     		add	r3, r3, r2
 3525 006c 284A     		ldr	r2, .L221+8
 3526 006e 1168     		ldr	r1, [r2]
 3527 0070 0222     		movs	r2, #2
 3528 0072 1846     		mov	r0, r3
 3529 0074 FFF7FEFF 		bl	prvListTasksWithinSingleList
 3530 0078 0246     		mov	r2, r0
 3531              		.loc 1 2525 12
 3532 007a 7B69     		ldr	r3, [r7, #20]
 3533 007c 1344     		add	r3, r3, r2
 3534 007e 7B61     		str	r3, [r7, #20]
2526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
 3535              		.loc 1 2526 65
 3536 0080 7A69     		ldr	r2, [r7, #20]
 3537 0082 1346     		mov	r3, r2
 3538 0084 DB00     		lsls	r3, r3, #3
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 111


 3539 0086 1344     		add	r3, r3, r2
 3540 0088 9B00     		lsls	r3, r3, #2
 3541 008a 1A46     		mov	r2, r3
 3542              		.loc 1 2526 15
 3543 008c FB68     		ldr	r3, [r7, #12]
 3544 008e 1344     		add	r3, r3, r2
 3545 0090 204A     		ldr	r2, .L221+12
 3546 0092 1168     		ldr	r1, [r2]
 3547 0094 0222     		movs	r2, #2
 3548 0096 1846     		mov	r0, r3
 3549 0098 FFF7FEFF 		bl	prvListTasksWithinSingleList
 3550 009c 0246     		mov	r2, r0
 3551              		.loc 1 2526 12
 3552 009e 7B69     		ldr	r3, [r7, #20]
 3553 00a0 1344     		add	r3, r3, r2
 3554 00a2 7B61     		str	r3, [r7, #20]
2527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
 3555              		.loc 1 2532 66
 3556 00a4 7A69     		ldr	r2, [r7, #20]
 3557 00a6 1346     		mov	r3, r2
 3558 00a8 DB00     		lsls	r3, r3, #3
 3559 00aa 1344     		add	r3, r3, r2
 3560 00ac 9B00     		lsls	r3, r3, #2
 3561 00ae 1A46     		mov	r2, r3
 3562              		.loc 1 2532 16
 3563 00b0 FB68     		ldr	r3, [r7, #12]
 3564 00b2 1344     		add	r3, r3, r2
 3565 00b4 0422     		movs	r2, #4
 3566 00b6 1849     		ldr	r1, .L221+16
 3567 00b8 1846     		mov	r0, r3
 3568 00ba FFF7FEFF 		bl	prvListTasksWithinSingleList
 3569 00be 0246     		mov	r2, r0
 3570              		.loc 1 2532 13
 3571 00c0 7B69     		ldr	r3, [r7, #20]
 3572 00c2 1344     		add	r3, r3, r2
 3573 00c4 7B61     		str	r3, [r7, #20]
2533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task in the Suspended state. */
2540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
 3574              		.loc 1 2540 66
 3575 00c6 7A69     		ldr	r2, [r7, #20]
 3576 00c8 1346     		mov	r3, r2
 3577 00ca DB00     		lsls	r3, r3, #3
 3578 00cc 1344     		add	r3, r3, r2
 3579 00ce 9B00     		lsls	r3, r3, #2
 3580 00d0 1A46     		mov	r2, r3
 3581              		.loc 1 2540 16
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 112


 3582 00d2 FB68     		ldr	r3, [r7, #12]
 3583 00d4 1344     		add	r3, r3, r2
 3584 00d6 0322     		movs	r2, #3
 3585 00d8 1049     		ldr	r1, .L221+20
 3586 00da 1846     		mov	r0, r3
 3587 00dc FFF7FEFF 		bl	prvListTasksWithinSingleList
 3588 00e0 0246     		mov	r2, r0
 3589              		.loc 1 2540 13
 3590 00e2 7B69     		ldr	r3, [r7, #20]
 3591 00e4 1344     		add	r3, r3, r2
 3592 00e6 7B61     		str	r3, [r7, #20]
2541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
 3593              		.loc 1 2546 8
 3594 00e8 7B68     		ldr	r3, [r7, #4]
 3595 00ea 002B     		cmp	r3, #0
 3596 00ec 05D0     		beq	.L218
 3597              	.LBB180:
2547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
2551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 3598              		.loc 1 2551 27
 3599 00ee FFF7FEFF 		bl	GET_RUN_TIME_COUNTER_VALUE
 3600 00f2 0346     		mov	r3, r0
 3601 00f4 1A46     		mov	r2, r3
 3602              		.loc 1 2551 25
 3603 00f6 7B68     		ldr	r3, [r7, #4]
 3604 00f8 1A60     		str	r2, [r3]
 3605              	.L218:
 3606              	.LBE180:
2552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
2553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pulTotalRunTime = 0;
2560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
 3607              		.loc 1 2569 12
 3608 00fa FFF7FEFF 		bl	xTaskResumeAll
2570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 113


2571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
 3609              		.loc 1 2571 10
 3610 00fe 7B69     		ldr	r3, [r7, #20]
2572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3611              		.loc 1 2572 2
 3612 0100 1846     		mov	r0, r3
 3613 0102 1837     		adds	r7, r7, #24
 3614              	.LCFI125:
 3615              		.cfi_def_cfa_offset 8
 3616 0104 BD46     		mov	sp, r7
 3617              	.LCFI126:
 3618              		.cfi_def_cfa_register 13
 3619              		@ sp needed
 3620 0106 80BD     		pop	{r7, pc}
 3621              	.L222:
 3622              		.align	2
 3623              	.L221:
 3624 0108 00000000 		.word	uxCurrentNumberOfTasks
 3625 010c 00000000 		.word	pxReadyTasksLists
 3626 0110 00000000 		.word	pxDelayedTaskList
 3627 0114 00000000 		.word	pxOverflowDelayedTaskList
 3628 0118 00000000 		.word	xTasksWaitingTermination
 3629 011c 00000000 		.word	xSuspendedTaskList
 3630              		.cfi_endproc
 3631              	.LFE28:
 3633              		.section	.text.vTaskStepTick,"ax",%progbits
 3634              		.align	1
 3635              		.global	vTaskStepTick
 3636              		.syntax unified
 3637              		.thumb
 3638              		.thumb_func
 3639              		.fpu fpv4-sp-d16
 3641              	vTaskStepTick:
 3642              	.LFB29:
2573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
2585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 1. */
2594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 114


2596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3643              		.loc 1 2597 2
 3644              		.cfi_startproc
 3645              		@ args = 0, pretend = 0, frame = 16
 3646              		@ frame_needed = 1, uses_anonymous_args = 0
 3647              		@ link register save eliminated.
 3648 0000 80B4     		push	{r7}
 3649              	.LCFI127:
 3650              		.cfi_def_cfa_offset 4
 3651              		.cfi_offset 7, -4
 3652 0002 85B0     		sub	sp, sp, #20
 3653              	.LCFI128:
 3654              		.cfi_def_cfa_offset 24
 3655 0004 00AF     		add	r7, sp, #0
 3656              	.LCFI129:
 3657              		.cfi_def_cfa_register 7
 3658 0006 7860     		str	r0, [r7, #4]
2598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		each stepped tick. */
2601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 3659              		.loc 1 2601 3
 3660 0008 0F4B     		ldr	r3, .L226
 3661 000a 1A68     		ldr	r2, [r3]
 3662 000c 7B68     		ldr	r3, [r7, #4]
 3663 000e 1A44     		add	r2, r2, r3
 3664 0010 0E4B     		ldr	r3, .L226+4
 3665 0012 1B68     		ldr	r3, [r3]
 3666 0014 9A42     		cmp	r2, r3
 3667 0016 0AD9     		bls	.L224
 3668              	.LBB181:
 3669              	.LBB182:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3670              		.loc 2 195 2
 3671              		.syntax unified
 3672              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3673 0018 4FF05003 			mov r3, #80												
 3674 001c 83F31188 		msr basepri, r3											
 3675 0020 BFF36F8F 		isb														
 3676 0024 BFF34F8F 		dsb														
 3677              	
 3678              	@ 0 "" 2
 3679              		.thumb
 3680              		.syntax unified
 3681 0028 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3682              		.loc 2 203 1
 3683 002a 00BF     		nop
 3684              	.L225:
 3685              	.LBE182:
 3686              	.LBE181:
 3687              		.loc 1 2601 3 discriminator 1
 3688 002c FEE7     		b	.L225
 3689              	.L224:
2602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount += xTicksToJump;
 3690              		.loc 1 2602 14
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 115


 3691 002e 064B     		ldr	r3, .L226
 3692 0030 1A68     		ldr	r2, [r3]
 3693 0032 7B68     		ldr	r3, [r7, #4]
 3694 0034 1344     		add	r3, r3, r2
 3695 0036 044A     		ldr	r2, .L226
 3696 0038 1360     		str	r3, [r2]
2603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3697              		.loc 1 2604 2
 3698 003a 00BF     		nop
 3699 003c 1437     		adds	r7, r7, #20
 3700              	.LCFI130:
 3701              		.cfi_def_cfa_offset 4
 3702 003e BD46     		mov	sp, r7
 3703              	.LCFI131:
 3704              		.cfi_def_cfa_register 13
 3705              		@ sp needed
 3706 0040 5DF8047B 		ldr	r7, [sp], #4
 3707              	.LCFI132:
 3708              		.cfi_restore 7
 3709              		.cfi_def_cfa_offset 0
 3710 0044 7047     		bx	lr
 3711              	.L227:
 3712 0046 00BF     		.align	2
 3713              	.L226:
 3714 0048 00000000 		.word	xTickCount
 3715 004c 00000000 		.word	xNextTaskUnblockTime
 3716              		.cfi_endproc
 3717              	.LFE29:
 3719              		.section	.text.xTaskCatchUpTicks,"ax",%progbits
 3720              		.align	1
 3721              		.global	xTaskCatchUpTicks
 3722              		.syntax unified
 3723              		.thumb
 3724              		.thumb_func
 3725              		.fpu fpv4-sp-d16
 3727              	xTaskCatchUpTicks:
 3728              	.LFB30:
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp )
2610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3729              		.loc 1 2610 1
 3730              		.cfi_startproc
 3731              		@ args = 0, pretend = 0, frame = 16
 3732              		@ frame_needed = 1, uses_anonymous_args = 0
 3733 0000 80B5     		push	{r7, lr}
 3734              	.LCFI133:
 3735              		.cfi_def_cfa_offset 8
 3736              		.cfi_offset 7, -8
 3737              		.cfi_offset 14, -4
 3738 0002 84B0     		sub	sp, sp, #16
 3739              	.LCFI134:
 3740              		.cfi_def_cfa_offset 24
 3741 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 116


 3742              	.LCFI135:
 3743              		.cfi_def_cfa_register 7
 3744 0006 7860     		str	r0, [r7, #4]
2611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xYieldRequired = pdFALSE;
 3745              		.loc 1 2611 12
 3746 0008 0023     		movs	r3, #0
 3747 000a FB60     		str	r3, [r7, #12]
2612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Must not be called with the scheduler suspended as the implementation
2614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	relies on xPendedTicks being wound down to 0 in xTaskResumeAll(). */
2615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended == 0 );
 3748              		.loc 1 2615 2
 3749 000c 0F4B     		ldr	r3, .L232
 3750 000e 1B68     		ldr	r3, [r3]
 3751 0010 002B     		cmp	r3, #0
 3752 0012 0AD0     		beq	.L229
 3753              	.LBB183:
 3754              	.LBB184:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3755              		.loc 2 195 2
 3756              		.syntax unified
 3757              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3758 0014 4FF05003 			mov r3, #80												
 3759 0018 83F31188 		msr basepri, r3											
 3760 001c BFF36F8F 		isb														
 3761 0020 BFF34F8F 		dsb														
 3762              	
 3763              	@ 0 "" 2
 3764              		.thumb
 3765              		.syntax unified
 3766 0024 BB60     		str	r3, [r7, #8]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3767              		.loc 2 203 1
 3768 0026 00BF     		nop
 3769              	.L230:
 3770              	.LBE184:
 3771              	.LBE183:
 3772              		.loc 1 2615 2 discriminator 1
 3773 0028 FEE7     		b	.L230
 3774              	.L229:
2616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Use xPendedTicks to mimic xTicksToCatchUp number of ticks occurring when
2618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the scheduler is suspended so the ticks are executed in xTaskResumeAll(). */
2619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vTaskSuspendAll();
 3775              		.loc 1 2619 2
 3776 002a FFF7FEFF 		bl	vTaskSuspendAll
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xPendedTicks += xTicksToCatchUp;
 3777              		.loc 1 2620 15
 3778 002e 084B     		ldr	r3, .L232+4
 3779 0030 1A68     		ldr	r2, [r3]
 3780 0032 7B68     		ldr	r3, [r7, #4]
 3781 0034 1344     		add	r3, r3, r2
 3782 0036 064A     		ldr	r2, .L232+4
 3783 0038 1360     		str	r3, [r2]
2621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldRequired = xTaskResumeAll();
 3784              		.loc 1 2621 19
 3785 003a FFF7FEFF 		bl	xTaskResumeAll
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 117


 3786 003e F860     		str	r0, [r7, #12]
2622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xYieldRequired;
 3787              		.loc 1 2623 9
 3788 0040 FB68     		ldr	r3, [r7, #12]
2624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3789              		.loc 1 2624 1
 3790 0042 1846     		mov	r0, r3
 3791 0044 1037     		adds	r7, r7, #16
 3792              	.LCFI136:
 3793              		.cfi_def_cfa_offset 8
 3794 0046 BD46     		mov	sp, r7
 3795              	.LCFI137:
 3796              		.cfi_def_cfa_register 13
 3797              		@ sp needed
 3798 0048 80BD     		pop	{r7, pc}
 3799              	.L233:
 3800 004a 00BF     		.align	2
 3801              	.L232:
 3802 004c 00000000 		.word	uxSchedulerSuspended
 3803 0050 00000000 		.word	xPendedTicks
 3804              		.cfi_endproc
 3805              	.LFE30:
 3807              		.section	.text.xTaskIncrementTick,"ax",%progbits
 3808              		.align	1
 3809              		.global	xTaskIncrementTick
 3810              		.syntax unified
 3811              		.thumb
 3812              		.thumb_func
 3813              		.fpu fpv4-sp-d16
 3815              	xTaskIncrementTick:
 3816              	.LFB31:
2625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB = xTask;
2632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
2635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			it is actually in the Blocked state. */
2640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
2643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended. */
2647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 118


2650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
2653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
2654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This lets the task know it was forcibly removed from the
2660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						blocked state so it should not re-evaluate its block time and
2661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						then block again. */
2662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch if preemption is turned off. */
2676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					performed if the unblocked task has a priority that is
2680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					equal to or higher than the currently executing task. */
2681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						is unsuspended. */
2685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
2697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 119


2707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3817              		.loc 1 2708 1
 3818              		.cfi_startproc
 3819              		@ args = 0, pretend = 0, frame = 24
 3820              		@ frame_needed = 1, uses_anonymous_args = 0
 3821 0000 80B5     		push	{r7, lr}
 3822              	.LCFI138:
 3823              		.cfi_def_cfa_offset 8
 3824              		.cfi_offset 7, -8
 3825              		.cfi_offset 14, -4
 3826 0002 86B0     		sub	sp, sp, #24
 3827              	.LCFI139:
 3828              		.cfi_def_cfa_offset 32
 3829 0004 00AF     		add	r7, sp, #0
 3830              	.LCFI140:
 3831              		.cfi_def_cfa_register 7
2709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
2710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xItemValue;
2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
 3832              		.loc 1 2711 12
 3833 0006 0023     		movs	r3, #0
 3834 0008 7B61     		str	r3, [r7, #20]
2712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
2716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 3835              		.loc 1 2717 27
 3836 000a 4F4B     		ldr	r3, .L249
 3837 000c 1B68     		ldr	r3, [r3]
 3838              		.loc 1 2717 4
 3839 000e 002B     		cmp	r3, #0
 3840 0010 40F08F80 		bne	.L235
 3841              	.LBB185:
2718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		block. */
2721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 3842              		.loc 1 2721 49
 3843 0014 4D4B     		ldr	r3, .L249+4
 3844 0016 1B68     		ldr	r3, [r3]
 3845              		.loc 1 2721 20
 3846 0018 0133     		adds	r3, r3, #1
 3847 001a 3B61     		str	r3, [r7, #16]
2722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		delayed lists if it wraps to 0. */
2725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = xConstTickCount;
 3848              		.loc 1 2725 14
 3849 001c 4B4A     		ldr	r2, .L249+4
 3850 001e 3B69     		ldr	r3, [r7, #16]
 3851 0020 1360     		str	r3, [r2]
2726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
 3852              		.loc 1 2727 5
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 120


 3853 0022 3B69     		ldr	r3, [r7, #16]
 3854 0024 002B     		cmp	r3, #0
 3855 0026 20D1     		bne	.L236
 3856              	.LBB186:
2728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
 3857              		.loc 1 2729 4
 3858 0028 494B     		ldr	r3, .L249+8
 3859 002a 1B68     		ldr	r3, [r3]
 3860 002c 1B68     		ldr	r3, [r3]
 3861 002e 002B     		cmp	r3, #0
 3862 0030 0AD0     		beq	.L237
 3863              	.LBB187:
 3864              	.LBB188:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3865              		.loc 2 195 2
 3866              		.syntax unified
 3867              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3868 0032 4FF05003 			mov r3, #80												
 3869 0036 83F31188 		msr basepri, r3											
 3870 003a BFF36F8F 		isb														
 3871 003e BFF34F8F 		dsb														
 3872              	
 3873              	@ 0 "" 2
 3874              		.thumb
 3875              		.syntax unified
 3876 0042 3B60     		str	r3, [r7]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3877              		.loc 2 203 1
 3878 0044 00BF     		nop
 3879              	.L238:
 3880              	.LBE188:
 3881              	.LBE187:
 3882              		.loc 1 2729 4 discriminator 1
 3883 0046 FEE7     		b	.L238
 3884              	.L237:
 3885              		.loc 1 2729 4 is_stmt 0 discriminator 2
 3886 0048 414B     		ldr	r3, .L249+8
 3887 004a 1B68     		ldr	r3, [r3]
 3888 004c FB60     		str	r3, [r7, #12]
 3889 004e 414B     		ldr	r3, .L249+12
 3890 0050 1B68     		ldr	r3, [r3]
 3891 0052 3F4A     		ldr	r2, .L249+8
 3892 0054 1360     		str	r3, [r2]
 3893 0056 3F4A     		ldr	r2, .L249+12
 3894 0058 FB68     		ldr	r3, [r7, #12]
 3895 005a 1360     		str	r3, [r2]
 3896 005c 3E4B     		ldr	r3, .L249+16
 3897 005e 1B68     		ldr	r3, [r3]
 3898 0060 0133     		adds	r3, r3, #1
 3899 0062 3D4A     		ldr	r2, .L249+16
 3900 0064 1360     		str	r3, [r2]
 3901 0066 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3902              	.L236:
 3903              	.LBE186:
2730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 121


2732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		look any further down the list. */
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
 3904              		.loc 1 2740 23 is_stmt 1
 3905 006a 3C4B     		ldr	r3, .L249+20
 3906 006c 1B68     		ldr	r3, [r3]
 3907              		.loc 1 2740 5
 3908 006e 3A69     		ldr	r2, [r7, #16]
 3909 0070 9A42     		cmp	r2, r3
 3910 0072 49D3     		bcc	.L239
 3911              	.L245:
2741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( ;; )
2743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 3912              		.loc 1 2744 9
 3913 0074 364B     		ldr	r3, .L249+8
 3914 0076 1B68     		ldr	r3, [r3]
 3915 0078 1B68     		ldr	r3, [r3]
 3916              		.loc 1 2744 7
 3917 007a 002B     		cmp	r3, #0
 3918 007c 04D1     		bne	.L240
2745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					to the maximum possible value so it is extremely
2748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unlikely that the
2749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					next time through. */
2751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
 3919              		.loc 1 2751 27
 3920 007e 374B     		ldr	r3, .L249+20
 3921 0080 4FF0FF32 		mov	r2, #-1
 3922 0084 1A60     		str	r2, [r3]
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 3923              		.loc 1 2752 6
 3924 0086 3FE0     		b	.L239
 3925              	.L240:
2753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					at which the task at the head of the delayed list must
2759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be removed from the Blocked state. */
2760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this
 3926              		.loc 1 2760 14
 3927 0088 314B     		ldr	r3, .L249+8
 3928 008a 1B68     		ldr	r3, [r3]
 3929 008c DB68     		ldr	r3, [r3, #12]
 3930              		.loc 1 2760 12
 3931 008e DB68     		ldr	r3, [r3, #12]
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 122


 3932 0090 BB60     		str	r3, [r7, #8]
2761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 3933              		.loc 1 2761 17
 3934 0092 BB68     		ldr	r3, [r7, #8]
 3935 0094 5B68     		ldr	r3, [r3, #4]
 3936 0096 7B60     		str	r3, [r7, #4]
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xConstTickCount < xItemValue )
 3937              		.loc 1 2763 8
 3938 0098 3A69     		ldr	r2, [r7, #16]
 3939 009a 7B68     		ldr	r3, [r7, #4]
 3940 009c 9A42     		cmp	r2, r3
 3941 009e 03D2     		bcs	.L241
2764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						item value is the time at which the task at the head
2767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						state -	so record the item value in
2769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime. */
2770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
 3942              		.loc 1 2770 28
 3943 00a0 2E4A     		ldr	r2, .L249+20
 3944 00a2 7B68     		ldr	r3, [r7, #4]
 3945 00a4 1360     		str	r3, [r2]
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
 3946              		.loc 1 2771 7
 3947 00a6 2FE0     		b	.L239
 3948              	.L241:
2772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 3949              		.loc 1 2779 15
 3950 00a8 BB68     		ldr	r3, [r7, #8]
 3951 00aa 0433     		adds	r3, r3, #4
 3952 00ac 1846     		mov	r0, r3
 3953 00ae FFF7FEFF 		bl	uxListRemove
2780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it from the event list. */
2783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 3954              		.loc 1 2783 10
 3955 00b2 BB68     		ldr	r3, [r7, #8]
 3956 00b4 9B6A     		ldr	r3, [r3, #40]
 3957              		.loc 1 2783 8
 3958 00b6 002B     		cmp	r3, #0
 3959 00b8 04D0     		beq	.L242
2784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 3960              		.loc 1 2785 16
 3961 00ba BB68     		ldr	r3, [r7, #8]
 3962 00bc 1833     		adds	r3, r3, #24
 3963 00be 1846     		mov	r0, r3
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 123


 3964 00c0 FFF7FEFF 		bl	uxListRemove
 3965              	.L242:
2786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list. */
2794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3966              		.loc 1 2794 6
 3967 00c4 BB68     		ldr	r3, [r7, #8]
 3968 00c6 DA6A     		ldr	r2, [r3, #44]
 3969 00c8 254B     		ldr	r3, .L249+24
 3970 00ca 1B68     		ldr	r3, [r3]
 3971 00cc 9A42     		cmp	r2, r3
 3972 00ce 03D9     		bls	.L243
 3973              		.loc 1 2794 6 is_stmt 0 discriminator 1
 3974 00d0 BB68     		ldr	r3, [r7, #8]
 3975 00d2 DB6A     		ldr	r3, [r3, #44]
 3976 00d4 224A     		ldr	r2, .L249+24
 3977 00d6 1360     		str	r3, [r2]
 3978              	.L243:
 3979              		.loc 1 2794 6 discriminator 3
 3980 00d8 BB68     		ldr	r3, [r7, #8]
 3981 00da DA6A     		ldr	r2, [r3, #44]
 3982 00dc 1346     		mov	r3, r2
 3983 00de 9B00     		lsls	r3, r3, #2
 3984 00e0 1344     		add	r3, r3, r2
 3985 00e2 9B00     		lsls	r3, r3, #2
 3986 00e4 1F4A     		ldr	r2, .L249+28
 3987 00e6 1A44     		add	r2, r2, r3
 3988 00e8 BB68     		ldr	r3, [r7, #8]
 3989 00ea 0433     		adds	r3, r3, #4
 3990 00ec 1946     		mov	r1, r3
 3991 00ee 1046     		mov	r0, r2
 3992 00f0 FFF7FEFF 		bl	vListInsertEnd
2795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					context switch if preemption is turned off. */
2798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Preemption is on, but a context switch should
2801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						only be performed if the unblocked task has a
2802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority that is equal to or higher than the
2803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						currently executing task. */
2804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 3993              		.loc 1 2804 16 is_stmt 1 discriminator 3
 3994 00f4 BB68     		ldr	r3, [r7, #8]
 3995 00f6 DA6A     		ldr	r2, [r3, #44]
 3996              		.loc 1 2804 44 discriminator 3
 3997 00f8 1B4B     		ldr	r3, .L249+32
 3998 00fa 1B68     		ldr	r3, [r3]
 3999 00fc DB6A     		ldr	r3, [r3, #44]
 4000              		.loc 1 2804 9 discriminator 3
 4001 00fe 9A42     		cmp	r2, r3
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 124


 4002 0100 B8D3     		bcc	.L245
2805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xSwitchRequired = pdTRUE;
 4003              		.loc 1 2806 24
 4004 0102 0123     		movs	r3, #1
 4005 0104 7B61     		str	r3, [r7, #20]
2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4006              		.loc 1 2744 7
 4007 0106 B5E7     		b	.L245
 4008              	.L239:
2807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
2809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
 4009              		.loc 1 2823 8
 4010 0108 174B     		ldr	r3, .L249+32
 4011 010a 1B68     		ldr	r3, [r3]
 4012 010c DA6A     		ldr	r2, [r3, #44]
 4013 010e 1549     		ldr	r1, .L249+28
 4014 0110 1346     		mov	r3, r2
 4015 0112 9B00     		lsls	r3, r3, #2
 4016 0114 1344     		add	r3, r3, r2
 4017 0116 9B00     		lsls	r3, r3, #2
 4018 0118 0B44     		add	r3, r3, r1
 4019 011a 1B68     		ldr	r3, [r3]
 4020              		.loc 1 2823 6
 4021 011c 012B     		cmp	r3, #1
 4022 011e 01D9     		bls	.L246
2824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
 4023              		.loc 1 2825 21
 4024 0120 0123     		movs	r3, #1
 4025 0122 7B61     		str	r3, [r7, #20]
 4026              	.L246:
2826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 125


2836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xPendedTicks == ( TickType_t ) 0 )
2839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vApplicationTickHook();
2841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 1 )
2850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xYieldPending != pdFALSE )
 4027              		.loc 1 2851 22
 4028 0124 114B     		ldr	r3, .L249+36
 4029 0126 1B68     		ldr	r3, [r3]
 4030              		.loc 1 2851 6
 4031 0128 002B     		cmp	r3, #0
 4032 012a 07D0     		beq	.L247
2852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
 4033              		.loc 1 2853 21
 4034 012c 0123     		movs	r3, #1
 4035 012e 7B61     		str	r3, [r7, #20]
 4036 0130 04E0     		b	.L247
 4037              	.L235:
 4038              	.LBE185:
2854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
2861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		++xPendedTicks;
 4039              		.loc 1 2864 3
 4040 0132 0F4B     		ldr	r3, .L249+40
 4041 0134 1B68     		ldr	r3, [r3]
 4042 0136 0133     		adds	r3, r3, #1
 4043 0138 0D4A     		ldr	r2, .L249+40
 4044 013a 1360     		str	r3, [r2]
 4045              	.L247:
2865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
2868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
2871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 126


2874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xSwitchRequired;
 4046              		.loc 1 2875 9
 4047 013c 7B69     		ldr	r3, [r7, #20]
2876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4048              		.loc 1 2876 1
 4049 013e 1846     		mov	r0, r3
 4050 0140 1837     		adds	r7, r7, #24
 4051              	.LCFI141:
 4052              		.cfi_def_cfa_offset 8
 4053 0142 BD46     		mov	sp, r7
 4054              	.LCFI142:
 4055              		.cfi_def_cfa_register 13
 4056              		@ sp needed
 4057 0144 80BD     		pop	{r7, pc}
 4058              	.L250:
 4059 0146 00BF     		.align	2
 4060              	.L249:
 4061 0148 00000000 		.word	uxSchedulerSuspended
 4062 014c 00000000 		.word	xTickCount
 4063 0150 00000000 		.word	pxDelayedTaskList
 4064 0154 00000000 		.word	pxOverflowDelayedTaskList
 4065 0158 00000000 		.word	xNumOfOverflows
 4066 015c 00000000 		.word	xNextTaskUnblockTime
 4067 0160 00000000 		.word	uxTopReadyPriority
 4068 0164 00000000 		.word	pxReadyTasksLists
 4069 0168 00000000 		.word	pxCurrentTCB
 4070 016c 00000000 		.word	xYieldPending
 4071 0170 00000000 		.word	xPendedTicks
 4072              		.cfi_endproc
 4073              	.LFE31:
 4075              		.section	.text.vTaskSwitchContext,"ax",%progbits
 4076              		.align	1
 4077              		.global	vTaskSwitchContext
 4078              		.syntax unified
 4079              		.thumb
 4080              		.thumb_func
 4081              		.fpu fpv4-sp-d16
 4083              	vTaskSwitchContext:
 4084              	.LFB32:
2877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		getting set. */
2887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = xTask;
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 127


2894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTagFromISR( TaskHandle_t xTask )
2935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
2939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
2946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 128


2951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = pxCurrentTCB;
2968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = xTask;
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
2981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
2990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4085              		.loc 1 2990 1
 4086              		.cfi_startproc
 4087              		@ args = 0, pretend = 0, frame = 16
 4088              		@ frame_needed = 1, uses_anonymous_args = 0
 4089 0000 80B5     		push	{r7, lr}
 4090              	.LCFI143:
 4091              		.cfi_def_cfa_offset 8
 4092              		.cfi_offset 7, -8
 4093              		.cfi_offset 14, -4
 4094 0002 84B0     		sub	sp, sp, #16
 4095              	.LCFI144:
 4096              		.cfi_def_cfa_offset 24
 4097 0004 00AF     		add	r7, sp, #0
 4098              	.LCFI145:
 4099              		.cfi_def_cfa_register 7
2991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 4100              		.loc 1 2991 27
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 129


 4101 0006 344B     		ldr	r3, .L261
 4102 0008 1B68     		ldr	r3, [r3]
 4103              		.loc 1 2991 4
 4104 000a 002B     		cmp	r3, #0
 4105 000c 03D0     		beq	.L252
2992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch. */
2995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 4106              		.loc 1 2995 17
 4107 000e 334B     		ldr	r3, .L261+4
 4108 0010 0122     		movs	r2, #1
 4109 0012 1A60     		str	r2, [r3]
2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdFALSE;
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
3001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
3005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
3006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
3008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the amount of time the task has been running to the
3011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			accumulated time so far.  The time the task started running was
3012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			stored in ulTaskSwitchedInTime.  Note that there is no overflow
3013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protection here so count values are only valid until the timer
3014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			overflows.  The guard against negative values is to protect
3015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			against suspect run time stat counter implementations - which
3016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			are provided by the application, not the kernel. */
3017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalRunTime > ulTaskSwitchedInTime )
3018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
3020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTaskSwitchedInTime = ulTotalRunTime;
3026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
3028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check for stack overflow, if configured. */
3030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
3031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Before the currently running task is switched out, save its errno. */
3033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
3034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
3036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 130


3040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		optimised asm code. */
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timer
3042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
3043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* After the new task is switched in, update the global errno. */
3045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
3046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
3048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
3054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to this task.
3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for additional information. */
3057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
3058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4110              		.loc 1 3061 1
 4111 0014 5BE0     		b	.L260
 4112              	.L252:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 4113              		.loc 1 2999 17
 4114 0016 314B     		ldr	r3, .L261+4
 4115 0018 0022     		movs	r2, #0
 4116 001a 1A60     		str	r2, [r3]
 4117              	.LBB189:
3007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
 4118              		.loc 1 3007 22
 4119 001c FFF7FEFF 		bl	GET_RUN_TIME_COUNTER_VALUE
 4120 0020 0346     		mov	r3, r0
 4121 0022 1A46     		mov	r2, r3
3007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
 4122              		.loc 1 3007 20
 4123 0024 2E4B     		ldr	r3, .L261+8
 4124 0026 1A60     		str	r2, [r3]
3017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4125              		.loc 1 3017 23
 4126 0028 2D4B     		ldr	r3, .L261+8
 4127 002a 1A68     		ldr	r2, [r3]
 4128 002c 2D4B     		ldr	r3, .L261+12
 4129 002e 1B68     		ldr	r3, [r3]
3017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4130              		.loc 1 3017 6
 4131 0030 9A42     		cmp	r2, r3
 4132 0032 09D9     		bls	.L254
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4133              		.loc 1 3019 36
 4134 0034 2C4B     		ldr	r3, .L261+16
 4135 0036 1B68     		ldr	r3, [r3]
 4136 0038 996D     		ldr	r1, [r3, #88]
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4137              		.loc 1 3019 56
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 131


 4138 003a 294A     		ldr	r2, .L261+8
 4139 003c 1068     		ldr	r0, [r2]
 4140 003e 294A     		ldr	r2, .L261+12
 4141 0040 1268     		ldr	r2, [r2]
 4142 0042 821A     		subs	r2, r0, r2
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4143              		.loc 1 3019 36
 4144 0044 0A44     		add	r2, r2, r1
 4145 0046 9A65     		str	r2, [r3, #88]
 4146              	.L254:
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4147              		.loc 1 3025 25
 4148 0048 254B     		ldr	r3, .L261+8
 4149 004a 1B68     		ldr	r3, [r3]
 4150 004c 254A     		ldr	r2, .L261+12
 4151 004e 1360     		str	r3, [r2]
 4152              	.LBE189:
 4153              	.LBB190:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 4154              		.loc 1 3041 3
 4155 0050 264B     		ldr	r3, .L261+20
 4156 0052 1B68     		ldr	r3, [r3]
 4157 0054 FB60     		str	r3, [r7, #12]
 4158 0056 10E0     		b	.L255
 4159              	.L258:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 4160              		.loc 1 3041 3 is_stmt 0 discriminator 5
 4161 0058 FB68     		ldr	r3, [r7, #12]
 4162 005a 002B     		cmp	r3, #0
 4163 005c 0AD1     		bne	.L256
 4164              	.LBB191:
 4165              	.LBB192:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4166              		.loc 2 195 2 is_stmt 1
 4167              		.syntax unified
 4168              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4169 005e 4FF05003 			mov r3, #80												
 4170 0062 83F31188 		msr basepri, r3											
 4171 0066 BFF36F8F 		isb														
 4172 006a BFF34F8F 		dsb														
 4173              	
 4174              	@ 0 "" 2
 4175              		.thumb
 4176              		.syntax unified
 4177 006e 7B60     		str	r3, [r7, #4]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4178              		.loc 2 203 1
 4179 0070 00BF     		nop
 4180              	.L257:
 4181              	.LBE192:
 4182              	.LBE191:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 4183              		.loc 1 3041 3 discriminator 1
 4184 0072 FEE7     		b	.L257
 4185              	.L256:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 4186              		.loc 1 3041 3 is_stmt 0 discriminator 3
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 132


 4187 0074 FB68     		ldr	r3, [r7, #12]
 4188 0076 013B     		subs	r3, r3, #1
 4189 0078 FB60     		str	r3, [r7, #12]
 4190              	.L255:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 4191              		.loc 1 3041 3 discriminator 4
 4192 007a 1D49     		ldr	r1, .L261+24
 4193 007c FA68     		ldr	r2, [r7, #12]
 4194 007e 1346     		mov	r3, r2
 4195 0080 9B00     		lsls	r3, r3, #2
 4196 0082 1344     		add	r3, r3, r2
 4197 0084 9B00     		lsls	r3, r3, #2
 4198 0086 0B44     		add	r3, r3, r1
 4199 0088 1B68     		ldr	r3, [r3]
 4200 008a 002B     		cmp	r3, #0
 4201 008c E4D0     		beq	.L258
 4202              	.LBB193:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 4203              		.loc 1 3041 3 discriminator 6
 4204 008e FA68     		ldr	r2, [r7, #12]
 4205 0090 1346     		mov	r3, r2
 4206 0092 9B00     		lsls	r3, r3, #2
 4207 0094 1344     		add	r3, r3, r2
 4208 0096 9B00     		lsls	r3, r3, #2
 4209 0098 154A     		ldr	r2, .L261+24
 4210 009a 1344     		add	r3, r3, r2
 4211 009c BB60     		str	r3, [r7, #8]
 4212 009e BB68     		ldr	r3, [r7, #8]
 4213 00a0 5B68     		ldr	r3, [r3, #4]
 4214 00a2 5A68     		ldr	r2, [r3, #4]
 4215 00a4 BB68     		ldr	r3, [r7, #8]
 4216 00a6 5A60     		str	r2, [r3, #4]
 4217 00a8 BB68     		ldr	r3, [r7, #8]
 4218 00aa 5A68     		ldr	r2, [r3, #4]
 4219 00ac BB68     		ldr	r3, [r7, #8]
 4220 00ae 0833     		adds	r3, r3, #8
 4221 00b0 9A42     		cmp	r2, r3
 4222 00b2 04D1     		bne	.L259
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 4223              		.loc 1 3041 3 discriminator 7
 4224 00b4 BB68     		ldr	r3, [r7, #8]
 4225 00b6 5B68     		ldr	r3, [r3, #4]
 4226 00b8 5A68     		ldr	r2, [r3, #4]
 4227 00ba BB68     		ldr	r3, [r7, #8]
 4228 00bc 5A60     		str	r2, [r3, #4]
 4229              	.L259:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 4230              		.loc 1 3041 3 discriminator 9
 4231 00be BB68     		ldr	r3, [r7, #8]
 4232 00c0 5B68     		ldr	r3, [r3, #4]
 4233 00c2 DB68     		ldr	r3, [r3, #12]
 4234 00c4 084A     		ldr	r2, .L261+16
 4235 00c6 1360     		str	r3, [r2]
 4236              	.LBE193:
 4237 00c8 084A     		ldr	r2, .L261+20
 4238 00ca FB68     		ldr	r3, [r7, #12]
 4239 00cc 1360     		str	r3, [r2]
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 133


 4240              	.L260:
 4241              	.LBE190:
 4242              		.loc 1 3061 1 is_stmt 1
 4243 00ce 00BF     		nop
 4244 00d0 1037     		adds	r7, r7, #16
 4245              	.LCFI146:
 4246              		.cfi_def_cfa_offset 8
 4247 00d2 BD46     		mov	sp, r7
 4248              	.LCFI147:
 4249              		.cfi_def_cfa_register 13
 4250              		@ sp needed
 4251 00d4 80BD     		pop	{r7, pc}
 4252              	.L262:
 4253 00d6 00BF     		.align	2
 4254              	.L261:
 4255 00d8 00000000 		.word	uxSchedulerSuspended
 4256 00dc 00000000 		.word	xYieldPending
 4257 00e0 00000000 		.word	ulTotalRunTime
 4258 00e4 00000000 		.word	ulTaskSwitchedInTime
 4259 00e8 00000000 		.word	pxCurrentTCB
 4260 00ec 00000000 		.word	uxTopReadyPriority
 4261 00f0 00000000 		.word	pxReadyTasksLists
 4262              		.cfi_endproc
 4263              	.LFE32:
 4265              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 4266              		.align	1
 4267              		.global	vTaskPlaceOnEventList
 4268              		.syntax unified
 4269              		.thumb
 4270              		.thumb_func
 4271              		.fpu fpv4-sp-d16
 4273              	vTaskPlaceOnEventList:
 4274              	.LFB33:
3062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
3065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4275              		.loc 1 3065 1
 4276              		.cfi_startproc
 4277              		@ args = 0, pretend = 0, frame = 16
 4278              		@ frame_needed = 1, uses_anonymous_args = 0
 4279 0000 80B5     		push	{r7, lr}
 4280              	.LCFI148:
 4281              		.cfi_def_cfa_offset 8
 4282              		.cfi_offset 7, -8
 4283              		.cfi_offset 14, -4
 4284 0002 84B0     		sub	sp, sp, #16
 4285              	.LCFI149:
 4286              		.cfi_def_cfa_offset 24
 4287 0004 00AF     		add	r7, sp, #0
 4288              	.LCFI150:
 4289              		.cfi_def_cfa_register 7
 4290 0006 7860     		str	r0, [r7, #4]
 4291 0008 3960     		str	r1, [r7]
3066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 4292              		.loc 1 3066 2
 4293 000a 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 134


 4294 000c 002B     		cmp	r3, #0
 4295 000e 0AD1     		bne	.L264
 4296              	.LBB194:
 4297              	.LBB195:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4298              		.loc 2 195 2
 4299              		.syntax unified
 4300              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4301 0010 4FF05003 			mov r3, #80												
 4302 0014 83F31188 		msr basepri, r3											
 4303 0018 BFF36F8F 		isb														
 4304 001c BFF34F8F 		dsb														
 4305              	
 4306              	@ 0 "" 2
 4307              		.thumb
 4308              		.syntax unified
 4309 0020 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4310              		.loc 2 203 1
 4311 0022 00BF     		nop
 4312              	.L265:
 4313              	.LBE195:
 4314              	.LBE194:
 4315              		.loc 1 3066 2 discriminator 1
 4316 0024 FEE7     		b	.L265
 4317              	.L264:
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
3069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
3070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
3072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
3073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
3074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
3075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 4318              		.loc 1 3075 43
 4319 0026 074B     		ldr	r3, .L266
 4320 0028 1B68     		ldr	r3, [r3]
 4321              		.loc 1 3075 2
 4322 002a 1833     		adds	r3, r3, #24
 4323 002c 1946     		mov	r1, r3
 4324 002e 7868     		ldr	r0, [r7, #4]
 4325 0030 FFF7FEFF 		bl	vListInsert
3076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 4326              		.loc 1 3077 2
 4327 0034 0121     		movs	r1, #1
 4328 0036 3868     		ldr	r0, [r7]
 4329 0038 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
3078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4330              		.loc 1 3078 1
 4331 003c 00BF     		nop
 4332 003e 1037     		adds	r7, r7, #16
 4333              	.LCFI151:
 4334              		.cfi_def_cfa_offset 8
 4335 0040 BD46     		mov	sp, r7
 4336              	.LCFI152:
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 135


 4337              		.cfi_def_cfa_register 13
 4338              		@ sp needed
 4339 0042 80BD     		pop	{r7, pc}
 4340              	.L267:
 4341              		.align	2
 4342              	.L266:
 4343 0044 00000000 		.word	pxCurrentTCB
 4344              		.cfi_endproc
 4345              	.LFE33:
 4347              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 4348              		.align	1
 4349              		.global	vTaskPlaceOnUnorderedEventList
 4350              		.syntax unified
 4351              		.thumb
 4352              		.thumb_func
 4353              		.fpu fpv4-sp-d16
 4355              	vTaskPlaceOnUnorderedEventList:
 4356              	.LFB34:
3079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4357              		.loc 1 3082 1
 4358              		.cfi_startproc
 4359              		@ args = 0, pretend = 0, frame = 24
 4360              		@ frame_needed = 1, uses_anonymous_args = 0
 4361 0000 80B5     		push	{r7, lr}
 4362              	.LCFI153:
 4363              		.cfi_def_cfa_offset 8
 4364              		.cfi_offset 7, -8
 4365              		.cfi_offset 14, -4
 4366 0002 86B0     		sub	sp, sp, #24
 4367              	.LCFI154:
 4368              		.cfi_def_cfa_offset 32
 4369 0004 00AF     		add	r7, sp, #0
 4370              	.LCFI155:
 4371              		.cfi_def_cfa_register 7
 4372 0006 F860     		str	r0, [r7, #12]
 4373 0008 B960     		str	r1, [r7, #8]
 4374 000a 7A60     		str	r2, [r7, #4]
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 4375              		.loc 1 3083 2
 4376 000c FB68     		ldr	r3, [r7, #12]
 4377 000e 002B     		cmp	r3, #0
 4378 0010 0AD1     		bne	.L269
 4379              	.LBB196:
 4380              	.LBB197:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4381              		.loc 2 195 2
 4382              		.syntax unified
 4383              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4384 0012 4FF05003 			mov r3, #80												
 4385 0016 83F31188 		msr basepri, r3											
 4386 001a BFF36F8F 		isb														
 4387 001e BFF34F8F 		dsb														
 4388              	
 4389              	@ 0 "" 2
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 136


 4390              		.thumb
 4391              		.syntax unified
 4392 0022 7B61     		str	r3, [r7, #20]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4393              		.loc 2 203 1
 4394 0024 00BF     		nop
 4395              	.L270:
 4396              	.LBE197:
 4397              	.LBE196:
 4398              		.loc 1 3083 2 discriminator 1
 4399 0026 FEE7     		b	.L270
 4400              	.L269:
3084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event groups implementation. */
3087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
 4401              		.loc 1 3087 2
 4402 0028 114B     		ldr	r3, .L273
 4403 002a 1B68     		ldr	r3, [r3]
 4404 002c 002B     		cmp	r3, #0
 4405 002e 0AD1     		bne	.L271
 4406              	.LBB198:
 4407              	.LBB199:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4408              		.loc 2 195 2
 4409              		.syntax unified
 4410              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4411 0030 4FF05003 			mov r3, #80												
 4412 0034 83F31188 		msr basepri, r3											
 4413 0038 BFF36F8F 		isb														
 4414 003c BFF34F8F 		dsb														
 4415              	
 4416              	@ 0 "" 2
 4417              		.thumb
 4418              		.syntax unified
 4419 0040 3B61     		str	r3, [r7, #16]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4420              		.loc 2 203 1
 4421 0042 00BF     		nop
 4422              	.L272:
 4423              	.LBE199:
 4424              	.LBE198:
 4425              		.loc 1 3087 2 discriminator 2
 4426 0044 FEE7     		b	.L272
 4427              	.L271:
3088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
3090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
3091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	task that is not in the Blocked state. */
3092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
 4428              		.loc 1 3092 2
 4429 0046 0B4B     		ldr	r3, .L273+4
 4430 0048 1B68     		ldr	r3, [r3]
 4431 004a BA68     		ldr	r2, [r7, #8]
 4432 004c 42F00042 		orr	r2, r2, #-2147483648
 4433 0050 9A61     		str	r2, [r3, #24]
3093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 137


3094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
3095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
3096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
3097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
3098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the task level). */
3099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 4434              		.loc 1 3099 46
 4435 0052 084B     		ldr	r3, .L273+4
 4436 0054 1B68     		ldr	r3, [r3]
 4437              		.loc 1 3099 2
 4438 0056 1833     		adds	r3, r3, #24
 4439 0058 1946     		mov	r1, r3
 4440 005a F868     		ldr	r0, [r7, #12]
 4441 005c FFF7FEFF 		bl	vListInsertEnd
3100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 4442              		.loc 1 3101 2
 4443 0060 0121     		movs	r1, #1
 4444 0062 7868     		ldr	r0, [r7, #4]
 4445 0064 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
3102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4446              		.loc 1 3102 1
 4447 0068 00BF     		nop
 4448 006a 1837     		adds	r7, r7, #24
 4449              	.LCFI156:
 4450              		.cfi_def_cfa_offset 8
 4451 006c BD46     		mov	sp, r7
 4452              	.LCFI157:
 4453              		.cfi_def_cfa_register 13
 4454              		@ sp needed
 4455 006e 80BD     		pop	{r7, pc}
 4456              	.L274:
 4457              		.align	2
 4458              	.L273:
 4459 0070 00000000 		.word	uxSchedulerSuspended
 4460 0074 00000000 		.word	pxCurrentTCB
 4461              		.cfi_endproc
 4462              	.LFE34:
 4464              		.section	.text.vTaskPlaceOnEventListRestricted,"ax",%progbits
 4465              		.align	1
 4466              		.global	vTaskPlaceOnEventListRestricted
 4467              		.syntax unified
 4468              		.thumb
 4469              		.thumb_func
 4470              		.fpu fpv4-sp-d16
 4472              	vTaskPlaceOnEventListRestricted:
 4473              	.LFB35:
3103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TIMERS == 1 )
3106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
3108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4474              		.loc 1 3108 2
 4475              		.cfi_startproc
 4476              		@ args = 0, pretend = 0, frame = 24
 4477              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 138


 4478 0000 80B5     		push	{r7, lr}
 4479              	.LCFI158:
 4480              		.cfi_def_cfa_offset 8
 4481              		.cfi_offset 7, -8
 4482              		.cfi_offset 14, -4
 4483 0002 86B0     		sub	sp, sp, #24
 4484              	.LCFI159:
 4485              		.cfi_def_cfa_offset 32
 4486 0004 00AF     		add	r7, sp, #0
 4487              	.LCFI160:
 4488              		.cfi_def_cfa_register 7
 4489 0006 F860     		str	r0, [r7, #12]
 4490 0008 B960     		str	r1, [r7, #8]
 4491 000a 7A60     		str	r2, [r7, #4]
3109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
 4492              		.loc 1 3109 3
 4493 000c FB68     		ldr	r3, [r7, #12]
 4494 000e 002B     		cmp	r3, #0
 4495 0010 0AD1     		bne	.L276
 4496              	.LBB200:
 4497              	.LBB201:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4498              		.loc 2 195 2
 4499              		.syntax unified
 4500              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4501 0012 4FF05003 			mov r3, #80												
 4502 0016 83F31188 		msr basepri, r3											
 4503 001a BFF36F8F 		isb														
 4504 001e BFF34F8F 		dsb														
 4505              	
 4506              	@ 0 "" 2
 4507              		.thumb
 4508              		.syntax unified
 4509 0022 7B61     		str	r3, [r7, #20]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4510              		.loc 2 203 1
 4511 0024 00BF     		nop
 4512              	.L277:
 4513              	.LBE201:
 4514              	.LBE200:
 4515              		.loc 1 3109 3 discriminator 1
 4516 0026 FEE7     		b	.L277
 4517              	.L276:
3110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
3112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
3113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
3114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should be called with the scheduler suspended. */
3115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
3118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
3119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
3120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
3121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 4518              		.loc 1 3121 47
 4519 0028 0A4B     		ldr	r3, .L279
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 139


 4520 002a 1B68     		ldr	r3, [r3]
 4521              		.loc 1 3121 3
 4522 002c 1833     		adds	r3, r3, #24
 4523 002e 1946     		mov	r1, r3
 4524 0030 F868     		ldr	r0, [r7, #12]
 4525 0032 FFF7FEFF 		bl	vListInsertEnd
3122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
3124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
3125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
3126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
 4526              		.loc 1 3126 5
 4527 0036 7B68     		ldr	r3, [r7, #4]
 4528 0038 002B     		cmp	r3, #0
 4529 003a 02D0     		beq	.L278
3127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
 4530              		.loc 1 3128 17
 4531 003c 4FF0FF33 		mov	r3, #-1
 4532 0040 BB60     		str	r3, [r7, #8]
 4533              	.L278:
3129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
3132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 4534              		.loc 1 3132 3
 4535 0042 7968     		ldr	r1, [r7, #4]
 4536 0044 B868     		ldr	r0, [r7, #8]
 4537 0046 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
3133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4538              		.loc 1 3133 2
 4539 004a 00BF     		nop
 4540 004c 1837     		adds	r7, r7, #24
 4541              	.LCFI161:
 4542              		.cfi_def_cfa_offset 8
 4543 004e BD46     		mov	sp, r7
 4544              	.LCFI162:
 4545              		.cfi_def_cfa_register 13
 4546              		@ sp needed
 4547 0050 80BD     		pop	{r7, pc}
 4548              	.L280:
 4549 0052 00BF     		.align	2
 4550              	.L279:
 4551 0054 00000000 		.word	pxCurrentTCB
 4552              		.cfi_endproc
 4553              	.LFE35:
 4555              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 4556              		.align	1
 4557              		.global	xTaskRemoveFromEventList
 4558              		.syntax unified
 4559              		.thumb
 4560              		.thumb_func
 4561              		.fpu fpv4-sp-d16
 4563              	xTaskRemoveFromEventList:
 4564              	.LFB36:
3134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 140


3136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
3139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4565              		.loc 1 3139 1
 4566              		.cfi_startproc
 4567              		@ args = 0, pretend = 0, frame = 24
 4568              		@ frame_needed = 1, uses_anonymous_args = 0
 4569 0000 80B5     		push	{r7, lr}
 4570              	.LCFI163:
 4571              		.cfi_def_cfa_offset 8
 4572              		.cfi_offset 7, -8
 4573              		.cfi_offset 14, -4
 4574 0002 86B0     		sub	sp, sp, #24
 4575              	.LCFI164:
 4576              		.cfi_def_cfa_offset 32
 4577 0004 00AF     		add	r7, sp, #0
 4578              	.LCFI165:
 4579              		.cfi_def_cfa_register 7
 4580 0006 7860     		str	r0, [r7, #4]
3140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	called from a critical section within an ISR. */
3145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
3147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
3148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the delayed list, and add it to the ready list.
3149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
3151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
3152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
3153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
3155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
3156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this 
 4581              		.loc 1 3156 19
 4582 0008 7B68     		ldr	r3, [r7, #4]
 4583 000a DB68     		ldr	r3, [r3, #12]
 4584              		.loc 1 3156 17
 4585 000c DB68     		ldr	r3, [r3, #12]
 4586 000e 3B61     		str	r3, [r7, #16]
3157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 4587              		.loc 1 3157 2
 4588 0010 3B69     		ldr	r3, [r7, #16]
 4589 0012 002B     		cmp	r3, #0
 4590 0014 0AD1     		bne	.L282
 4591              	.LBB202:
 4592              	.LBB203:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4593              		.loc 2 195 2
 4594              		.syntax unified
 4595              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4596 0016 4FF05003 			mov r3, #80												
 4597 001a 83F31188 		msr basepri, r3											
 4598 001e BFF36F8F 		isb														
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 141


 4599 0022 BFF34F8F 		dsb														
 4600              	
 4601              	@ 0 "" 2
 4602              		.thumb
 4603              		.syntax unified
 4604 0026 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4605              		.loc 2 203 1
 4606 0028 00BF     		nop
 4607              	.L283:
 4608              	.LBE203:
 4609              	.LBE202:
 4610              		.loc 1 3157 2 discriminator 1
 4611 002a FEE7     		b	.L283
 4612              	.L282:
3158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 4613              		.loc 1 3158 11
 4614 002c 3B69     		ldr	r3, [r7, #16]
 4615 002e 1833     		adds	r3, r3, #24
 4616 0030 1846     		mov	r0, r3
 4617 0032 FFF7FEFF 		bl	uxListRemove
3159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 4618              		.loc 1 3160 27
 4619 0036 1F4B     		ldr	r3, .L290
 4620 0038 1B68     		ldr	r3, [r3]
 4621              		.loc 1 3160 4
 4622 003a 002B     		cmp	r3, #0
 4623 003c 1FD1     		bne	.L284
3161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 4624              		.loc 1 3162 12
 4625 003e 3B69     		ldr	r3, [r7, #16]
 4626 0040 0433     		adds	r3, r3, #4
 4627 0042 1846     		mov	r0, r3
 4628 0044 FFF7FEFF 		bl	uxListRemove
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 4629              		.loc 1 3163 3
 4630 0048 3B69     		ldr	r3, [r7, #16]
 4631 004a DA6A     		ldr	r2, [r3, #44]
 4632 004c 1A4B     		ldr	r3, .L290+4
 4633 004e 1B68     		ldr	r3, [r3]
 4634 0050 9A42     		cmp	r2, r3
 4635 0052 03D9     		bls	.L285
 4636              		.loc 1 3163 3 is_stmt 0 discriminator 1
 4637 0054 3B69     		ldr	r3, [r7, #16]
 4638 0056 DB6A     		ldr	r3, [r3, #44]
 4639 0058 174A     		ldr	r2, .L290+4
 4640 005a 1360     		str	r3, [r2]
 4641              	.L285:
 4642              		.loc 1 3163 3 discriminator 3
 4643 005c 3B69     		ldr	r3, [r7, #16]
 4644 005e DA6A     		ldr	r2, [r3, #44]
 4645 0060 1346     		mov	r3, r2
 4646 0062 9B00     		lsls	r3, r3, #2
 4647 0064 1344     		add	r3, r3, r2
 4648 0066 9B00     		lsls	r3, r3, #2
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 142


 4649 0068 144A     		ldr	r2, .L290+8
 4650 006a 1A44     		add	r2, r2, r3
 4651 006c 3B69     		ldr	r3, [r7, #16]
 4652 006e 0433     		adds	r3, r3, #4
 4653 0070 1946     		mov	r1, r3
 4654 0072 1046     		mov	r0, r2
 4655 0074 FFF7FEFF 		bl	vListInsertEnd
3164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TICKLESS_IDLE != 0 )
3166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			might be set to the blocked task's time out time.  If the task is
3169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked for a reason other than a timeout xNextTaskUnblockTime is
3170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			normally left unchanged, because it is automatically reset to a new
3171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			value when the tick count equals xNextTaskUnblockTime.  However if
3172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			tickless idling is used it might be more important to enter sleep mode
3173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			at the earliest possible time - so reset xNextTaskUnblockTime here to
3174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ensure it is updated at the earliest possible time. */
3175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvResetNextTaskUnblockTime();
 4656              		.loc 1 3175 4 is_stmt 1 discriminator 3
 4657 0078 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 4658 007c 05E0     		b	.L286
 4659              	.L284:
3176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
3182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pending until the scheduler is resumed. */
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 4660              		.loc 1 3183 3
 4661 007e 3B69     		ldr	r3, [r7, #16]
 4662 0080 1833     		adds	r3, r3, #24
 4663 0082 1946     		mov	r1, r3
 4664 0084 0E48     		ldr	r0, .L290+12
 4665 0086 FFF7FEFF 		bl	vListInsertEnd
 4666              	.L286:
3184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 4667              		.loc 1 3186 20
 4668 008a 3B69     		ldr	r3, [r7, #16]
 4669 008c DA6A     		ldr	r2, [r3, #44]
 4670              		.loc 1 3186 47
 4671 008e 0D4B     		ldr	r3, .L290+16
 4672 0090 1B68     		ldr	r3, [r3]
 4673 0092 DB6A     		ldr	r3, [r3, #44]
 4674              		.loc 1 3186 4
 4675 0094 9A42     		cmp	r2, r3
 4676 0096 05D9     		bls	.L287
3187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should force a context switch now. */
3191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
 4677              		.loc 1 3191 11
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 143


 4678 0098 0123     		movs	r3, #1
 4679 009a 7B61     		str	r3, [r7, #20]
3192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 4680              		.loc 1 3195 17
 4681 009c 0A4B     		ldr	r3, .L290+20
 4682 009e 0122     		movs	r2, #1
 4683 00a0 1A60     		str	r2, [r3]
 4684 00a2 01E0     		b	.L288
 4685              	.L287:
3196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
 4686              		.loc 1 3199 11
 4687 00a4 0023     		movs	r3, #0
 4688 00a6 7B61     		str	r3, [r7, #20]
 4689              	.L288:
3200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 4690              		.loc 1 3202 9
 4691 00a8 7B69     		ldr	r3, [r7, #20]
3203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4692              		.loc 1 3203 1
 4693 00aa 1846     		mov	r0, r3
 4694 00ac 1837     		adds	r7, r7, #24
 4695              	.LCFI166:
 4696              		.cfi_def_cfa_offset 8
 4697 00ae BD46     		mov	sp, r7
 4698              	.LCFI167:
 4699              		.cfi_def_cfa_register 13
 4700              		@ sp needed
 4701 00b0 80BD     		pop	{r7, pc}
 4702              	.L291:
 4703 00b2 00BF     		.align	2
 4704              	.L290:
 4705 00b4 00000000 		.word	uxSchedulerSuspended
 4706 00b8 00000000 		.word	uxTopReadyPriority
 4707 00bc 00000000 		.word	pxReadyTasksLists
 4708 00c0 00000000 		.word	xPendingReadyList
 4709 00c4 00000000 		.word	pxCurrentTCB
 4710 00c8 00000000 		.word	xYieldPending
 4711              		.cfi_endproc
 4712              	.LFE36:
 4714              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 4715              		.align	1
 4716              		.global	vTaskRemoveFromUnorderedEventList
 4717              		.syntax unified
 4718              		.thumb
 4719              		.thumb_func
 4720              		.fpu fpv4-sp-d16
 4722              	vTaskRemoveFromUnorderedEventList:
 4723              	.LFB37:
3204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 144


3205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4724              		.loc 1 3207 1
 4725              		.cfi_startproc
 4726              		@ args = 0, pretend = 0, frame = 24
 4727              		@ frame_needed = 1, uses_anonymous_args = 0
 4728 0000 80B5     		push	{r7, lr}
 4729              	.LCFI168:
 4730              		.cfi_def_cfa_offset 8
 4731              		.cfi_offset 7, -8
 4732              		.cfi_offset 14, -4
 4733 0002 86B0     		sub	sp, sp, #24
 4734              	.LCFI169:
 4735              		.cfi_def_cfa_offset 32
 4736 0004 00AF     		add	r7, sp, #0
 4737              	.LCFI170:
 4738              		.cfi_def_cfa_register 7
 4739 0006 7860     		str	r0, [r7, #4]
 4740 0008 3960     		str	r1, [r7]
3208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event flags implementation. */
3212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
 4741              		.loc 1 3212 2
 4742 000a 2A4B     		ldr	r3, .L300
 4743 000c 1B68     		ldr	r3, [r3]
 4744 000e 002B     		cmp	r3, #0
 4745 0010 0AD1     		bne	.L293
 4746              	.LBB204:
 4747              	.LBB205:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4748              		.loc 2 195 2
 4749              		.syntax unified
 4750              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4751 0012 4FF05003 			mov r3, #80												
 4752 0016 83F31188 		msr basepri, r3											
 4753 001a BFF36F8F 		isb														
 4754 001e BFF34F8F 		dsb														
 4755              	
 4756              	@ 0 "" 2
 4757              		.thumb
 4758              		.syntax unified
 4759 0022 3B61     		str	r3, [r7, #16]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4760              		.loc 2 203 1
 4761 0024 00BF     		nop
 4762              	.L294:
 4763              	.LBE205:
 4764              	.LBE204:
 4765              		.loc 1 3212 2 discriminator 1
 4766 0026 FEE7     		b	.L294
 4767              	.L293:
3213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the new item value in the event list. */
3215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 145


 4768              		.loc 1 3215 2
 4769 0028 3B68     		ldr	r3, [r7]
 4770 002a 43F00042 		orr	r2, r3, #-2147483648
 4771 002e 7B68     		ldr	r3, [r7, #4]
 4772 0030 1A60     		str	r2, [r3]
3216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event flags. */
3219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this 
 4773              		.loc 1 3219 17
 4774 0032 7B68     		ldr	r3, [r7, #4]
 4775 0034 DB68     		ldr	r3, [r3, #12]
 4776 0036 7B61     		str	r3, [r7, #20]
3220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 4777              		.loc 1 3220 2
 4778 0038 7B69     		ldr	r3, [r7, #20]
 4779 003a 002B     		cmp	r3, #0
 4780 003c 0AD1     		bne	.L295
 4781              	.LBB206:
 4782              	.LBB207:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4783              		.loc 2 195 2
 4784              		.syntax unified
 4785              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4786 003e 4FF05003 			mov r3, #80												
 4787 0042 83F31188 		msr basepri, r3											
 4788 0046 BFF36F8F 		isb														
 4789 004a BFF34F8F 		dsb														
 4790              	
 4791              	@ 0 "" 2
 4792              		.thumb
 4793              		.syntax unified
 4794 004e FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4795              		.loc 2 203 1
 4796 0050 00BF     		nop
 4797              	.L296:
 4798              	.LBE207:
 4799              	.LBE206:
 4800              		.loc 1 3220 2 discriminator 2
 4801 0052 FEE7     		b	.L296
 4802              	.L295:
3221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 4803              		.loc 1 3221 11
 4804 0054 7868     		ldr	r0, [r7, #4]
 4805 0056 FFF7FEFF 		bl	uxListRemove
3222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
3224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
3227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
3228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
3229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
3230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
3231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
3232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ensure it is updated at the earliest possible time. */
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 146


3233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvResetNextTaskUnblockTime();
 4806              		.loc 1 3233 3
 4807 005a FFF7FEFF 		bl	prvResetNextTaskUnblockTime
3234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
3236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
3239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	lists. */
3240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 4808              		.loc 1 3240 11
 4809 005e 7B69     		ldr	r3, [r7, #20]
 4810 0060 0433     		adds	r3, r3, #4
 4811 0062 1846     		mov	r0, r3
 4812 0064 FFF7FEFF 		bl	uxListRemove
3241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 4813              		.loc 1 3241 2
 4814 0068 7B69     		ldr	r3, [r7, #20]
 4815 006a DA6A     		ldr	r2, [r3, #44]
 4816 006c 124B     		ldr	r3, .L300+4
 4817 006e 1B68     		ldr	r3, [r3]
 4818 0070 9A42     		cmp	r2, r3
 4819 0072 03D9     		bls	.L297
 4820              		.loc 1 3241 2 is_stmt 0 discriminator 1
 4821 0074 7B69     		ldr	r3, [r7, #20]
 4822 0076 DB6A     		ldr	r3, [r3, #44]
 4823 0078 0F4A     		ldr	r2, .L300+4
 4824 007a 1360     		str	r3, [r2]
 4825              	.L297:
 4826              		.loc 1 3241 2 discriminator 3
 4827 007c 7B69     		ldr	r3, [r7, #20]
 4828 007e DA6A     		ldr	r2, [r3, #44]
 4829 0080 1346     		mov	r3, r2
 4830 0082 9B00     		lsls	r3, r3, #2
 4831 0084 1344     		add	r3, r3, r2
 4832 0086 9B00     		lsls	r3, r3, #2
 4833 0088 0C4A     		ldr	r2, .L300+8
 4834 008a 1A44     		add	r2, r2, r3
 4835 008c 7B69     		ldr	r3, [r7, #20]
 4836 008e 0433     		adds	r3, r3, #4
 4837 0090 1946     		mov	r1, r3
 4838 0092 1046     		mov	r0, r2
 4839 0094 FFF7FEFF 		bl	vListInsertEnd
3242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 4840              		.loc 1 3243 20 is_stmt 1 discriminator 3
 4841 0098 7B69     		ldr	r3, [r7, #20]
 4842 009a DA6A     		ldr	r2, [r3, #44]
 4843              		.loc 1 3243 47 discriminator 3
 4844 009c 084B     		ldr	r3, .L300+12
 4845 009e 1B68     		ldr	r3, [r3]
 4846 00a0 DB6A     		ldr	r3, [r3, #44]
 4847              		.loc 1 3243 4 discriminator 3
 4848 00a2 9A42     		cmp	r2, r3
 4849 00a4 02D9     		bls	.L299
3244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 147


3246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		a context switch is required.  This function is called with the
3247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 4850              		.loc 1 3249 17
 4851 00a6 074B     		ldr	r3, .L300+16
 4852 00a8 0122     		movs	r2, #1
 4853 00aa 1A60     		str	r2, [r3]
 4854              	.L299:
3250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4855              		.loc 1 3251 1
 4856 00ac 00BF     		nop
 4857 00ae 1837     		adds	r7, r7, #24
 4858              	.LCFI171:
 4859              		.cfi_def_cfa_offset 8
 4860 00b0 BD46     		mov	sp, r7
 4861              	.LCFI172:
 4862              		.cfi_def_cfa_register 13
 4863              		@ sp needed
 4864 00b2 80BD     		pop	{r7, pc}
 4865              	.L301:
 4866              		.align	2
 4867              	.L300:
 4868 00b4 00000000 		.word	uxSchedulerSuspended
 4869 00b8 00000000 		.word	uxTopReadyPriority
 4870 00bc 00000000 		.word	pxReadyTasksLists
 4871 00c0 00000000 		.word	pxCurrentTCB
 4872 00c4 00000000 		.word	xYieldPending
 4873              		.cfi_endproc
 4874              	.LFE37:
 4876              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 4877              		.align	1
 4878              		.global	vTaskSetTimeOutState
 4879              		.syntax unified
 4880              		.thumb
 4881              		.thumb_func
 4882              		.fpu fpv4-sp-d16
 4884              	vTaskSetTimeOutState:
 4885              	.LFB38:
3252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4886              		.loc 1 3255 1
 4887              		.cfi_startproc
 4888              		@ args = 0, pretend = 0, frame = 16
 4889              		@ frame_needed = 1, uses_anonymous_args = 0
 4890 0000 80B5     		push	{r7, lr}
 4891              	.LCFI173:
 4892              		.cfi_def_cfa_offset 8
 4893              		.cfi_offset 7, -8
 4894              		.cfi_offset 14, -4
 4895 0002 84B0     		sub	sp, sp, #16
 4896              	.LCFI174:
 4897              		.cfi_def_cfa_offset 24
 4898 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 148


 4899              	.LCFI175:
 4900              		.cfi_def_cfa_register 7
 4901 0006 7860     		str	r0, [r7, #4]
3256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 4902              		.loc 1 3256 2
 4903 0008 7B68     		ldr	r3, [r7, #4]
 4904 000a 002B     		cmp	r3, #0
 4905 000c 0AD1     		bne	.L303
 4906              	.LBB208:
 4907              	.LBB209:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4908              		.loc 2 195 2
 4909              		.syntax unified
 4910              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4911 000e 4FF05003 			mov r3, #80												
 4912 0012 83F31188 		msr basepri, r3											
 4913 0016 BFF36F8F 		isb														
 4914 001a BFF34F8F 		dsb														
 4915              	
 4916              	@ 0 "" 2
 4917              		.thumb
 4918              		.syntax unified
 4919 001e FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4920              		.loc 2 203 1
 4921 0020 00BF     		nop
 4922              	.L304:
 4923              	.LBE209:
 4924              	.LBE208:
 4925              		.loc 1 3256 2 discriminator 1
 4926 0022 FEE7     		b	.L304
 4927              	.L303:
3257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 4928              		.loc 1 3257 2
 4929 0024 FFF7FEFF 		bl	vPortEnterCritical
3258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
 4930              		.loc 1 3259 29
 4931 0028 064B     		ldr	r3, .L305
 4932 002a 1A68     		ldr	r2, [r3]
 4933 002c 7B68     		ldr	r3, [r7, #4]
 4934 002e 1A60     		str	r2, [r3]
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 4935              		.loc 1 3260 30
 4936 0030 054B     		ldr	r3, .L305+4
 4937 0032 1A68     		ldr	r2, [r3]
 4938 0034 7B68     		ldr	r3, [r7, #4]
 4939 0036 5A60     		str	r2, [r3, #4]
3261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 4940              		.loc 1 3262 2
 4941 0038 FFF7FEFF 		bl	vPortExitCritical
3263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4942              		.loc 1 3263 1
 4943 003c 00BF     		nop
 4944 003e 1037     		adds	r7, r7, #16
 4945              	.LCFI176:
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 149


 4946              		.cfi_def_cfa_offset 8
 4947 0040 BD46     		mov	sp, r7
 4948              	.LCFI177:
 4949              		.cfi_def_cfa_register 13
 4950              		@ sp needed
 4951 0042 80BD     		pop	{r7, pc}
 4952              	.L306:
 4953              		.align	2
 4954              	.L305:
 4955 0044 00000000 		.word	xNumOfOverflows
 4956 0048 00000000 		.word	xTickCount
 4957              		.cfi_endproc
 4958              	.LFE38:
 4960              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 4961              		.align	1
 4962              		.global	vTaskInternalSetTimeOutState
 4963              		.syntax unified
 4964              		.thumb
 4965              		.thumb_func
 4966              		.fpu fpv4-sp-d16
 4968              	vTaskInternalSetTimeOutState:
 4969              	.LFB39:
3264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4970              		.loc 1 3267 1
 4971              		.cfi_startproc
 4972              		@ args = 0, pretend = 0, frame = 8
 4973              		@ frame_needed = 1, uses_anonymous_args = 0
 4974              		@ link register save eliminated.
 4975 0000 80B4     		push	{r7}
 4976              	.LCFI178:
 4977              		.cfi_def_cfa_offset 4
 4978              		.cfi_offset 7, -4
 4979 0002 83B0     		sub	sp, sp, #12
 4980              	.LCFI179:
 4981              		.cfi_def_cfa_offset 16
 4982 0004 00AF     		add	r7, sp, #0
 4983              	.LCFI180:
 4984              		.cfi_def_cfa_register 7
 4985 0006 7860     		str	r0, [r7, #4]
3268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
3269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 4986              		.loc 1 3269 28
 4987 0008 064B     		ldr	r3, .L308
 4988 000a 1A68     		ldr	r2, [r3]
 4989 000c 7B68     		ldr	r3, [r7, #4]
 4990 000e 1A60     		str	r2, [r3]
3270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 4991              		.loc 1 3270 29
 4992 0010 054B     		ldr	r3, .L308+4
 4993 0012 1A68     		ldr	r2, [r3]
 4994 0014 7B68     		ldr	r3, [r7, #4]
 4995 0016 5A60     		str	r2, [r3, #4]
3271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4996              		.loc 1 3271 1
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 150


 4997 0018 00BF     		nop
 4998 001a 0C37     		adds	r7, r7, #12
 4999              	.LCFI181:
 5000              		.cfi_def_cfa_offset 4
 5001 001c BD46     		mov	sp, r7
 5002              	.LCFI182:
 5003              		.cfi_def_cfa_register 13
 5004              		@ sp needed
 5005 001e 5DF8047B 		ldr	r7, [sp], #4
 5006              	.LCFI183:
 5007              		.cfi_restore 7
 5008              		.cfi_def_cfa_offset 0
 5009 0022 7047     		bx	lr
 5010              	.L309:
 5011              		.align	2
 5012              	.L308:
 5013 0024 00000000 		.word	xNumOfOverflows
 5014 0028 00000000 		.word	xTickCount
 5015              		.cfi_endproc
 5016              	.LFE39:
 5018              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 5019              		.align	1
 5020              		.global	xTaskCheckForTimeOut
 5021              		.syntax unified
 5022              		.thumb
 5023              		.thumb_func
 5024              		.fpu fpv4-sp-d16
 5026              	xTaskCheckForTimeOut:
 5027              	.LFB40:
3272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 5028              		.loc 1 3275 1
 5029              		.cfi_startproc
 5030              		@ args = 0, pretend = 0, frame = 32
 5031              		@ frame_needed = 1, uses_anonymous_args = 0
 5032 0000 80B5     		push	{r7, lr}
 5033              	.LCFI184:
 5034              		.cfi_def_cfa_offset 8
 5035              		.cfi_offset 7, -8
 5036              		.cfi_offset 14, -4
 5037 0002 88B0     		sub	sp, sp, #32
 5038              	.LCFI185:
 5039              		.cfi_def_cfa_offset 40
 5040 0004 00AF     		add	r7, sp, #0
 5041              	.LCFI186:
 5042              		.cfi_def_cfa_register 7
 5043 0006 7860     		str	r0, [r7, #4]
 5044 0008 3960     		str	r1, [r7]
3276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 5045              		.loc 1 3278 2
 5046 000a 7B68     		ldr	r3, [r7, #4]
 5047 000c 002B     		cmp	r3, #0
 5048 000e 0AD1     		bne	.L311
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 151


 5049              	.LBB210:
 5050              	.LBB211:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5051              		.loc 2 195 2
 5052              		.syntax unified
 5053              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5054 0010 4FF05003 			mov r3, #80												
 5055 0014 83F31188 		msr basepri, r3											
 5056 0018 BFF36F8F 		isb														
 5057 001c BFF34F8F 		dsb														
 5058              	
 5059              	@ 0 "" 2
 5060              		.thumb
 5061              		.syntax unified
 5062 0020 3B61     		str	r3, [r7, #16]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 5063              		.loc 2 203 1
 5064 0022 00BF     		nop
 5065              	.L312:
 5066              	.LBE211:
 5067              	.LBE210:
 5068              		.loc 1 3278 2 discriminator 1
 5069 0024 FEE7     		b	.L312
 5070              	.L311:
3279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 5071              		.loc 1 3279 2
 5072 0026 3B68     		ldr	r3, [r7]
 5073 0028 002B     		cmp	r3, #0
 5074 002a 0AD1     		bne	.L313
 5075              	.LBB212:
 5076              	.LBB213:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5077              		.loc 2 195 2
 5078              		.syntax unified
 5079              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5080 002c 4FF05003 			mov r3, #80												
 5081 0030 83F31188 		msr basepri, r3											
 5082 0034 BFF36F8F 		isb														
 5083 0038 BFF34F8F 		dsb														
 5084              	
 5085              	@ 0 "" 2
 5086              		.thumb
 5087              		.syntax unified
 5088 003c FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 5089              		.loc 2 203 1
 5090 003e 00BF     		nop
 5091              	.L314:
 5092              	.LBE213:
 5093              	.LBE212:
 5094              		.loc 1 3279 2 discriminator 2
 5095 0040 FEE7     		b	.L314
 5096              	.L313:
3280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 5097              		.loc 1 3281 2
 5098 0042 FFF7FEFF 		bl	vPortEnterCritical
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 152


 5099              	.LBB214:
3282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
 5100              		.loc 1 3284 20
 5101 0046 1D4B     		ldr	r3, .L320
 5102 0048 1B68     		ldr	r3, [r3]
 5103 004a BB61     		str	r3, [r7, #24]
3285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 5104              		.loc 1 3285 62
 5105 004c 7B68     		ldr	r3, [r7, #4]
 5106 004e 5B68     		ldr	r3, [r3, #4]
 5107              		.loc 1 3285 20
 5108 0050 BA69     		ldr	r2, [r7, #24]
 5109 0052 D31A     		subs	r3, r2, r3
 5110 0054 7B61     		str	r3, [r7, #20]
3286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
3289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				but has the same result. */
3292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
 5111              		.loc 1 3299 8
 5112 0056 3B68     		ldr	r3, [r7]
 5113 0058 1B68     		ldr	r3, [r3]
 5114              		.loc 1 3299 6
 5115 005a B3F1FF3F 		cmp	r3, #-1
 5116 005e 02D1     		bne	.L315
3300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				specified is the maximum block time then the task should block
3303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				indefinitely, and therefore never time out. */
3304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
 5117              		.loc 1 3304 13
 5118 0060 0023     		movs	r3, #0
 5119 0062 FB61     		str	r3, [r7, #28]
 5120 0064 23E0     		b	.L316
 5121              	.L315:
3305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
 5122              		.loc 1 3309 37
 5123 0066 7B68     		ldr	r3, [r7, #4]
 5124 0068 1A68     		ldr	r2, [r3]
 5125              		.loc 1 3309 25
 5126 006a 154B     		ldr	r3, .L320+4
 5127 006c 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 153


 5128              		.loc 1 3309 5
 5129 006e 9A42     		cmp	r2, r3
 5130 0070 07D0     		beq	.L317
 5131              		.loc 1 3309 89 discriminator 1
 5132 0072 7B68     		ldr	r3, [r7, #4]
 5133 0074 5B68     		ldr	r3, [r3, #4]
 5134              		.loc 1 3309 56 discriminator 1
 5135 0076 BA69     		ldr	r2, [r7, #24]
 5136 0078 9A42     		cmp	r2, r3
 5137 007a 02D3     		bcc	.L317
3310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which
3312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			was called. */
3316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 5138              		.loc 1 3316 12
 5139 007c 0123     		movs	r3, #1
 5140 007e FB61     		str	r3, [r7, #28]
 5141 0080 15E0     		b	.L316
 5142              	.L317:
3317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
 5143              		.loc 1 3318 27
 5144 0082 3B68     		ldr	r3, [r7]
 5145 0084 1B68     		ldr	r3, [r3]
 5146              		.loc 1 3318 10
 5147 0086 7A69     		ldr	r2, [r7, #20]
 5148 0088 9A42     		cmp	r2, r3
 5149 008a 0BD2     		bcs	.L318
3319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
 5150              		.loc 1 3321 19
 5151 008c 3B68     		ldr	r3, [r7]
 5152 008e 1A68     		ldr	r2, [r3]
 5153 0090 7B69     		ldr	r3, [r7, #20]
 5154 0092 D21A     		subs	r2, r2, r3
 5155 0094 3B68     		ldr	r3, [r7]
 5156 0096 1A60     		str	r2, [r3]
3322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 5157              		.loc 1 3322 4
 5158 0098 7868     		ldr	r0, [r7, #4]
 5159 009a FFF7FEFF 		bl	vTaskInternalSetTimeOutState
3323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 5160              		.loc 1 3323 12
 5161 009e 0023     		movs	r3, #0
 5162 00a0 FB61     		str	r3, [r7, #28]
 5163 00a2 04E0     		b	.L316
 5164              	.L318:
3324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait = 0;
 5165              		.loc 1 3327 19
 5166 00a4 3B68     		ldr	r3, [r7]
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 154


 5167 00a6 0022     		movs	r2, #0
 5168 00a8 1A60     		str	r2, [r3]
3328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 5169              		.loc 1 3328 12
 5170 00aa 0123     		movs	r3, #1
 5171 00ac FB61     		str	r3, [r7, #28]
 5172              	.L316:
 5173              	.LBE214:
3329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 5174              		.loc 1 3331 2
 5175 00ae FFF7FEFF 		bl	vPortExitCritical
3332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 5176              		.loc 1 3333 9
 5177 00b2 FB69     		ldr	r3, [r7, #28]
3334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 5178              		.loc 1 3334 1
 5179 00b4 1846     		mov	r0, r3
 5180 00b6 2037     		adds	r7, r7, #32
 5181              	.LCFI187:
 5182              		.cfi_def_cfa_offset 8
 5183 00b8 BD46     		mov	sp, r7
 5184              	.LCFI188:
 5185              		.cfi_def_cfa_register 13
 5186              		@ sp needed
 5187 00ba 80BD     		pop	{r7, pc}
 5188              	.L321:
 5189              		.align	2
 5190              	.L320:
 5191 00bc 00000000 		.word	xTickCount
 5192 00c0 00000000 		.word	xNumOfOverflows
 5193              		.cfi_endproc
 5194              	.LFE40:
 5196              		.section	.text.vTaskMissedYield,"ax",%progbits
 5197              		.align	1
 5198              		.global	vTaskMissedYield
 5199              		.syntax unified
 5200              		.thumb
 5201              		.thumb_func
 5202              		.fpu fpv4-sp-d16
 5204              	vTaskMissedYield:
 5205              	.LFB41:
3335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
3338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 5206              		.loc 1 3338 1
 5207              		.cfi_startproc
 5208              		@ args = 0, pretend = 0, frame = 0
 5209              		@ frame_needed = 1, uses_anonymous_args = 0
 5210              		@ link register save eliminated.
 5211 0000 80B4     		push	{r7}
 5212              	.LCFI189:
 5213              		.cfi_def_cfa_offset 4
 5214              		.cfi_offset 7, -4
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 155


 5215 0002 00AF     		add	r7, sp, #0
 5216              	.LCFI190:
 5217              		.cfi_def_cfa_register 7
3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
 5218              		.loc 1 3339 16
 5219 0004 034B     		ldr	r3, .L323
 5220 0006 0122     		movs	r2, #1
 5221 0008 1A60     		str	r2, [r3]
3340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 5222              		.loc 1 3340 1
 5223 000a 00BF     		nop
 5224 000c BD46     		mov	sp, r7
 5225              	.LCFI191:
 5226              		.cfi_def_cfa_register 13
 5227              		@ sp needed
 5228 000e 5DF8047B 		ldr	r7, [sp], #4
 5229              	.LCFI192:
 5230              		.cfi_restore 7
 5231              		.cfi_def_cfa_offset 0
 5232 0012 7047     		bx	lr
 5233              	.L324:
 5234              		.align	2
 5235              	.L323:
 5236 0014 00000000 		.word	xYieldPending
 5237              		.cfi_endproc
 5238              	.LFE41:
 5240              		.section	.text.uxTaskGetTaskNumber,"ax",%progbits
 5241              		.align	1
 5242              		.global	uxTaskGetTaskNumber
 5243              		.syntax unified
 5244              		.thumb
 5245              		.thumb_func
 5246              		.fpu fpv4-sp-d16
 5248              	uxTaskGetTaskNumber:
 5249              	.LFB42:
3341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5250              		.loc 1 3346 2
 5251              		.cfi_startproc
 5252              		@ args = 0, pretend = 0, frame = 16
 5253              		@ frame_needed = 1, uses_anonymous_args = 0
 5254              		@ link register save eliminated.
 5255 0000 80B4     		push	{r7}
 5256              	.LCFI193:
 5257              		.cfi_def_cfa_offset 4
 5258              		.cfi_offset 7, -4
 5259 0002 85B0     		sub	sp, sp, #20
 5260              	.LCFI194:
 5261              		.cfi_def_cfa_offset 24
 5262 0004 00AF     		add	r7, sp, #0
 5263              	.LCFI195:
 5264              		.cfi_def_cfa_register 7
 5265 0006 7860     		str	r0, [r7, #4]
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 156


3347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
3349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
 5266              		.loc 1 3350 5
 5267 0008 7B68     		ldr	r3, [r7, #4]
 5268 000a 002B     		cmp	r3, #0
 5269 000c 05D0     		beq	.L326
3351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = xTask;
 5270              		.loc 1 3352 10
 5271 000e 7B68     		ldr	r3, [r7, #4]
 5272 0010 BB60     		str	r3, [r7, #8]
3353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
 5273              		.loc 1 3353 13
 5274 0012 BB68     		ldr	r3, [r7, #8]
 5275 0014 DB6C     		ldr	r3, [r3, #76]
 5276 0016 FB60     		str	r3, [r7, #12]
 5277 0018 01E0     		b	.L327
 5278              	.L326:
3354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = 0U;
 5279              		.loc 1 3357 13
 5280 001a 0023     		movs	r3, #0
 5281 001c FB60     		str	r3, [r7, #12]
 5282              	.L327:
3358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 5283              		.loc 1 3360 10
 5284 001e FB68     		ldr	r3, [r7, #12]
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5285              		.loc 1 3361 2
 5286 0020 1846     		mov	r0, r3
 5287 0022 1437     		adds	r7, r7, #20
 5288              	.LCFI196:
 5289              		.cfi_def_cfa_offset 4
 5290 0024 BD46     		mov	sp, r7
 5291              	.LCFI197:
 5292              		.cfi_def_cfa_register 13
 5293              		@ sp needed
 5294 0026 5DF8047B 		ldr	r7, [sp], #4
 5295              	.LCFI198:
 5296              		.cfi_restore 7
 5297              		.cfi_def_cfa_offset 0
 5298 002a 7047     		bx	lr
 5299              		.cfi_endproc
 5300              	.LFE42:
 5302              		.section	.text.vTaskSetTaskNumber,"ax",%progbits
 5303              		.align	1
 5304              		.global	vTaskSetTaskNumber
 5305              		.syntax unified
 5306              		.thumb
 5307              		.thumb_func
 5308              		.fpu fpv4-sp-d16
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 157


 5310              	vTaskSetTaskNumber:
 5311              	.LFB43:
3362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5312              		.loc 1 3369 2
 5313              		.cfi_startproc
 5314              		@ args = 0, pretend = 0, frame = 16
 5315              		@ frame_needed = 1, uses_anonymous_args = 0
 5316              		@ link register save eliminated.
 5317 0000 80B4     		push	{r7}
 5318              	.LCFI199:
 5319              		.cfi_def_cfa_offset 4
 5320              		.cfi_offset 7, -4
 5321 0002 85B0     		sub	sp, sp, #20
 5322              	.LCFI200:
 5323              		.cfi_def_cfa_offset 24
 5324 0004 00AF     		add	r7, sp, #0
 5325              	.LCFI201:
 5326              		.cfi_def_cfa_register 7
 5327 0006 7860     		str	r0, [r7, #4]
 5328 0008 3960     		str	r1, [r7]
3370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
3371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
 5329              		.loc 1 3372 5
 5330 000a 7B68     		ldr	r3, [r7, #4]
 5331 000c 002B     		cmp	r3, #0
 5332 000e 04D0     		beq	.L331
3373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = xTask;
 5333              		.loc 1 3374 10
 5334 0010 7B68     		ldr	r3, [r7, #4]
 5335 0012 FB60     		str	r3, [r7, #12]
3375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
 5336              		.loc 1 3375 24
 5337 0014 FB68     		ldr	r3, [r7, #12]
 5338 0016 3A68     		ldr	r2, [r7]
 5339 0018 DA64     		str	r2, [r3, #76]
 5340              	.L331:
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5341              		.loc 1 3377 2
 5342 001a 00BF     		nop
 5343 001c 1437     		adds	r7, r7, #20
 5344              	.LCFI202:
 5345              		.cfi_def_cfa_offset 4
 5346 001e BD46     		mov	sp, r7
 5347              	.LCFI203:
 5348              		.cfi_def_cfa_register 13
 5349              		@ sp needed
 5350 0020 5DF8047B 		ldr	r7, [sp], #4
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 158


 5351              	.LCFI204:
 5352              		.cfi_restore 7
 5353              		.cfi_def_cfa_offset 0
 5354 0024 7047     		bx	lr
 5355              		.cfi_endproc
 5356              	.LFE43:
 5358              		.section	.text.prvIdleTask,"ax",%progbits
 5359              		.align	1
 5360              		.syntax unified
 5361              		.thumb
 5362              		.thumb_func
 5363              		.fpu fpv4-sp-d16
 5365              	prvIdleTask:
 5366              	.LFB44:
3378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
3382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
3383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The Idle task.
3384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
3385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
3392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 5367              		.loc 1 3393 1
 5368              		.cfi_startproc
 5369              		@ args = 0, pretend = 0, frame = 16
 5370              		@ frame_needed = 1, uses_anonymous_args = 0
 5371 0000 80B5     		push	{r7, lr}
 5372              	.LCFI205:
 5373              		.cfi_def_cfa_offset 8
 5374              		.cfi_offset 7, -8
 5375              		.cfi_offset 14, -4
 5376 0002 84B0     		sub	sp, sp, #16
 5377              	.LCFI206:
 5378              		.cfi_def_cfa_offset 24
 5379 0004 00AF     		add	r7, sp, #0
 5380              	.LCFI207:
 5381              		.cfi_def_cfa_register 7
 5382 0006 7860     		str	r0, [r7, #4]
 5383              	.L338:
3394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
3395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
3396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	any. */
3403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 159


3404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( ;; )
3406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
 5384              		.loc 1 3409 3
 5385 0008 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
3410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
3415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
3417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD();
3418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
3426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timeslice.
3427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
3429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 5386              		.loc 1 3432 8
 5387 000c 184B     		ldr	r3, .L339
 5388 000e 1B68     		ldr	r3, [r3]
 5389              		.loc 1 3432 6
 5390 0010 012B     		cmp	r3, #1
 5391 0012 07D9     		bls	.L333
3433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskYIELD();
 5392              		.loc 1 3434 5
 5393 0014 174B     		ldr	r3, .L339+4
 5394 0016 4FF08052 		mov	r2, #268435456
 5395 001a 1A60     		str	r2, [r3]
 5396              		.syntax unified
 5397              	@ 3434 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5398 001c BFF34F8F 		dsb
 5399              	@ 0 "" 2
 5400              	@ 3434 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5401 0020 BFF36F8F 		isb
 5402              	@ 0 "" 2
 5403              		.thumb
 5404              		.syntax unified
 5405              	.L333:
 5406              	.LBB215:
3435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 160


3438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
3449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
3450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
3453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		user defined low power mode	implementations require
3459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			test of the expected idle time is performed without the
3467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			valid. */
3469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
 5407              		.loc 1 3469 24
 5408 0024 FFF7FEFF 		bl	prvGetExpectedIdleTime
 5409 0028 F860     		str	r0, [r7, #12]
3470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 5410              		.loc 1 3471 6
 5411 002a FB68     		ldr	r3, [r7, #12]
 5412 002c 012B     		cmp	r3, #1
 5413 002e EBD9     		bls	.L338
3472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
 5414              		.loc 1 3473 5
 5415 0030 FFF7FEFF 		bl	vTaskSuspendAll
3474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					time can be sampled again, and this time its value can
3477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be used. */
3478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
 5416              		.loc 1 3478 6
 5417 0034 104B     		ldr	r3, .L339+8
 5418 0036 1A68     		ldr	r2, [r3]
 5419 0038 104B     		ldr	r3, .L339+12
 5420 003a 1B68     		ldr	r3, [r3]
 5421 003c 9A42     		cmp	r2, r3
 5422 003e 0AD2     		bcs	.L335
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 161


 5423              	.LBB216:
 5424              	.LBB217:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5425              		.loc 2 195 2
 5426              		.syntax unified
 5427              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5428 0040 4FF05003 			mov r3, #80												
 5429 0044 83F31188 		msr basepri, r3											
 5430 0048 BFF36F8F 		isb														
 5431 004c BFF34F8F 		dsb														
 5432              	
 5433              	@ 0 "" 2
 5434              		.thumb
 5435              		.syntax unified
 5436 0050 BB60     		str	r3, [r7, #8]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 5437              		.loc 2 203 1
 5438 0052 00BF     		nop
 5439              	.L336:
 5440              	.LBE217:
 5441              	.LBE216:
 5442              		.loc 1 3478 6 discriminator 1
 5443 0054 FEE7     		b	.L336
 5444              	.L335:
3479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
 5445              		.loc 1 3479 26
 5446 0056 FFF7FEFF 		bl	prvGetExpectedIdleTime
 5447 005a F860     		str	r0, [r7, #12]
3480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if the application does not want
3483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 5448              		.loc 1 3486 8
 5449 005c FB68     		ldr	r3, [r7, #12]
 5450 005e 012B     		cmp	r3, #1
 5451 0060 02D9     		bls	.L337
3487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 5452              		.loc 1 3489 7
 5453 0062 F868     		ldr	r0, [r7, #12]
 5454 0064 FFF7FEFF 		bl	vPortSuppressTicksAndSleep
 5455              	.L337:
3490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) xTaskResumeAll();
 5456              		.loc 1 3497 14
 5457 0068 FFF7FEFF 		bl	xTaskResumeAll
 5458              	.LBE215:
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 162


3409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5459              		.loc 1 3409 3
 5460 006c CCE7     		b	.L338
 5461              	.L340:
 5462 006e 00BF     		.align	2
 5463              	.L339:
 5464 0070 00000000 		.word	pxReadyTasksLists
 5465 0074 04ED00E0 		.word	-536810236
 5466 0078 00000000 		.word	xNextTaskUnblockTime
 5467 007c 00000000 		.word	xTickCount
 5468              		.cfi_endproc
 5469              	.LFE44:
 5471              		.section	.text.eTaskConfirmSleepModeStatus,"ax",%progbits
 5472              		.align	1
 5473              		.global	eTaskConfirmSleepModeStatus
 5474              		.syntax unified
 5475              		.thumb
 5476              		.thumb_func
 5477              		.fpu fpv4-sp-d16
 5479              	eTaskConfirmSleepModeStatus:
 5480              	.LFB45:
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5481              		.loc 1 3512 2
 5482              		.cfi_startproc
 5483              		@ args = 0, pretend = 0, frame = 8
 5484              		@ frame_needed = 1, uses_anonymous_args = 0
 5485              		@ link register save eliminated.
 5486 0000 80B4     		push	{r7}
 5487              	.LCFI208:
 5488              		.cfi_def_cfa_offset 4
 5489              		.cfi_offset 7, -4
 5490 0002 83B0     		sub	sp, sp, #12
 5491              	.LCFI209:
 5492              		.cfi_def_cfa_offset 16
 5493 0004 00AF     		add	r7, sp, #0
 5494              	.LCFI210:
 5495              		.cfi_def_cfa_register 7
3513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
 5496              		.loc 1 3514 20
 5497 0006 0123     		movs	r3, #1
 5498 0008 3B60     		str	r3, [r7]
3515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 163


 5499              		.loc 1 3515 19
 5500 000a 0123     		movs	r3, #1
 5501 000c FB71     		strb	r3, [r7, #7]
3516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function must be called from a critical section. */
3518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 5502              		.loc 1 3519 7
 5503 000e 0F4B     		ldr	r3, .L346
 5504 0010 1B68     		ldr	r3, [r3]
 5505              		.loc 1 3519 5
 5506 0012 002B     		cmp	r3, #0
 5507 0014 02D0     		beq	.L342
3520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
 5508              		.loc 1 3522 12
 5509 0016 0023     		movs	r3, #0
 5510 0018 FB71     		strb	r3, [r7, #7]
 5511 001a 10E0     		b	.L343
 5512              	.L342:
3523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
 5513              		.loc 1 3524 26
 5514 001c 0C4B     		ldr	r3, .L346+4
 5515 001e 1B68     		ldr	r3, [r3]
 5516              		.loc 1 3524 10
 5517 0020 002B     		cmp	r3, #0
 5518 0022 02D0     		beq	.L344
3525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
 5519              		.loc 1 3527 12
 5520 0024 0023     		movs	r3, #0
 5521 0026 FB71     		strb	r3, [r7, #7]
 5522 0028 09E0     		b	.L343
 5523              	.L344:
3528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupts. */
3535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
 5524              		.loc 1 3535 8
 5525 002a 0A4B     		ldr	r3, .L346+8
 5526 002c 1A68     		ldr	r2, [r3]
 5527              		.loc 1 3535 83
 5528 002e 0A4B     		ldr	r3, .L346+12
 5529 0030 1968     		ldr	r1, [r3]
 5530 0032 3B68     		ldr	r3, [r7]
 5531 0034 CB1A     		subs	r3, r1, r3
 5532              		.loc 1 3535 6
 5533 0036 9A42     		cmp	r2, r3
 5534 0038 01D1     		bne	.L343
3536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 164


3537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
 5535              		.loc 1 3537 13
 5536 003a 0223     		movs	r3, #2
 5537 003c FB71     		strb	r3, [r7, #7]
 5538              	.L343:
3538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
 5539              		.loc 1 3545 10
 5540 003e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
3546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5541              		.loc 1 3546 2
 5542 0040 1846     		mov	r0, r3
 5543 0042 0C37     		adds	r7, r7, #12
 5544              	.LCFI211:
 5545              		.cfi_def_cfa_offset 4
 5546 0044 BD46     		mov	sp, r7
 5547              	.LCFI212:
 5548              		.cfi_def_cfa_register 13
 5549              		@ sp needed
 5550 0046 5DF8047B 		ldr	r7, [sp], #4
 5551              	.LCFI213:
 5552              		.cfi_restore 7
 5553              		.cfi_def_cfa_offset 0
 5554 004a 7047     		bx	lr
 5555              	.L347:
 5556              		.align	2
 5557              	.L346:
 5558 004c 00000000 		.word	xPendingReadyList
 5559 0050 00000000 		.word	xYieldPending
 5560 0054 00000000 		.word	xSuspendedTaskList
 5561 0058 00000000 		.word	uxCurrentNumberOfTasks
 5562              		.cfi_endproc
 5563              	.LFE45:
 5565              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 5566              		.align	1
 5567              		.syntax unified
 5568              		.thumb
 5569              		.thumb_func
 5570              		.fpu fpv4-sp-d16
 5572              	prvInitialiseTaskLists:
 5573              	.LFB46:
3547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 165


3557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB != NULL );
3561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvReturn = NULL;
3573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = NULL;
3583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pvReturn;
3586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task. */
3599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
3608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 5574              		.loc 1 3608 1
 5575              		.cfi_startproc
 5576              		@ args = 0, pretend = 0, frame = 8
 5577              		@ frame_needed = 1, uses_anonymous_args = 0
 5578 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 166


 5579              	.LCFI214:
 5580              		.cfi_def_cfa_offset 8
 5581              		.cfi_offset 7, -8
 5582              		.cfi_offset 14, -4
 5583 0002 82B0     		sub	sp, sp, #8
 5584              	.LCFI215:
 5585              		.cfi_def_cfa_offset 16
 5586 0004 00AF     		add	r7, sp, #0
 5587              	.LCFI216:
 5588              		.cfi_def_cfa_register 7
3609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
3610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
 5589              		.loc 1 3611 18
 5590 0006 0023     		movs	r3, #0
 5591 0008 7B60     		str	r3, [r7, #4]
 5592              		.loc 1 3611 2
 5593 000a 0CE0     		b	.L349
 5594              	.L350:
3612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 5595              		.loc 1 3613 3 discriminator 3
 5596 000c 7A68     		ldr	r2, [r7, #4]
 5597 000e 1346     		mov	r3, r2
 5598 0010 9B00     		lsls	r3, r3, #2
 5599 0012 1344     		add	r3, r3, r2
 5600 0014 9B00     		lsls	r3, r3, #2
 5601 0016 124A     		ldr	r2, .L351
 5602 0018 1344     		add	r3, r3, r2
 5603 001a 1846     		mov	r0, r3
 5604 001c FFF7FEFF 		bl	vListInitialise
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5605              		.loc 1 3611 101 discriminator 3
 5606 0020 7B68     		ldr	r3, [r7, #4]
 5607 0022 0133     		adds	r3, r3, #1
 5608 0024 7B60     		str	r3, [r7, #4]
 5609              	.L349:
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5610              		.loc 1 3611 2 discriminator 1
 5611 0026 7B68     		ldr	r3, [r7, #4]
 5612 0028 372B     		cmp	r3, #55
 5613 002a EFD9     		bls	.L350
3614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
 5614              		.loc 1 3616 2
 5615 002c 0D48     		ldr	r0, .L351+4
 5616 002e FFF7FEFF 		bl	vListInitialise
3617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 5617              		.loc 1 3617 2
 5618 0032 0D48     		ldr	r0, .L351+8
 5619 0034 FFF7FEFF 		bl	vListInitialise
3618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 5620              		.loc 1 3618 2
 5621 0038 0C48     		ldr	r0, .L351+12
 5622 003a FFF7FEFF 		bl	vListInitialise
3619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 167


3620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
 5623              		.loc 1 3622 3
 5624 003e 0C48     		ldr	r0, .L351+16
 5625 0040 FFF7FEFF 		bl	vListInitialise
3623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
 5626              		.loc 1 3628 3
 5627 0044 0B48     		ldr	r0, .L351+20
 5628 0046 FFF7FEFF 		bl	vListInitialise
3629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	using list2. */
3634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
 5629              		.loc 1 3634 20
 5630 004a 0B4B     		ldr	r3, .L351+24
 5631 004c 054A     		ldr	r2, .L351+4
 5632 004e 1A60     		str	r2, [r3]
3635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 5633              		.loc 1 3635 28
 5634 0050 0A4B     		ldr	r3, .L351+28
 5635 0052 054A     		ldr	r2, .L351+8
 5636 0054 1A60     		str	r2, [r3]
3636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 5637              		.loc 1 3636 1
 5638 0056 00BF     		nop
 5639 0058 0837     		adds	r7, r7, #8
 5640              	.LCFI217:
 5641              		.cfi_def_cfa_offset 8
 5642 005a BD46     		mov	sp, r7
 5643              	.LCFI218:
 5644              		.cfi_def_cfa_register 13
 5645              		@ sp needed
 5646 005c 80BD     		pop	{r7, pc}
 5647              	.L352:
 5648 005e 00BF     		.align	2
 5649              	.L351:
 5650 0060 00000000 		.word	pxReadyTasksLists
 5651 0064 00000000 		.word	xDelayedTaskList1
 5652 0068 00000000 		.word	xDelayedTaskList2
 5653 006c 00000000 		.word	xPendingReadyList
 5654 0070 00000000 		.word	xTasksWaitingTermination
 5655 0074 00000000 		.word	xSuspendedTaskList
 5656 0078 00000000 		.word	pxDelayedTaskList
 5657 007c 00000000 		.word	pxOverflowDelayedTaskList
 5658              		.cfi_endproc
 5659              	.LFE46:
 5661              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 5662              		.align	1
 5663              		.syntax unified
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 168


 5664              		.thumb
 5665              		.thumb_func
 5666              		.fpu fpv4-sp-d16
 5668              	prvCheckTasksWaitingTermination:
 5669              	.LFB47:
3637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 5670              		.loc 1 3640 1
 5671              		.cfi_startproc
 5672              		@ args = 0, pretend = 0, frame = 8
 5673              		@ frame_needed = 1, uses_anonymous_args = 0
 5674 0000 80B5     		push	{r7, lr}
 5675              	.LCFI219:
 5676              		.cfi_def_cfa_offset 8
 5677              		.cfi_offset 7, -8
 5678              		.cfi_offset 14, -4
 5679 0002 82B0     		sub	sp, sp, #8
 5680              	.LCFI220:
 5681              		.cfi_def_cfa_offset 16
 5682 0004 00AF     		add	r7, sp, #0
 5683              	.LCFI221:
 5684              		.cfi_def_cfa_register 7
 5685              	.LBB218:
3641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TCB_t *pxTCB;
3647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
3649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		being called too often in the idle task. */
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 5686              		.loc 1 3650 8
 5687 0006 19E0     		b	.L354
 5688              	.L355:
3651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 5689              		.loc 1 3652 4
 5690 0008 FFF7FEFF 		bl	vPortEnterCritical
3653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is u
 5691              		.loc 1 3654 13
 5692 000c 104B     		ldr	r3, .L356
 5693 000e DB68     		ldr	r3, [r3, #12]
 5694              		.loc 1 3654 11
 5695 0010 DB68     		ldr	r3, [r3, #12]
 5696 0012 7B60     		str	r3, [r7, #4]
3655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 5697              		.loc 1 3655 14
 5698 0014 7B68     		ldr	r3, [r7, #4]
 5699 0016 0433     		adds	r3, r3, #4
 5700 0018 1846     		mov	r0, r3
 5701 001a FFF7FEFF 		bl	uxListRemove
3656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 169


 5702              		.loc 1 3656 5
 5703 001e 0D4B     		ldr	r3, .L356+4
 5704 0020 1B68     		ldr	r3, [r3]
 5705 0022 013B     		subs	r3, r3, #1
 5706 0024 0B4A     		ldr	r2, .L356+4
 5707 0026 1360     		str	r3, [r2]
3657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 5708              		.loc 1 3657 5
 5709 0028 0B4B     		ldr	r3, .L356+8
 5710 002a 1B68     		ldr	r3, [r3]
 5711 002c 013B     		subs	r3, r3, #1
 5712 002e 0A4A     		ldr	r2, .L356+8
 5713 0030 1360     		str	r3, [r2]
3658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 5714              		.loc 1 3659 4
 5715 0032 FFF7FEFF 		bl	vPortExitCritical
3660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvDeleteTCB( pxTCB );
 5716              		.loc 1 3661 4
 5717 0036 7868     		ldr	r0, [r7, #4]
 5718 0038 FFF7FEFF 		bl	prvDeleteTCB
 5719              	.L354:
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5720              		.loc 1 3650 39
 5721 003c 064B     		ldr	r3, .L356+8
 5722 003e 1B68     		ldr	r3, [r3]
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5723              		.loc 1 3650 8
 5724 0040 002B     		cmp	r3, #0
 5725 0042 E1D1     		bne	.L355
 5726              	.LBE218:
3662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 5727              		.loc 1 3665 1
 5728 0044 00BF     		nop
 5729 0046 00BF     		nop
 5730 0048 0837     		adds	r7, r7, #8
 5731              	.LCFI222:
 5732              		.cfi_def_cfa_offset 8
 5733 004a BD46     		mov	sp, r7
 5734              	.LCFI223:
 5735              		.cfi_def_cfa_register 13
 5736              		@ sp needed
 5737 004c 80BD     		pop	{r7, pc}
 5738              	.L357:
 5739 004e 00BF     		.align	2
 5740              	.L356:
 5741 0050 00000000 		.word	xTasksWaitingTermination
 5742 0054 00000000 		.word	uxCurrentNumberOfTasks
 5743 0058 00000000 		.word	uxDeletedTasksWaitingCleanUp
 5744              		.cfi_endproc
 5745              	.LFE47:
 5747              		.section	.text.vTaskGetInfo,"ax",%progbits
 5748              		.align	1
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 170


 5749              		.global	vTaskGetInfo
 5750              		.syntax unified
 5751              		.thumb
 5752              		.thumb_func
 5753              		.fpu fpv4-sp-d16
 5755              	vTaskGetInfo:
 5756              	.LFB48:
3666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5757              		.loc 1 3671 2
 5758              		.cfi_startproc
 5759              		@ args = 0, pretend = 0, frame = 24
 5760              		@ frame_needed = 1, uses_anonymous_args = 0
 5761 0000 80B5     		push	{r7, lr}
 5762              	.LCFI224:
 5763              		.cfi_def_cfa_offset 8
 5764              		.cfi_offset 7, -8
 5765              		.cfi_offset 14, -4
 5766 0002 86B0     		sub	sp, sp, #24
 5767              	.LCFI225:
 5768              		.cfi_def_cfa_offset 32
 5769 0004 00AF     		add	r7, sp, #0
 5770              	.LCFI226:
 5771              		.cfi_def_cfa_register 7
 5772 0006 F860     		str	r0, [r7, #12]
 5773 0008 B960     		str	r1, [r7, #8]
 5774 000a 7A60     		str	r2, [r7, #4]
 5775 000c FB70     		strb	r3, [r7, #3]
3672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 5776              		.loc 1 3675 11
 5777 000e FB68     		ldr	r3, [r7, #12]
 5778 0010 002B     		cmp	r3, #0
 5779 0012 02D1     		bne	.L359
 5780              		.loc 1 3675 11 is_stmt 0 discriminator 1
 5781 0014 2C4B     		ldr	r3, .L368
 5782 0016 1B68     		ldr	r3, [r3]
 5783 0018 00E0     		b	.L360
 5784              	.L359:
 5785              		.loc 1 3675 11 discriminator 2
 5786 001a FB68     		ldr	r3, [r7, #12]
 5787              	.L360:
 5788              		.loc 1 3675 9 is_stmt 1 discriminator 4
 5789 001c 7B61     		str	r3, [r7, #20]
3676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 5790              		.loc 1 3677 25 discriminator 4
 5791 001e BB68     		ldr	r3, [r7, #8]
 5792 0020 7A69     		ldr	r2, [r7, #20]
 5793 0022 1A60     		str	r2, [r3]
3678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 171


 5794              		.loc 1 3678 47 discriminator 4
 5795 0024 7B69     		ldr	r3, [r7, #20]
 5796 0026 03F13402 		add	r2, r3, #52
 5797              		.loc 1 3678 28 discriminator 4
 5798 002a BB68     		ldr	r3, [r7, #8]
 5799 002c 5A60     		str	r2, [r3, #4]
3679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 5800              		.loc 1 3679 42 discriminator 4
 5801 002e 7B69     		ldr	r3, [r7, #20]
 5802 0030 DA6A     		ldr	r2, [r3, #44]
 5803              		.loc 1 3679 35 discriminator 4
 5804 0032 BB68     		ldr	r3, [r7, #8]
 5805 0034 1A61     		str	r2, [r3, #16]
3680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 5806              		.loc 1 3680 36 discriminator 4
 5807 0036 7B69     		ldr	r3, [r7, #20]
 5808 0038 1A6B     		ldr	r2, [r3, #48]
 5809              		.loc 1 3680 29 discriminator 4
 5810 003a BB68     		ldr	r3, [r7, #8]
 5811 003c DA61     		str	r2, [r3, #28]
3681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 5812              		.loc 1 3681 36 discriminator 4
 5813 003e 7B69     		ldr	r3, [r7, #20]
 5814 0040 9A6C     		ldr	r2, [r3, #72]
 5815              		.loc 1 3681 29 discriminator 4
 5816 0042 BB68     		ldr	r3, [r7, #8]
 5817 0044 9A60     		str	r2, [r3, #8]
3682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 5818              		.loc 1 3685 40 discriminator 4
 5819 0046 7B69     		ldr	r3, [r7, #20]
 5820 0048 1A6D     		ldr	r2, [r3, #80]
 5821              		.loc 1 3685 33 discriminator 4
 5822 004a BB68     		ldr	r3, [r7, #8]
 5823 004c 5A61     		str	r2, [r3, #20]
3686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 5824              		.loc 1 3695 42 discriminator 4
 5825 004e 7B69     		ldr	r3, [r7, #20]
 5826 0050 9A6D     		ldr	r2, [r3, #88]
 5827              		.loc 1 3695 35 discriminator 4
 5828 0052 BB68     		ldr	r3, [r7, #8]
 5829 0054 9A61     		str	r2, [r3, #24]
3696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 172


3700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
3704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		state is just set to whatever is passed in. */
3706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( eState != eInvalid )
 5830              		.loc 1 3706 5 discriminator 4
 5831 0056 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 5832 0058 052B     		cmp	r3, #5
 5833 005a 1AD0     		beq	.L361
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 5834              		.loc 1 3708 14
 5835 005c 1A4B     		ldr	r3, .L368
 5836 005e 1B68     		ldr	r3, [r3]
 5837              		.loc 1 3708 6
 5838 0060 7A69     		ldr	r2, [r7, #20]
 5839 0062 9A42     		cmp	r2, r3
 5840 0064 03D1     		bne	.L362
3709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
 5841              		.loc 1 3710 33
 5842 0066 BB68     		ldr	r3, [r7, #8]
 5843 0068 0022     		movs	r2, #0
 5844 006a 1A73     		strb	r2, [r3, #12]
 5845 006c 18E0     		b	.L363
 5846              	.L362:
3711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
 5847              		.loc 1 3714 33
 5848 006e BB68     		ldr	r3, [r7, #8]
 5849 0070 FA78     		ldrb	r2, [r7, #3]
 5850 0072 1A73     		strb	r2, [r3, #12]
3715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the task is in the suspended list then there is a
3719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it should be reported as being in the Blocked state. */
3721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( eState == eSuspended )
 5851              		.loc 1 3721 8
 5852 0074 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 5853 0076 032B     		cmp	r3, #3
 5854 0078 12D1     		bne	.L363
3722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						vTaskSuspendAll();
 5855              		.loc 1 3723 7
 5856 007a FFF7FEFF 		bl	vTaskSuspendAll
3724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
3725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 5857              		.loc 1 3725 12
 5858 007e 7B69     		ldr	r3, [r7, #20]
 5859 0080 9B6A     		ldr	r3, [r3, #40]
 5860              		.loc 1 3725 10
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 173


 5861 0082 002B     		cmp	r3, #0
 5862 0084 02D0     		beq	.L364
3726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
3727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
 5863              		.loc 1 3727 37
 5864 0086 BB68     		ldr	r3, [r7, #8]
 5865 0088 0222     		movs	r2, #2
 5866 008a 1A73     		strb	r2, [r3, #12]
 5867              	.L364:
3728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
3729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
3730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) xTaskResumeAll();
 5868              		.loc 1 3730 16
 5869 008c FFF7FEFF 		bl	xTaskResumeAll
 5870 0090 06E0     		b	.L363
 5871              	.L361:
3731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 5872              		.loc 1 3738 34
 5873 0092 7869     		ldr	r0, [r7, #20]
 5874 0094 FFF7FEFF 		bl	eTaskGetState
 5875 0098 0346     		mov	r3, r0
 5876 009a 1A46     		mov	r2, r3
 5877              		.loc 1 3738 32
 5878 009c BB68     		ldr	r3, [r7, #8]
 5879 009e 1A73     		strb	r2, [r3, #12]
 5880              	.L363:
3739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
 5881              		.loc 1 3743 5
 5882 00a0 7B68     		ldr	r3, [r7, #4]
 5883 00a2 002B     		cmp	r3, #0
 5884 00a4 09D0     		beq	.L365
3744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
 5885              		.loc 1 3751 89
 5886 00a6 7B69     		ldr	r3, [r7, #20]
 5887 00a8 1B6B     		ldr	r3, [r3, #48]
 5888              		.loc 1 3751 42
 5889 00aa 1846     		mov	r0, r3
 5890 00ac FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 5891 00b0 0346     		mov	r3, r0
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 174


 5892 00b2 1A46     		mov	r2, r3
 5893              		.loc 1 3751 40
 5894 00b4 BB68     		ldr	r3, [r7, #8]
 5895 00b6 1A84     		strh	r2, [r3, #32]	@ movhi
3752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
3754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5896              		.loc 1 3759 2
 5897 00b8 02E0     		b	.L367
 5898              	.L365:
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 5899              		.loc 1 3757 39
 5900 00ba BB68     		ldr	r3, [r7, #8]
 5901 00bc 0022     		movs	r2, #0
 5902 00be 1A84     		strh	r2, [r3, #32]	@ movhi
 5903              	.L367:
 5904              		.loc 1 3759 2
 5905 00c0 00BF     		nop
 5906 00c2 1837     		adds	r7, r7, #24
 5907              	.LCFI227:
 5908              		.cfi_def_cfa_offset 8
 5909 00c4 BD46     		mov	sp, r7
 5910              	.LCFI228:
 5911              		.cfi_def_cfa_register 13
 5912              		@ sp needed
 5913 00c6 80BD     		pop	{r7, pc}
 5914              	.L369:
 5915              		.align	2
 5916              	.L368:
 5917 00c8 00000000 		.word	pxCurrentTCB
 5918              		.cfi_endproc
 5919              	.LFE48:
 5921              		.section	.text.prvListTasksWithinSingleList,"ax",%progbits
 5922              		.align	1
 5923              		.syntax unified
 5924              		.thumb
 5925              		.thumb_func
 5926              		.fpu fpv4-sp-d16
 5928              	prvListTasksWithinSingleList:
 5929              	.LFB49:
3760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5930              		.loc 1 3767 2
 5931              		.cfi_startproc
 5932              		@ args = 0, pretend = 0, frame = 40
 5933              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 175


 5934 0000 80B5     		push	{r7, lr}
 5935              	.LCFI229:
 5936              		.cfi_def_cfa_offset 8
 5937              		.cfi_offset 7, -8
 5938              		.cfi_offset 14, -4
 5939 0002 8AB0     		sub	sp, sp, #40
 5940              	.LCFI230:
 5941              		.cfi_def_cfa_offset 48
 5942 0004 00AF     		add	r7, sp, #0
 5943              	.LCFI231:
 5944              		.cfi_def_cfa_register 7
 5945 0006 F860     		str	r0, [r7, #12]
 5946 0008 B960     		str	r1, [r7, #8]
 5947 000a 1346     		mov	r3, r2
 5948 000c FB71     		strb	r3, [r7, #7]
3768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
3769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
 5949              		.loc 1 3769 14
 5950 000e 0023     		movs	r3, #0
 5951 0010 7B62     		str	r3, [r7, #36]
3770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 5952              		.loc 1 3771 7
 5953 0012 BB68     		ldr	r3, [r7, #8]
 5954 0014 1B68     		ldr	r3, [r3]
 5955              		.loc 1 3771 5
 5956 0016 002B     		cmp	r3, #0
 5957 0018 3FD0     		beq	.L371
 5958              	.LBB219:
3772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is
 5959              		.loc 1 3773 4
 5960 001a BB68     		ldr	r3, [r7, #8]
 5961 001c 3B62     		str	r3, [r7, #32]
 5962 001e 3B6A     		ldr	r3, [r7, #32]
 5963 0020 5B68     		ldr	r3, [r3, #4]
 5964 0022 5A68     		ldr	r2, [r3, #4]
 5965 0024 3B6A     		ldr	r3, [r7, #32]
 5966 0026 5A60     		str	r2, [r3, #4]
 5967 0028 3B6A     		ldr	r3, [r7, #32]
 5968 002a 5A68     		ldr	r2, [r3, #4]
 5969 002c 3B6A     		ldr	r3, [r7, #32]
 5970 002e 0833     		adds	r3, r3, #8
 5971 0030 9A42     		cmp	r2, r3
 5972 0032 04D1     		bne	.L372
 5973              		.loc 1 3773 4 is_stmt 0 discriminator 1
 5974 0034 3B6A     		ldr	r3, [r7, #32]
 5975 0036 5B68     		ldr	r3, [r3, #4]
 5976 0038 5A68     		ldr	r2, [r3, #4]
 5977 003a 3B6A     		ldr	r3, [r7, #32]
 5978 003c 5A60     		str	r2, [r3, #4]
 5979              	.L372:
 5980              		.loc 1 3773 4 discriminator 3
 5981 003e 3B6A     		ldr	r3, [r7, #32]
 5982 0040 5B68     		ldr	r3, [r3, #4]
 5983 0042 DB68     		ldr	r3, [r3, #12]
 5984 0044 FB61     		str	r3, [r7, #28]
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 176


 5985              	.L374:
 5986              	.LBE219:
 5987              	.LBB220:
3774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
3780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
 5988              		.loc 1 3781 5 is_stmt 1
 5989 0046 BB68     		ldr	r3, [r7, #8]
 5990 0048 BB61     		str	r3, [r7, #24]
 5991 004a BB69     		ldr	r3, [r7, #24]
 5992 004c 5B68     		ldr	r3, [r3, #4]
 5993 004e 5A68     		ldr	r2, [r3, #4]
 5994 0050 BB69     		ldr	r3, [r7, #24]
 5995 0052 5A60     		str	r2, [r3, #4]
 5996 0054 BB69     		ldr	r3, [r7, #24]
 5997 0056 5A68     		ldr	r2, [r3, #4]
 5998 0058 BB69     		ldr	r3, [r7, #24]
 5999 005a 0833     		adds	r3, r3, #8
 6000 005c 9A42     		cmp	r2, r3
 6001 005e 04D1     		bne	.L373
 6002              		.loc 1 3781 5 is_stmt 0 discriminator 1
 6003 0060 BB69     		ldr	r3, [r7, #24]
 6004 0062 5B68     		ldr	r3, [r3, #4]
 6005 0064 5A68     		ldr	r2, [r3, #4]
 6006 0066 BB69     		ldr	r3, [r7, #24]
 6007 0068 5A60     		str	r2, [r3, #4]
 6008              	.L373:
 6009              		.loc 1 3781 5 discriminator 3
 6010 006a BB69     		ldr	r3, [r7, #24]
 6011 006c 5B68     		ldr	r3, [r3, #4]
 6012 006e DB68     		ldr	r3, [r3, #12]
 6013 0070 7B61     		str	r3, [r7, #20]
 6014              	.LBE220:
3782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 6015              		.loc 1 3782 67 is_stmt 1 discriminator 3
 6016 0072 7A6A     		ldr	r2, [r7, #36]
 6017 0074 1346     		mov	r3, r2
 6018 0076 DB00     		lsls	r3, r3, #3
 6019 0078 1344     		add	r3, r3, r2
 6020 007a 9B00     		lsls	r3, r3, #2
 6021 007c 1A46     		mov	r2, r3
 6022              		.loc 1 3782 5 discriminator 3
 6023 007e FB68     		ldr	r3, [r7, #12]
 6024 0080 9918     		adds	r1, r3, r2
 6025 0082 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6026 0084 0122     		movs	r2, #1
 6027 0086 7869     		ldr	r0, [r7, #20]
 6028 0088 FFF7FEFF 		bl	vTaskGetInfo
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
 6029              		.loc 1 3783 11 discriminator 3
 6030 008c 7B6A     		ldr	r3, [r7, #36]
 6031 008e 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 177


 6032 0090 7B62     		str	r3, [r7, #36]
3784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 6033              		.loc 1 3784 4 discriminator 3
 6034 0092 7A69     		ldr	r2, [r7, #20]
 6035 0094 FB69     		ldr	r3, [r7, #28]
 6036 0096 9A42     		cmp	r2, r3
 6037 0098 D5D1     		bne	.L374
 6038              	.L371:
3785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
 6039              		.loc 1 3791 10
 6040 009a 7B6A     		ldr	r3, [r7, #36]
3792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6041              		.loc 1 3792 2
 6042 009c 1846     		mov	r0, r3
 6043 009e 2837     		adds	r7, r7, #40
 6044              	.LCFI232:
 6045              		.cfi_def_cfa_offset 8
 6046 00a0 BD46     		mov	sp, r7
 6047              	.LCFI233:
 6048              		.cfi_def_cfa_register 13
 6049              		@ sp needed
 6050 00a2 80BD     		pop	{r7, pc}
 6051              		.cfi_endproc
 6052              	.LFE49:
 6054              		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
 6055              		.align	1
 6056              		.syntax unified
 6057              		.thumb
 6058              		.thumb_func
 6059              		.fpu fpv4-sp-d16
 6061              	prvTaskCheckFreeStackSpace:
 6062              	.LFB50:
3793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
3798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6063              		.loc 1 3800 2
 6064              		.cfi_startproc
 6065              		@ args = 0, pretend = 0, frame = 16
 6066              		@ frame_needed = 1, uses_anonymous_args = 0
 6067              		@ link register save eliminated.
 6068 0000 80B4     		push	{r7}
 6069              	.LCFI234:
 6070              		.cfi_def_cfa_offset 4
 6071              		.cfi_offset 7, -4
 6072 0002 85B0     		sub	sp, sp, #20
 6073              	.LCFI235:
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 178


 6074              		.cfi_def_cfa_offset 24
 6075 0004 00AF     		add	r7, sp, #0
 6076              	.LCFI236:
 6077              		.cfi_def_cfa_register 7
 6078 0006 7860     		str	r0, [r7, #4]
3801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulCount = 0U;
 6079              		.loc 1 3801 11
 6080 0008 0023     		movs	r3, #0
 6081 000a FB60     		str	r3, [r7, #12]
3802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 6082              		.loc 1 3803 8
 6083 000c 05E0     		b	.L377
 6084              	.L378:
3804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 6085              		.loc 1 3805 17
 6086 000e 7B68     		ldr	r3, [r7, #4]
 6087 0010 0133     		adds	r3, r3, #1
 6088 0012 7B60     		str	r3, [r7, #4]
3806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulCount++;
 6089              		.loc 1 3806 11
 6090 0014 FB68     		ldr	r3, [r7, #12]
 6091 0016 0133     		adds	r3, r3, #1
 6092 0018 FB60     		str	r3, [r7, #12]
 6093              	.L377:
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 6094              		.loc 1 3803 10
 6095 001a 7B68     		ldr	r3, [r7, #4]
 6096 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 6097              		.loc 1 3803 8
 6098 001e A52B     		cmp	r3, #165
 6099 0020 F5D0     		beq	.L378
3807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
 6100              		.loc 1 3809 11
 6101 0022 FB68     		ldr	r3, [r7, #12]
 6102 0024 9B08     		lsrs	r3, r3, #2
 6103 0026 FB60     		str	r3, [r7, #12]
3810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( configSTACK_DEPTH_TYPE ) ulCount;
 6104              		.loc 1 3811 10
 6105 0028 FB68     		ldr	r3, [r7, #12]
 6106 002a 9BB2     		uxth	r3, r3
3812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6107              		.loc 1 3812 2
 6108 002c 1846     		mov	r0, r3
 6109 002e 1437     		adds	r7, r7, #20
 6110              	.LCFI237:
 6111              		.cfi_def_cfa_offset 4
 6112 0030 BD46     		mov	sp, r7
 6113              	.LCFI238:
 6114              		.cfi_def_cfa_register 13
 6115              		@ sp needed
 6116 0032 5DF8047B 		ldr	r7, [sp], #4
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 179


 6117              	.LCFI239:
 6118              		.cfi_restore 7
 6119              		.cfi_def_cfa_offset 0
 6120 0036 7047     		bx	lr
 6121              		.cfi_endproc
 6122              	.LFE50:
 6124              		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 6125              		.align	1
 6126              		.global	uxTaskGetStackHighWaterMark
 6127              		.syntax unified
 6128              		.thumb
 6129              		.thumb_func
 6130              		.fpu fpv4-sp-d16
 6132              	uxTaskGetStackHighWaterMark:
 6133              	.LFB51:
3813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( 
3815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 )
3818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the
3820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	same except for their return type.  Using configSTACK_DEPTH_TYPE allows the
3821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	user to determine the return type.  It gets around the problem of the value
3822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	overflowing on 8-bit types without breaking backward compatibility for
3823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	applications that expect an 8-bit return type. */
3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2( TaskHandle_t xTask )
3825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configSTACK_DEPTH_TYPE uxReturn;
3829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are
3831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the same except for their return type.  Using configSTACK_DEPTH_TYPE
3832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		allows the user to determine the return type.  It gets around the
3833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		problem of the value overflowing on 8-bit types without breaking
3834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		backward compatibility for applications that expect an 8-bit return
3835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		type. */
3836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = prvTaskCheckFreeStackSpace( pucEndOfStack );
3850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark2 */
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 180


3855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6134              		.loc 1 3860 2
 6135              		.cfi_startproc
 6136              		@ args = 0, pretend = 0, frame = 24
 6137              		@ frame_needed = 1, uses_anonymous_args = 0
 6138 0000 80B5     		push	{r7, lr}
 6139              	.LCFI240:
 6140              		.cfi_def_cfa_offset 8
 6141              		.cfi_offset 7, -8
 6142              		.cfi_offset 14, -4
 6143 0002 86B0     		sub	sp, sp, #24
 6144              	.LCFI241:
 6145              		.cfi_def_cfa_offset 32
 6146 0004 00AF     		add	r7, sp, #0
 6147              	.LCFI242:
 6148              		.cfi_def_cfa_register 7
 6149 0006 7860     		str	r0, [r7, #4]
3861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 6150              		.loc 1 3865 11
 6151 0008 7B68     		ldr	r3, [r7, #4]
 6152 000a 002B     		cmp	r3, #0
 6153 000c 02D1     		bne	.L381
 6154              		.loc 1 3865 11 is_stmt 0 discriminator 1
 6155 000e 094B     		ldr	r3, .L384
 6156 0010 1B68     		ldr	r3, [r3]
 6157 0012 00E0     		b	.L382
 6158              	.L381:
 6159              		.loc 1 3865 11 discriminator 2
 6160 0014 7B68     		ldr	r3, [r7, #4]
 6161              	.L382:
 6162              		.loc 1 3865 9 is_stmt 1 discriminator 4
 6163 0016 7B61     		str	r3, [r7, #20]
3866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 6164              		.loc 1 3869 18 discriminator 4
 6165 0018 7B69     		ldr	r3, [r7, #20]
 6166 001a 1B6B     		ldr	r3, [r3, #48]
 6167 001c 3B61     		str	r3, [r7, #16]
3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 181


 6168              		.loc 1 3877 30 discriminator 4
 6169 001e 3869     		ldr	r0, [r7, #16]
 6170 0020 FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 6171 0024 0346     		mov	r3, r0
 6172              		.loc 1 3877 12 discriminator 4
 6173 0026 FB60     		str	r3, [r7, #12]
3878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 6174              		.loc 1 3879 10 discriminator 4
 6175 0028 FB68     		ldr	r3, [r7, #12]
3880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6176              		.loc 1 3880 2 discriminator 4
 6177 002a 1846     		mov	r0, r3
 6178 002c 1837     		adds	r7, r7, #24
 6179              	.LCFI243:
 6180              		.cfi_def_cfa_offset 8
 6181 002e BD46     		mov	sp, r7
 6182              	.LCFI244:
 6183              		.cfi_def_cfa_register 13
 6184              		@ sp needed
 6185 0030 80BD     		pop	{r7, pc}
 6186              	.L385:
 6187 0032 00BF     		.align	2
 6188              	.L384:
 6189 0034 00000000 		.word	pxCurrentTCB
 6190              		.cfi_endproc
 6191              	.LFE51:
 6193              		.section	.text.prvDeleteTCB,"ax",%progbits
 6194              		.align	1
 6195              		.syntax unified
 6196              		.thumb
 6197              		.thumb_func
 6198              		.fpu fpv4-sp-d16
 6200              	prvDeleteTCB:
 6201              	.LFB52:
3881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6202              		.loc 1 3888 2
 6203              		.cfi_startproc
 6204              		@ args = 0, pretend = 0, frame = 16
 6205              		@ frame_needed = 1, uses_anonymous_args = 0
 6206 0000 80B5     		push	{r7, lr}
 6207              	.LCFI245:
 6208              		.cfi_def_cfa_offset 8
 6209              		.cfi_offset 7, -8
 6210              		.cfi_offset 14, -4
 6211 0002 84B0     		sub	sp, sp, #16
 6212              	.LCFI246:
 6213              		.cfi_def_cfa_offset 24
 6214 0004 00AF     		add	r7, sp, #0
 6215              	.LCFI247:
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 182


 6216              		.cfi_def_cfa_register 7
 6217 0006 7860     		str	r0, [r7, #4]
3889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		want to allocate and clean RAM statically. */
3892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to the task to free any memory allocated at the application level.
3896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for additional information. */
3898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the stack and TCB. */
3908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
3909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
3910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consol
3912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			check what was statically allocated before trying to free the
3915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			memory. */
3916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 6218              		.loc 1 3916 13
 6219 0008 7B68     		ldr	r3, [r7, #4]
 6220 000a 93F86130 		ldrb	r3, [r3, #97]	@ zero_extendqisi2
 6221              		.loc 1 3916 6
 6222 000e 002B     		cmp	r3, #0
 6223 0010 08D1     		bne	.L387
3917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be freed. */
3920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
 6224              		.loc 1 3920 21
 6225 0012 7B68     		ldr	r3, [r7, #4]
 6226 0014 1B6B     		ldr	r3, [r3, #48]
 6227              		.loc 1 3920 5
 6228 0016 1846     		mov	r0, r3
 6229 0018 FFF7FEFF 		bl	vPortFree
3921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
 6230              		.loc 1 3921 5
 6231 001c 7868     		ldr	r0, [r7, #4]
 6232 001e FFF7FEFF 		bl	vPortFree
3922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				only memory that must be freed. */
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 183


3929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing needs to be freed. */
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6233              		.loc 1 3938 2
 6234 0022 18E0     		b	.L391
 6235              	.L387:
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 6236              		.loc 1 3923 18
 6237 0024 7B68     		ldr	r3, [r7, #4]
 6238 0026 93F86130 		ldrb	r3, [r3, #97]	@ zero_extendqisi2
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 6239              		.loc 1 3923 11
 6240 002a 012B     		cmp	r3, #1
 6241 002c 03D1     		bne	.L389
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 6242              		.loc 1 3927 5
 6243 002e 7868     		ldr	r0, [r7, #4]
 6244 0030 FFF7FEFF 		bl	vPortFree
 6245              		.loc 1 3938 2
 6246 0034 0FE0     		b	.L391
 6247              	.L389:
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 6248              		.loc 1 3933 5
 6249 0036 7B68     		ldr	r3, [r7, #4]
 6250 0038 93F86130 		ldrb	r3, [r3, #97]	@ zero_extendqisi2
 6251 003c 022B     		cmp	r3, #2
 6252 003e 0AD0     		beq	.L391
 6253              	.LBB221:
 6254              	.LBB222:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6255              		.loc 2 195 2
 6256              		.syntax unified
 6257              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6258 0040 4FF05003 			mov r3, #80												
 6259 0044 83F31188 		msr basepri, r3											
 6260 0048 BFF36F8F 		isb														
 6261 004c BFF34F8F 		dsb														
 6262              	
 6263              	@ 0 "" 2
 6264              		.thumb
 6265              		.syntax unified
 6266 0050 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 6267              		.loc 2 203 1
 6268 0052 00BF     		nop
 6269              	.L390:
 6270              	.LBE222:
 6271              	.LBE221:
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 6272              		.loc 1 3933 5 discriminator 1
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 184


 6273 0054 FEE7     		b	.L390
 6274              	.L391:
 6275              		.loc 1 3938 2
 6276 0056 00BF     		nop
 6277 0058 1037     		adds	r7, r7, #16
 6278              	.LCFI248:
 6279              		.cfi_def_cfa_offset 8
 6280 005a BD46     		mov	sp, r7
 6281              	.LCFI249:
 6282              		.cfi_def_cfa_register 13
 6283              		@ sp needed
 6284 005c 80BD     		pop	{r7, pc}
 6285              		.cfi_endproc
 6286              	.LFE52:
 6288              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 6289              		.align	1
 6290              		.syntax unified
 6291              		.thumb
 6292              		.thumb_func
 6293              		.fpu fpv4-sp-d16
 6295              	prvResetNextTaskUnblockTime:
 6296              	.LFB53:
3939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 6297              		.loc 1 3944 1
 6298              		.cfi_startproc
 6299              		@ args = 0, pretend = 0, frame = 8
 6300              		@ frame_needed = 1, uses_anonymous_args = 0
 6301              		@ link register save eliminated.
 6302 0000 80B4     		push	{r7}
 6303              	.LCFI250:
 6304              		.cfi_def_cfa_offset 4
 6305              		.cfi_offset 7, -4
 6306 0002 83B0     		sub	sp, sp, #12
 6307              	.LCFI251:
 6308              		.cfi_def_cfa_offset 16
 6309 0004 00AF     		add	r7, sp, #0
 6310              	.LCFI252:
 6311              		.cfi_def_cfa_register 7
3945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
3946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 6312              		.loc 1 3947 6
 6313 0006 0C4B     		ldr	r3, .L396
 6314 0008 1B68     		ldr	r3, [r3]
 6315 000a 1B68     		ldr	r3, [r3]
 6316              		.loc 1 3947 4
 6317 000c 002B     		cmp	r3, #0
 6318 000e 04D1     		bne	.L393
3948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 185


3952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		there is an item in the delayed list. */
3953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 6319              		.loc 1 3953 24
 6320 0010 0A4B     		ldr	r3, .L396+4
 6321 0012 4FF0FF32 		mov	r2, #-1
 6322 0016 1A60     		str	r2, [r3]
3954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from the Blocked state. */
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as thi
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 6323              		.loc 1 3964 1
 6324 0018 08E0     		b	.L395
 6325              	.L393:
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 6326              		.loc 1 3961 15
 6327 001a 074B     		ldr	r3, .L396
 6328 001c 1B68     		ldr	r3, [r3]
 6329 001e DB68     		ldr	r3, [r3, #12]
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 6330              		.loc 1 3961 13
 6331 0020 DB68     		ldr	r3, [r3, #12]
 6332 0022 7B60     		str	r3, [r7, #4]
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6333              		.loc 1 3962 26
 6334 0024 7B68     		ldr	r3, [r7, #4]
 6335 0026 5B68     		ldr	r3, [r3, #4]
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6336              		.loc 1 3962 24
 6337 0028 044A     		ldr	r2, .L396+4
 6338 002a 1360     		str	r3, [r2]
 6339              	.L395:
 6340              		.loc 1 3964 1
 6341 002c 00BF     		nop
 6342 002e 0C37     		adds	r7, r7, #12
 6343              	.LCFI253:
 6344              		.cfi_def_cfa_offset 4
 6345 0030 BD46     		mov	sp, r7
 6346              	.LCFI254:
 6347              		.cfi_def_cfa_register 13
 6348              		@ sp needed
 6349 0032 5DF8047B 		ldr	r7, [sp], #4
 6350              	.LCFI255:
 6351              		.cfi_restore 7
 6352              		.cfi_def_cfa_offset 0
 6353 0036 7047     		bx	lr
 6354              	.L397:
 6355              		.align	2
 6356              	.L396:
 6357 0038 00000000 		.word	pxDelayedTaskList
 6358 003c 00000000 		.word	xNextTaskUnblockTime
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 186


 6359              		.cfi_endproc
 6360              	.LFE53:
 6362              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 6363              		.align	1
 6364              		.global	xTaskGetCurrentTaskHandle
 6365              		.syntax unified
 6366              		.thumb
 6367              		.thumb_func
 6368              		.fpu fpv4-sp-d16
 6370              	xTaskGetCurrentTaskHandle:
 6371              	.LFB54:
3965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6372              		.loc 1 3970 2
 6373              		.cfi_startproc
 6374              		@ args = 0, pretend = 0, frame = 8
 6375              		@ frame_needed = 1, uses_anonymous_args = 0
 6376              		@ link register save eliminated.
 6377 0000 80B4     		push	{r7}
 6378              	.LCFI256:
 6379              		.cfi_def_cfa_offset 4
 6380              		.cfi_offset 7, -4
 6381 0002 83B0     		sub	sp, sp, #12
 6382              	.LCFI257:
 6383              		.cfi_def_cfa_offset 16
 6384 0004 00AF     		add	r7, sp, #0
 6385              	.LCFI258:
 6386              		.cfi_def_cfa_register 7
3971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
3972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
3974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		individual execution thread. */
3976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
 6387              		.loc 1 3976 11
 6388 0006 054B     		ldr	r3, .L400
 6389 0008 1B68     		ldr	r3, [r3]
 6390 000a 7B60     		str	r3, [r7, #4]
3977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 6391              		.loc 1 3978 10
 6392 000c 7B68     		ldr	r3, [r7, #4]
3979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6393              		.loc 1 3979 2
 6394 000e 1846     		mov	r0, r3
 6395 0010 0C37     		adds	r7, r7, #12
 6396              	.LCFI259:
 6397              		.cfi_def_cfa_offset 4
 6398 0012 BD46     		mov	sp, r7
 6399              	.LCFI260:
 6400              		.cfi_def_cfa_register 13
 6401              		@ sp needed
 6402 0014 5DF8047B 		ldr	r7, [sp], #4
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 187


 6403              	.LCFI261:
 6404              		.cfi_restore 7
 6405              		.cfi_def_cfa_offset 0
 6406 0018 7047     		bx	lr
 6407              	.L401:
 6408 001a 00BF     		.align	2
 6409              	.L400:
 6410 001c 00000000 		.word	pxCurrentTCB
 6411              		.cfi_endproc
 6412              	.LFE54:
 6414              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 6415              		.align	1
 6416              		.global	xTaskGetSchedulerState
 6417              		.syntax unified
 6418              		.thumb
 6419              		.thumb_func
 6420              		.fpu fpv4-sp-d16
 6422              	xTaskGetSchedulerState:
 6423              	.LFB55:
3980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6424              		.loc 1 3987 2
 6425              		.cfi_startproc
 6426              		@ args = 0, pretend = 0, frame = 8
 6427              		@ frame_needed = 1, uses_anonymous_args = 0
 6428              		@ link register save eliminated.
 6429 0000 80B4     		push	{r7}
 6430              	.LCFI262:
 6431              		.cfi_def_cfa_offset 4
 6432              		.cfi_offset 7, -4
 6433 0002 83B0     		sub	sp, sp, #12
 6434              	.LCFI263:
 6435              		.cfi_def_cfa_offset 16
 6436 0004 00AF     		add	r7, sp, #0
 6437              	.LCFI264:
 6438              		.cfi_def_cfa_register 7
3988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
3989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
 6439              		.loc 1 3990 25
 6440 0006 0B4B     		ldr	r3, .L407
 6441 0008 1B68     		ldr	r3, [r3]
 6442              		.loc 1 3990 5
 6443 000a 002B     		cmp	r3, #0
 6444 000c 02D1     		bne	.L403
3991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
 6445              		.loc 1 3992 12
 6446 000e 0123     		movs	r3, #1
 6447 0010 7B60     		str	r3, [r7, #4]
 6448 0012 08E0     		b	.L404
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 188


 6449              	.L403:
3993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 6450              		.loc 1 3996 29
 6451 0014 084B     		ldr	r3, .L407+4
 6452 0016 1B68     		ldr	r3, [r3]
 6453              		.loc 1 3996 6
 6454 0018 002B     		cmp	r3, #0
 6455 001a 02D1     		bne	.L405
3997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
 6456              		.loc 1 3998 13
 6457 001c 0223     		movs	r3, #2
 6458 001e 7B60     		str	r3, [r7, #4]
 6459 0020 01E0     		b	.L404
 6460              	.L405:
3999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
 6461              		.loc 1 4002 13
 6462 0022 0023     		movs	r3, #0
 6463 0024 7B60     		str	r3, [r7, #4]
 6464              	.L404:
4003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 6465              		.loc 1 4006 10
 6466 0026 7B68     		ldr	r3, [r7, #4]
4007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6467              		.loc 1 4007 2
 6468 0028 1846     		mov	r0, r3
 6469 002a 0C37     		adds	r7, r7, #12
 6470              	.LCFI265:
 6471              		.cfi_def_cfa_offset 4
 6472 002c BD46     		mov	sp, r7
 6473              	.LCFI266:
 6474              		.cfi_def_cfa_register 13
 6475              		@ sp needed
 6476 002e 5DF8047B 		ldr	r7, [sp], #4
 6477              	.LCFI267:
 6478              		.cfi_restore 7
 6479              		.cfi_def_cfa_offset 0
 6480 0032 7047     		bx	lr
 6481              	.L408:
 6482              		.align	2
 6483              	.L407:
 6484 0034 00000000 		.word	xSchedulerRunning
 6485 0038 00000000 		.word	uxSchedulerSuspended
 6486              		.cfi_endproc
 6487              	.LFE55:
 6489              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 6490              		.align	1
 6491              		.global	xTaskPriorityInherit
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 189


 6492              		.syntax unified
 6493              		.thumb
 6494              		.thumb_func
 6495              		.fpu fpv4-sp-d16
 6497              	xTaskPriorityInherit:
 6498              	.LFB56:
4008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
4010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6499              		.loc 1 4015 2
 6500              		.cfi_startproc
 6501              		@ args = 0, pretend = 0, frame = 16
 6502              		@ frame_needed = 1, uses_anonymous_args = 0
 6503 0000 80B5     		push	{r7, lr}
 6504              	.LCFI268:
 6505              		.cfi_def_cfa_offset 8
 6506              		.cfi_offset 7, -8
 6507              		.cfi_offset 14, -4
 6508 0002 84B0     		sub	sp, sp, #16
 6509              	.LCFI269:
 6510              		.cfi_def_cfa_offset 24
 6511 0004 00AF     		add	r7, sp, #0
 6512              	.LCFI270:
 6513              		.cfi_def_cfa_register 7
 6514 0006 7860     		str	r0, [r7, #4]
4016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 6515              		.loc 1 4016 16
 6516 0008 7B68     		ldr	r3, [r7, #4]
 6517 000a BB60     		str	r3, [r7, #8]
4017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 6518              		.loc 1 4017 13
 6519 000c 0023     		movs	r3, #0
 6520 000e FB60     		str	r3, [r7, #12]
4018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
4020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
4021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		needed as interrupts can no longer use mutexes? */
4022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 6521              		.loc 1 4022 5
 6522 0010 7B68     		ldr	r3, [r7, #4]
 6523 0012 002B     		cmp	r3, #0
 6524 0014 51D0     		beq	.L410
4023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
4026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 6525              		.loc 1 4027 24
 6526 0016 BB68     		ldr	r3, [r7, #8]
 6527 0018 DA6A     		ldr	r2, [r3, #44]
 6528              		.loc 1 4027 51
 6529 001a 2A4B     		ldr	r3, .L417
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 190


 6530 001c 1B68     		ldr	r3, [r3]
 6531 001e DB6A     		ldr	r3, [r3, #44]
 6532              		.loc 1 4027 6
 6533 0020 9A42     		cmp	r2, r3
 6534 0022 41D2     		bcs	.L411
4028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
4030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
4031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not being used for anything else. */
4032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
 6535              		.loc 1 4032 11
 6536 0024 BB68     		ldr	r3, [r7, #8]
 6537 0026 9B69     		ldr	r3, [r3, #24]
 6538              		.loc 1 4032 7
 6539 0028 002B     		cmp	r3, #0
 6540 002a 06DB     		blt	.L412
4033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
 6541              		.loc 1 4034 6
 6542 002c 254B     		ldr	r3, .L417
 6543 002e 1B68     		ldr	r3, [r3]
 6544 0030 DB6A     		ldr	r3, [r3, #44]
 6545 0032 C3F13802 		rsb	r2, r3, #56
 6546 0036 BB68     		ldr	r3, [r7, #8]
 6547 0038 9A61     		str	r2, [r3, #24]
 6548              	.L412:
4035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
4042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to be moved into a new list. */
4043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
 6549              		.loc 1 4043 9
 6550 003a BB68     		ldr	r3, [r7, #8]
 6551 003c 5969     		ldr	r1, [r3, #20]
 6552 003e BB68     		ldr	r3, [r7, #8]
 6553 0040 DA6A     		ldr	r2, [r3, #44]
 6554 0042 1346     		mov	r3, r2
 6555 0044 9B00     		lsls	r3, r3, #2
 6556 0046 1344     		add	r3, r3, r2
 6557 0048 9B00     		lsls	r3, r3, #2
 6558 004a 1F4A     		ldr	r2, .L417+4
 6559 004c 1344     		add	r3, r3, r2
 6560              		.loc 1 4043 7
 6561 004e 9942     		cmp	r1, r3
 6562 0050 22D1     		bne	.L413
4044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 6563              		.loc 1 4045 10
 6564 0052 BB68     		ldr	r3, [r7, #8]
 6565 0054 0433     		adds	r3, r3, #4
 6566 0056 1846     		mov	r0, r3
 6567 0058 FFF7FEFF 		bl	uxListRemove
4046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 191


4047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
4048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
4049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
4050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
4051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
4058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 6568              		.loc 1 4058 49
 6569 005c 194B     		ldr	r3, .L417
 6570 005e 1B68     		ldr	r3, [r3]
 6571 0060 DA6A     		ldr	r2, [r3, #44]
 6572              		.loc 1 4058 35
 6573 0062 BB68     		ldr	r3, [r7, #8]
 6574 0064 DA62     		str	r2, [r3, #44]
4059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 6575              		.loc 1 4059 6
 6576 0066 BB68     		ldr	r3, [r7, #8]
 6577 0068 DA6A     		ldr	r2, [r3, #44]
 6578 006a 184B     		ldr	r3, .L417+8
 6579 006c 1B68     		ldr	r3, [r3]
 6580 006e 9A42     		cmp	r2, r3
 6581 0070 03D9     		bls	.L414
 6582              		.loc 1 4059 6 is_stmt 0 discriminator 1
 6583 0072 BB68     		ldr	r3, [r7, #8]
 6584 0074 DB6A     		ldr	r3, [r3, #44]
 6585 0076 154A     		ldr	r2, .L417+8
 6586 0078 1360     		str	r3, [r2]
 6587              	.L414:
 6588              		.loc 1 4059 6 discriminator 3
 6589 007a BB68     		ldr	r3, [r7, #8]
 6590 007c DA6A     		ldr	r2, [r3, #44]
 6591 007e 1346     		mov	r3, r2
 6592 0080 9B00     		lsls	r3, r3, #2
 6593 0082 1344     		add	r3, r3, r2
 6594 0084 9B00     		lsls	r3, r3, #2
 6595 0086 104A     		ldr	r2, .L417+4
 6596 0088 1A44     		add	r2, r2, r3
 6597 008a BB68     		ldr	r3, [r7, #8]
 6598 008c 0433     		adds	r3, r3, #4
 6599 008e 1946     		mov	r1, r3
 6600 0090 1046     		mov	r0, r2
 6601 0092 FFF7FEFF 		bl	vListInsertEnd
 6602 0096 04E0     		b	.L415
 6603              	.L413:
4060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Just inherit the priority. */
4064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 6604              		.loc 1 4064 49 is_stmt 1
 6605 0098 0A4B     		ldr	r3, .L417
 6606 009a 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 192


 6607 009c DA6A     		ldr	r2, [r3, #44]
 6608              		.loc 1 4064 35
 6609 009e BB68     		ldr	r3, [r7, #8]
 6610 00a0 DA62     		str	r2, [r3, #44]
 6611              	.L415:
4065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
4068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Inheritance occurred. */
4070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 6612              		.loc 1 4070 13
 6613 00a2 0123     		movs	r3, #1
 6614 00a4 FB60     		str	r3, [r7, #12]
 6615 00a6 08E0     		b	.L410
 6616              	.L411:
4071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 6617              		.loc 1 4074 25
 6618 00a8 BB68     		ldr	r3, [r7, #8]
 6619 00aa 1A6D     		ldr	r2, [r3, #80]
 6620              		.loc 1 4074 56
 6621 00ac 054B     		ldr	r3, .L417
 6622 00ae 1B68     		ldr	r3, [r3]
 6623 00b0 DB6A     		ldr	r3, [r3, #44]
 6624              		.loc 1 4074 7
 6625 00b2 9A42     		cmp	r2, r3
 6626 00b4 01D2     		bcs	.L410
4075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority of the mutex holder is lower than the
4077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex, but the
4078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					current priority of the mutex holder is not lower than the
4079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex.
4080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Therefore the mutex holder must have already inherited a
4081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority, but inheritance would have occurred if that had
4082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					not been the case. */
4083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 6627              		.loc 1 4083 14
 6628 00b6 0123     		movs	r3, #1
 6629 00b8 FB60     		str	r3, [r7, #12]
 6630              	.L410:
4084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 6631              		.loc 1 4096 10
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 193


 6632 00ba FB68     		ldr	r3, [r7, #12]
4097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6633              		.loc 1 4097 2
 6634 00bc 1846     		mov	r0, r3
 6635 00be 1037     		adds	r7, r7, #16
 6636              	.LCFI271:
 6637              		.cfi_def_cfa_offset 8
 6638 00c0 BD46     		mov	sp, r7
 6639              	.LCFI272:
 6640              		.cfi_def_cfa_register 13
 6641              		@ sp needed
 6642 00c2 80BD     		pop	{r7, pc}
 6643              	.L418:
 6644              		.align	2
 6645              	.L417:
 6646 00c4 00000000 		.word	pxCurrentTCB
 6647 00c8 00000000 		.word	pxReadyTasksLists
 6648 00cc 00000000 		.word	uxTopReadyPriority
 6649              		.cfi_endproc
 6650              	.LFE56:
 6652              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 6653              		.align	1
 6654              		.global	xTaskPriorityDisinherit
 6655              		.syntax unified
 6656              		.thumb
 6657              		.thumb_func
 6658              		.fpu fpv4-sp-d16
 6660              	xTaskPriorityDisinherit:
 6661              	.LFB57:
4098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
4105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6662              		.loc 1 4105 2
 6663              		.cfi_startproc
 6664              		@ args = 0, pretend = 0, frame = 24
 6665              		@ frame_needed = 1, uses_anonymous_args = 0
 6666 0000 80B5     		push	{r7, lr}
 6667              	.LCFI273:
 6668              		.cfi_def_cfa_offset 8
 6669              		.cfi_offset 7, -8
 6670              		.cfi_offset 14, -4
 6671 0002 86B0     		sub	sp, sp, #24
 6672              	.LCFI274:
 6673              		.cfi_def_cfa_offset 32
 6674 0004 00AF     		add	r7, sp, #0
 6675              	.LCFI275:
 6676              		.cfi_def_cfa_register 7
 6677 0006 7860     		str	r0, [r7, #4]
4106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 6678              		.loc 1 4106 16
 6679 0008 7B68     		ldr	r3, [r7, #4]
 6680 000a 3B61     		str	r3, [r7, #16]
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 194


4107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 6681              		.loc 1 4107 13
 6682 000c 0023     		movs	r3, #0
 6683 000e 7B61     		str	r3, [r7, #20]
4108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 6684              		.loc 1 4109 5
 6685 0010 7B68     		ldr	r3, [r7, #4]
 6686 0012 002B     		cmp	r3, #0
 6687 0014 56D0     		beq	.L420
4110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
4112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
4113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
4114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			be the running state task. */
4115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
 6688              		.loc 1 4115 4
 6689 0016 2E4B     		ldr	r3, .L427
 6690 0018 1B68     		ldr	r3, [r3]
 6691 001a 3A69     		ldr	r2, [r7, #16]
 6692 001c 9A42     		cmp	r2, r3
 6693 001e 0AD0     		beq	.L421
 6694              	.LBB223:
 6695              	.LBB224:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6696              		.loc 2 195 2
 6697              		.syntax unified
 6698              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6699 0020 4FF05003 			mov r3, #80												
 6700 0024 83F31188 		msr basepri, r3											
 6701 0028 BFF36F8F 		isb														
 6702 002c BFF34F8F 		dsb														
 6703              	
 6704              	@ 0 "" 2
 6705              		.thumb
 6706              		.syntax unified
 6707 0030 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 6708              		.loc 2 203 1
 6709 0032 00BF     		nop
 6710              	.L422:
 6711              	.LBE224:
 6712              	.LBE223:
 6713              		.loc 1 4115 4 discriminator 1
 6714 0034 FEE7     		b	.L422
 6715              	.L421:
4116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 6716              		.loc 1 4116 4
 6717 0036 3B69     		ldr	r3, [r7, #16]
 6718 0038 5B6D     		ldr	r3, [r3, #84]
 6719 003a 002B     		cmp	r3, #0
 6720 003c 0AD1     		bne	.L423
 6721              	.LBB225:
 6722              	.LBB226:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6723              		.loc 2 195 2
 6724              		.syntax unified
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 195


 6725              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6726 003e 4FF05003 			mov r3, #80												
 6727 0042 83F31188 		msr basepri, r3											
 6728 0046 BFF36F8F 		isb														
 6729 004a BFF34F8F 		dsb														
 6730              	
 6731              	@ 0 "" 2
 6732              		.thumb
 6733              		.syntax unified
 6734 004e BB60     		str	r3, [r7, #8]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 6735              		.loc 2 203 1
 6736 0050 00BF     		nop
 6737              	.L424:
 6738              	.LBE226:
 6739              	.LBE225:
 6740              		.loc 1 4116 4 discriminator 2
 6741 0052 FEE7     		b	.L424
 6742              	.L423:
4117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 6743              		.loc 1 4117 11
 6744 0054 3B69     		ldr	r3, [r7, #16]
 6745 0056 5B6D     		ldr	r3, [r3, #84]
 6746              		.loc 1 4117 28
 6747 0058 5A1E     		subs	r2, r3, #1
 6748 005a 3B69     		ldr	r3, [r7, #16]
 6749 005c 5A65     		str	r2, [r3, #84]
4118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
4120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task? */
4121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 6750              		.loc 1 4121 13
 6751 005e 3B69     		ldr	r3, [r7, #16]
 6752 0060 DA6A     		ldr	r2, [r3, #44]
 6753              		.loc 1 4121 34
 6754 0062 3B69     		ldr	r3, [r7, #16]
 6755 0064 1B6D     		ldr	r3, [r3, #80]
 6756              		.loc 1 4121 6
 6757 0066 9A42     		cmp	r2, r3
 6758 0068 2CD0     		beq	.L420
4122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
4124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 6759              		.loc 1 4124 14
 6760 006a 3B69     		ldr	r3, [r7, #16]
 6761 006c 5B6D     		ldr	r3, [r3, #84]
 6762              		.loc 1 4124 7
 6763 006e 002B     		cmp	r3, #0
 6764 0070 28D1     		bne	.L420
4125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
4127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
4128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
4129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					holding task then it must be the running state task.  Remove
4130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the holding task from the ready/delayed list. */
4131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 6765              		.loc 1 4131 10
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 196


 6766 0072 3B69     		ldr	r3, [r7, #16]
 6767 0074 0433     		adds	r3, r3, #4
 6768 0076 1846     		mov	r0, r3
 6769 0078 FFF7FEFF 		bl	uxListRemove
4132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
4141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new	ready list. */
4142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
 6770              		.loc 1 4143 31
 6771 007c 3B69     		ldr	r3, [r7, #16]
 6772 007e 1A6D     		ldr	r2, [r3, #80]
 6773              		.loc 1 4143 24
 6774 0080 3B69     		ldr	r3, [r7, #16]
 6775 0082 DA62     		str	r2, [r3, #44]
4144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
4146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					any other purpose if this task is running, and it must be
4147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					running to give back the mutex. */
4148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
 6776              		.loc 1 4148 6
 6777 0084 3B69     		ldr	r3, [r7, #16]
 6778 0086 DB6A     		ldr	r3, [r3, #44]
 6779 0088 C3F13802 		rsb	r2, r3, #56
 6780 008c 3B69     		ldr	r3, [r7, #16]
 6781 008e 9A61     		str	r2, [r3, #24]
4149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 6782              		.loc 1 4149 6
 6783 0090 3B69     		ldr	r3, [r7, #16]
 6784 0092 DA6A     		ldr	r2, [r3, #44]
 6785 0094 0F4B     		ldr	r3, .L427+4
 6786 0096 1B68     		ldr	r3, [r3]
 6787 0098 9A42     		cmp	r2, r3
 6788 009a 03D9     		bls	.L425
 6789              		.loc 1 4149 6 is_stmt 0 discriminator 1
 6790 009c 3B69     		ldr	r3, [r7, #16]
 6791 009e DB6A     		ldr	r3, [r3, #44]
 6792 00a0 0C4A     		ldr	r2, .L427+4
 6793 00a2 1360     		str	r3, [r2]
 6794              	.L425:
 6795              		.loc 1 4149 6 discriminator 3
 6796 00a4 3B69     		ldr	r3, [r7, #16]
 6797 00a6 DA6A     		ldr	r2, [r3, #44]
 6798 00a8 1346     		mov	r3, r2
 6799 00aa 9B00     		lsls	r3, r3, #2
 6800 00ac 1344     		add	r3, r3, r2
 6801 00ae 9B00     		lsls	r3, r3, #2
 6802 00b0 094A     		ldr	r2, .L427+8
 6803 00b2 1A44     		add	r2, r2, r3
 6804 00b4 3B69     		ldr	r3, [r7, #16]
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 197


 6805 00b6 0433     		adds	r3, r3, #4
 6806 00b8 1946     		mov	r1, r3
 6807 00ba 1046     		mov	r0, r2
 6808 00bc FFF7FEFF 		bl	vListInsertEnd
4150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
4152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This is only actually required in the corner case whereby
4153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
4154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					in an order different to that in which they were taken.
4155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					If a context switch did not occur when the first mutex was
4156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
4157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					switch should occur when the last mutex is returned whether
4158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a task is waiting on it or not. */
4159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 6809              		.loc 1 4159 14 is_stmt 1 discriminator 3
 6810 00c0 0123     		movs	r3, #1
 6811 00c2 7B61     		str	r3, [r7, #20]
 6812              	.L420:
4160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 6813              		.loc 1 4176 10
 6814 00c4 7B69     		ldr	r3, [r7, #20]
4177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6815              		.loc 1 4177 2
 6816 00c6 1846     		mov	r0, r3
 6817 00c8 1837     		adds	r7, r7, #24
 6818              	.LCFI276:
 6819              		.cfi_def_cfa_offset 8
 6820 00ca BD46     		mov	sp, r7
 6821              	.LCFI277:
 6822              		.cfi_def_cfa_register 13
 6823              		@ sp needed
 6824 00cc 80BD     		pop	{r7, pc}
 6825              	.L428:
 6826 00ce 00BF     		.align	2
 6827              	.L427:
 6828 00d0 00000000 		.word	pxCurrentTCB
 6829 00d4 00000000 		.word	uxTopReadyPriority
 6830 00d8 00000000 		.word	pxReadyTasksLists
 6831              		.cfi_endproc
 6832              	.LFE57:
 6834              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 198


 6835              		.align	1
 6836              		.global	vTaskPriorityDisinheritAfterTimeout
 6837              		.syntax unified
 6838              		.thumb
 6839              		.thumb_func
 6840              		.fpu fpv4-sp-d16
 6842              	vTaskPriorityDisinheritAfterTimeout:
 6843              	.LFB58:
4178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6844              		.loc 1 4185 2
 6845              		.cfi_startproc
 6846              		@ args = 0, pretend = 0, frame = 32
 6847              		@ frame_needed = 1, uses_anonymous_args = 0
 6848 0000 80B5     		push	{r7, lr}
 6849              	.LCFI278:
 6850              		.cfi_def_cfa_offset 8
 6851              		.cfi_offset 7, -8
 6852              		.cfi_offset 14, -4
 6853 0002 88B0     		sub	sp, sp, #32
 6854              	.LCFI279:
 6855              		.cfi_def_cfa_offset 40
 6856 0004 00AF     		add	r7, sp, #0
 6857              	.LCFI280:
 6858              		.cfi_def_cfa_register 7
 6859 0006 7860     		str	r0, [r7, #4]
 6860 0008 3960     		str	r1, [r7]
4186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 6861              		.loc 1 4186 16
 6862 000a 7B68     		ldr	r3, [r7, #4]
 6863 000c BB61     		str	r3, [r7, #24]
4187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
4188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 6864              		.loc 1 4188 20
 6865 000e 0123     		movs	r3, #1
 6866 0010 7B61     		str	r3, [r7, #20]
4189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 6867              		.loc 1 4190 5
 6868 0012 7B68     		ldr	r3, [r7, #4]
 6869 0014 002B     		cmp	r3, #0
 6870 0016 6AD0     		beq	.L439
4191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
4193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			one mutex. */
4194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 6871              		.loc 1 4194 4
 6872 0018 BB69     		ldr	r3, [r7, #24]
 6873 001a 5B6D     		ldr	r3, [r3, #84]
 6874 001c 002B     		cmp	r3, #0
 6875 001e 0AD1     		bne	.L431
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 199


 6876              	.LBB227:
 6877              	.LBB228:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6878              		.loc 2 195 2
 6879              		.syntax unified
 6880              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6881 0020 4FF05003 			mov r3, #80												
 6882 0024 83F31188 		msr basepri, r3											
 6883 0028 BFF36F8F 		isb														
 6884 002c BFF34F8F 		dsb														
 6885              	
 6886              	@ 0 "" 2
 6887              		.thumb
 6888              		.syntax unified
 6889 0030 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 6890              		.loc 2 203 1
 6891 0032 00BF     		nop
 6892              	.L432:
 6893              	.LBE228:
 6894              	.LBE227:
 6895              		.loc 1 4194 4 discriminator 1
 6896 0034 FEE7     		b	.L432
 6897              	.L431:
4195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Determine the priority to which the priority of the task that
4197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
4198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holding task's base priority and the priority of the highest
4199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			priority task that is waiting to obtain the mutex. */
4200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 6898              		.loc 1 4200 13
 6899 0036 BB69     		ldr	r3, [r7, #24]
 6900 0038 1B6D     		ldr	r3, [r3, #80]
 6901              		.loc 1 4200 6
 6902 003a 3A68     		ldr	r2, [r7]
 6903 003c 9A42     		cmp	r2, r3
 6904 003e 02D9     		bls	.L433
4201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
 6905              		.loc 1 4202 21
 6906 0040 3B68     		ldr	r3, [r7]
 6907 0042 FB61     		str	r3, [r7, #28]
 6908 0044 02E0     		b	.L434
 6909              	.L433:
4203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
 6910              		.loc 1 4206 21
 6911 0046 BB69     		ldr	r3, [r7, #24]
 6912 0048 1B6D     		ldr	r3, [r3, #80]
 6913 004a FB61     		str	r3, [r7, #28]
 6914              	.L434:
4207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Does the priority need to change? */
4210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 200


 6915              		.loc 1 4210 13
 6916 004c BB69     		ldr	r3, [r7, #24]
 6917 004e DB6A     		ldr	r3, [r3, #44]
 6918              		.loc 1 4210 6
 6919 0050 FA69     		ldr	r2, [r7, #28]
 6920 0052 9A42     		cmp	r2, r3
 6921 0054 4BD0     		beq	.L439
4211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
4213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				simplification in the priority inheritance implementation.  If
4214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
4215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
4216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 6922              		.loc 1 4216 14
 6923 0056 BB69     		ldr	r3, [r7, #24]
 6924 0058 5B6D     		ldr	r3, [r3, #84]
 6925              		.loc 1 4216 7
 6926 005a 7A69     		ldr	r2, [r7, #20]
 6927 005c 9A42     		cmp	r2, r3
 6928 005e 46D1     		bne	.L439
4217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task has timed out because it already holds the
4219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
4220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					its own priority. */
4221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
 6929              		.loc 1 4221 6
 6930 0060 254B     		ldr	r3, .L440
 6931 0062 1B68     		ldr	r3, [r3]
 6932 0064 BA69     		ldr	r2, [r7, #24]
 6933 0066 9A42     		cmp	r2, r3
 6934 0068 0AD1     		bne	.L435
 6935              	.LBB229:
 6936              	.LBB230:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6937              		.loc 2 195 2
 6938              		.syntax unified
 6939              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6940 006a 4FF05003 			mov r3, #80												
 6941 006e 83F31188 		msr basepri, r3											
 6942 0072 BFF36F8F 		isb														
 6943 0076 BFF34F8F 		dsb														
 6944              	
 6945              	@ 0 "" 2
 6946              		.thumb
 6947              		.syntax unified
 6948 007a BB60     		str	r3, [r7, #8]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 6949              		.loc 2 203 1
 6950 007c 00BF     		nop
 6951              	.L436:
 6952              	.LBE230:
 6953              	.LBE229:
 6954              		.loc 1 4221 6 discriminator 2
 6955 007e FEE7     		b	.L436
 6956              	.L435:
4222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority, remembering the previous
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 201


4224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority to facilitate determining the subject task's
4225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
4226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 6957              		.loc 1 4227 28
 6958 0080 BB69     		ldr	r3, [r7, #24]
 6959 0082 DB6A     		ldr	r3, [r3, #44]
 6960 0084 3B61     		str	r3, [r7, #16]
4228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
 6961              		.loc 1 4228 24
 6962 0086 BB69     		ldr	r3, [r7, #24]
 6963 0088 FA69     		ldr	r2, [r7, #28]
 6964 008a DA62     		str	r2, [r3, #44]
4229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only reset the event list item value if the value is not
4231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					being used for anything else. */
4232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
 6965              		.loc 1 4232 12
 6966 008c BB69     		ldr	r3, [r7, #24]
 6967 008e 9B69     		ldr	r3, [r3, #24]
 6968              		.loc 1 4232 8
 6969 0090 002B     		cmp	r3, #0
 6970 0092 04DB     		blt	.L437
4233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
 6971              		.loc 1 4234 7
 6972 0094 FB69     		ldr	r3, [r7, #28]
 6973 0096 C3F13802 		rsb	r2, r3, #56
 6974 009a BB69     		ldr	r3, [r7, #24]
 6975 009c 9A61     		str	r2, [r3, #24]
 6976              	.L437:
4235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the running task is not the task that holds the mutex
4242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					then the task that holds the mutex could be in either the
4243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					from its current state list if it is in the Ready state as
4245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the task's priority is going to change and there is one
4246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready list per priority. */
4247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
 6977              		.loc 1 4247 10
 6978 009e BB69     		ldr	r3, [r7, #24]
 6979 00a0 5969     		ldr	r1, [r3, #20]
 6980 00a2 3A69     		ldr	r2, [r7, #16]
 6981 00a4 1346     		mov	r3, r2
 6982 00a6 9B00     		lsls	r3, r3, #2
 6983 00a8 1344     		add	r3, r3, r2
 6984 00aa 9B00     		lsls	r3, r3, #2
 6985 00ac 134A     		ldr	r2, .L440+4
 6986 00ae 1344     		add	r3, r3, r2
 6987              		.loc 1 4247 8
 6988 00b0 9942     		cmp	r1, r3
 6989 00b2 1CD1     		bne	.L439
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 202


4248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 6990              		.loc 1 4249 11
 6991 00b4 BB69     		ldr	r3, [r7, #24]
 6992 00b6 0433     		adds	r3, r3, #4
 6993 00b8 1846     		mov	r0, r3
 6994 00ba FFF7FEFF 		bl	uxListRemove
4250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* It is known that the task is in its ready list so
4252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							there is no need to check again and the port level
4253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							reset macro can be called directly. */
4254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
4255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
4257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
 6995              		.loc 1 4261 7
 6996 00be BB69     		ldr	r3, [r7, #24]
 6997 00c0 DA6A     		ldr	r2, [r3, #44]
 6998 00c2 0F4B     		ldr	r3, .L440+8
 6999 00c4 1B68     		ldr	r3, [r3]
 7000 00c6 9A42     		cmp	r2, r3
 7001 00c8 03D9     		bls	.L438
 7002              		.loc 1 4261 7 is_stmt 0 discriminator 1
 7003 00ca BB69     		ldr	r3, [r7, #24]
 7004 00cc DB6A     		ldr	r3, [r3, #44]
 7005 00ce 0C4A     		ldr	r2, .L440+8
 7006 00d0 1360     		str	r3, [r2]
 7007              	.L438:
 7008              		.loc 1 4261 7 discriminator 3
 7009 00d2 BB69     		ldr	r3, [r7, #24]
 7010 00d4 DA6A     		ldr	r2, [r3, #44]
 7011 00d6 1346     		mov	r3, r2
 7012 00d8 9B00     		lsls	r3, r3, #2
 7013 00da 1344     		add	r3, r3, r2
 7014 00dc 9B00     		lsls	r3, r3, #2
 7015 00de 074A     		ldr	r2, .L440+4
 7016 00e0 1A44     		add	r2, r2, r3
 7017 00e2 BB69     		ldr	r3, [r7, #24]
 7018 00e4 0433     		adds	r3, r3, #4
 7019 00e6 1946     		mov	r1, r3
 7020 00e8 1046     		mov	r0, r2
 7021 00ea FFF7FEFF 		bl	vListInsertEnd
 7022              	.L439:
4262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 203


4272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 7023              		.loc 1 4282 2 is_stmt 1
 7024 00ee 00BF     		nop
 7025 00f0 2037     		adds	r7, r7, #32
 7026              	.LCFI281:
 7027              		.cfi_def_cfa_offset 8
 7028 00f2 BD46     		mov	sp, r7
 7029              	.LCFI282:
 7030              		.cfi_def_cfa_register 13
 7031              		@ sp needed
 7032 00f4 80BD     		pop	{r7, pc}
 7033              	.L441:
 7034 00f6 00BF     		.align	2
 7035              	.L440:
 7036 00f8 00000000 		.word	pxCurrentTCB
 7037 00fc 00000000 		.word	pxReadyTasksLists
 7038 0100 00000000 		.word	uxTopReadyPriority
 7039              		.cfi_endproc
 7040              	.LFE58:
 7042              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 7043              		.align	1
 7044              		.global	uxTaskResetEventItemValue
 7045              		.syntax unified
 7046              		.thumb
 7047              		.thumb_func
 7048              		.fpu fpv4-sp-d16
 7050              	uxTaskResetEventItemValue:
 7051              	.LFB59:
4283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskEnterCritical( void )
4290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
4292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
4296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
4299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 204


4302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			critical section. */
4303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portASSERT_IF_IN_ISR();
4306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskExitCritical( void )
4320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
4324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portENABLE_INTERRUPTS();
4330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
4353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	size_t x;
4355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Start by copying the entire string. */
4357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
4358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 205


4359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
4360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		printed out. */
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pcBuffer[ x ] = ' ';
4364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Terminate. */
4367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pcBuffer[ x ] = ( char ) 0x00;
4368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return the new end of string. */
4370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return &( pcBuffer[ x ] );
4371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
4379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cStatus;
4383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays task names, states and stack usage.
4394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
4400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * snprintf() implementation!).
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskList().
4406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 206


4416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Create a human readable table from the binary data. */
4427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
4428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
4430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eRunning:		cStatus = tskRUNNING_CHAR;
4432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
4435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
4438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eInvalid:		/* Fall through. */
4447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					default:			/* Should not get here, but it is included
4448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										to prevent static checking errors. */
4449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										cStatus = ( char ) 0x00;
4450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				can be printed in tabular form more easily. */
4455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the rest of the string. */
4458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers 
4460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 207


4473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
4474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
4488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * in both absolute and percentage terms.
4500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a full snprintf() implementation!).
4508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 208


4530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* For percentage calculations. */
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTotalTime /= 100UL;
4533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Avoid divide by zero errors. */
4535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalTime > 0UL )
4536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Write the task name to the string, padding with
4546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					spaces so it can be printed in tabular form more
4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					easily. */
4548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
4567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
4568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers
4582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 209


4587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 7052              		.loc 1 4603 1
 7053              		.cfi_startproc
 7054              		@ args = 0, pretend = 0, frame = 8
 7055              		@ frame_needed = 1, uses_anonymous_args = 0
 7056              		@ link register save eliminated.
 7057 0000 80B4     		push	{r7}
 7058              	.LCFI283:
 7059              		.cfi_def_cfa_offset 4
 7060              		.cfi_offset 7, -4
 7061 0002 83B0     		sub	sp, sp, #12
 7062              	.LCFI284:
 7063              		.cfi_def_cfa_offset 16
 7064 0004 00AF     		add	r7, sp, #0
 7065              	.LCFI285:
 7066              		.cfi_def_cfa_register 7
4604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
4605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 7067              		.loc 1 4606 13
 7068 0006 094B     		ldr	r3, .L444
 7069 0008 1B68     		ldr	r3, [r3]
 7070              		.loc 1 4606 11
 7071 000a 9B69     		ldr	r3, [r3, #24]
 7072 000c 7B60     		str	r3, [r7, #4]
4607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queues and semaphores. */
4610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
 7073              		.loc 1 4610 2
 7074 000e 074B     		ldr	r3, .L444
 7075 0010 1B68     		ldr	r3, [r3]
 7076 0012 DA6A     		ldr	r2, [r3, #44]
 7077 0014 054B     		ldr	r3, .L444
 7078 0016 1B68     		ldr	r3, [r3]
 7079 0018 C2F13802 		rsb	r2, r2, #56
 7080 001c 9A61     		str	r2, [r3, #24]
4611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxReturn;
 7081              		.loc 1 4612 9
 7082 001e 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 210


4613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 7083              		.loc 1 4613 1
 7084 0020 1846     		mov	r0, r3
 7085 0022 0C37     		adds	r7, r7, #12
 7086              	.LCFI286:
 7087              		.cfi_def_cfa_offset 4
 7088 0024 BD46     		mov	sp, r7
 7089              	.LCFI287:
 7090              		.cfi_def_cfa_register 13
 7091              		@ sp needed
 7092 0026 5DF8047B 		ldr	r7, [sp], #4
 7093              	.LCFI288:
 7094              		.cfi_restore 7
 7095              		.cfi_def_cfa_offset 0
 7096 002a 7047     		bx	lr
 7097              	.L445:
 7098              		.align	2
 7099              	.L444:
 7100 002c 00000000 		.word	pxCurrentTCB
 7101              		.cfi_endproc
 7102              	.LFE59:
 7104              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 7105              		.align	1
 7106              		.global	pvTaskIncrementMutexHeldCount
 7107              		.syntax unified
 7108              		.thumb
 7109              		.thumb_func
 7110              		.fpu fpv4-sp-d16
 7112              	pvTaskIncrementMutexHeldCount:
 7113              	.LFB60:
4614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 7114              		.loc 1 4619 2
 7115              		.cfi_startproc
 7116              		@ args = 0, pretend = 0, frame = 0
 7117              		@ frame_needed = 1, uses_anonymous_args = 0
 7118              		@ link register save eliminated.
 7119 0000 80B4     		push	{r7}
 7120              	.LCFI289:
 7121              		.cfi_def_cfa_offset 4
 7122              		.cfi_offset 7, -4
 7123 0002 00AF     		add	r7, sp, #0
 7124              	.LCFI290:
 7125              		.cfi_def_cfa_register 7
4620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB != NULL )
 7126              		.loc 1 4622 20
 7127 0004 074B     		ldr	r3, .L449
 7128 0006 1B68     		ldr	r3, [r3]
 7129              		.loc 1 4622 5
 7130 0008 002B     		cmp	r3, #0
 7131 000a 04D0     		beq	.L447
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 211


4623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
 7132              		.loc 1 4624 18
 7133 000c 054B     		ldr	r3, .L449
 7134 000e 1B68     		ldr	r3, [r3]
 7135 0010 5A6D     		ldr	r2, [r3, #84]
 7136              		.loc 1 4624 35
 7137 0012 0132     		adds	r2, r2, #1
 7138 0014 5A65     		str	r2, [r3, #84]
 7139              	.L447:
4625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxCurrentTCB;
 7140              		.loc 1 4627 10
 7141 0016 034B     		ldr	r3, .L449
 7142 0018 1B68     		ldr	r3, [r3]
4628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 7143              		.loc 1 4628 2
 7144 001a 1846     		mov	r0, r3
 7145 001c BD46     		mov	sp, r7
 7146              	.LCFI291:
 7147              		.cfi_def_cfa_register 13
 7148              		@ sp needed
 7149 001e 5DF8047B 		ldr	r7, [sp], #4
 7150              	.LCFI292:
 7151              		.cfi_restore 7
 7152              		.cfi_def_cfa_offset 0
 7153 0022 7047     		bx	lr
 7154              	.L450:
 7155              		.align	2
 7156              	.L449:
 7157 0024 00000000 		.word	pxCurrentTCB
 7158              		.cfi_endproc
 7159              	.LFE60:
 7161              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 7162              		.align	1
 7163              		.global	ulTaskNotifyTake
 7164              		.syntax unified
 7165              		.thumb
 7166              		.thumb_func
 7167              		.fpu fpv4-sp-d16
 7169              	ulTaskNotifyTake:
 7170              	.LFB61:
4629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 7171              		.loc 1 4636 2
 7172              		.cfi_startproc
 7173              		@ args = 0, pretend = 0, frame = 16
 7174              		@ frame_needed = 1, uses_anonymous_args = 0
 7175 0000 80B5     		push	{r7, lr}
 7176              	.LCFI293:
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 212


 7177              		.cfi_def_cfa_offset 8
 7178              		.cfi_offset 7, -8
 7179              		.cfi_offset 14, -4
 7180 0002 84B0     		sub	sp, sp, #16
 7181              	.LCFI294:
 7182              		.cfi_def_cfa_offset 24
 7183 0004 00AF     		add	r7, sp, #0
 7184              	.LCFI295:
 7185              		.cfi_def_cfa_register 7
 7186 0006 7860     		str	r0, [r7, #4]
 7187 0008 3960     		str	r1, [r7]
4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
4638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 7188              		.loc 1 4639 3
 7189 000a FFF7FEFF 		bl	vPortEnterCritical
4640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 7190              		.loc 1 4642 20
 7191 000e 1E4B     		ldr	r3, .L456
 7192 0010 1B68     		ldr	r3, [r3]
 7193 0012 DB6D     		ldr	r3, [r3, #92]
 7194              		.loc 1 4642 6
 7195 0014 002B     		cmp	r3, #0
 7196 0016 13D1     		bne	.L452
4643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 7197              		.loc 1 4645 17
 7198 0018 1B4B     		ldr	r3, .L456
 7199 001a 1B68     		ldr	r3, [r3]
 7200              		.loc 1 4645 33
 7201 001c 0122     		movs	r2, #1
 7202 001e 83F86020 		strb	r2, [r3, #96]
4646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 7203              		.loc 1 4647 7
 7204 0022 3B68     		ldr	r3, [r7]
 7205 0024 002B     		cmp	r3, #0
 7206 0026 0BD0     		beq	.L452
4648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 7207              		.loc 1 4649 6
 7208 0028 0121     		movs	r1, #1
 7209 002a 3868     		ldr	r0, [r7]
 7210 002c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
 7211              		.loc 1 4656 6
 7212 0030 164B     		ldr	r3, .L456+4
 7213 0032 4FF08052 		mov	r2, #268435456
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 213


 7214 0036 1A60     		str	r2, [r3]
 7215              		.syntax unified
 7216              	@ 4656 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 7217 0038 BFF34F8F 		dsb
 7218              	@ 0 "" 2
 7219              	@ 4656 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 7220 003c BFF36F8F 		isb
 7221              	@ 0 "" 2
 7222              		.thumb
 7223              		.syntax unified
 7224              	.L452:
4657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 7225              		.loc 1 4668 3
 7226 0040 FFF7FEFF 		bl	vPortExitCritical
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 7227              		.loc 1 4670 3
 7228 0044 FFF7FEFF 		bl	vPortEnterCritical
4671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
 7229              		.loc 1 4673 27
 7230 0048 0F4B     		ldr	r3, .L456
 7231 004a 1B68     		ldr	r3, [r3]
 7232              		.loc 1 4673 13
 7233 004c DB6D     		ldr	r3, [r3, #92]
 7234 004e FB60     		str	r3, [r7, #12]
4674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulReturn != 0UL )
 7235              		.loc 1 4675 6
 7236 0050 FB68     		ldr	r3, [r7, #12]
 7237 0052 002B     		cmp	r3, #0
 7238 0054 0CD0     		beq	.L453
4676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
 7239              		.loc 1 4677 7
 7240 0056 7B68     		ldr	r3, [r7, #4]
 7241 0058 002B     		cmp	r3, #0
 7242 005a 04D0     		beq	.L454
4678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
 7243              		.loc 1 4679 18
 7244 005c 0A4B     		ldr	r3, .L456
 7245 005e 1B68     		ldr	r3, [r3]
 7246              		.loc 1 4679 36
 7247 0060 0022     		movs	r2, #0
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 214


 7248 0062 DA65     		str	r2, [r3, #92]
 7249 0064 04E0     		b	.L453
 7250              	.L454:
4680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 7251              		.loc 1 4683 18
 7252 0066 084B     		ldr	r3, .L456
 7253 0068 1B68     		ldr	r3, [r3]
 7254              		.loc 1 4683 47
 7255 006a FA68     		ldr	r2, [r7, #12]
 7256 006c 013A     		subs	r2, r2, #1
 7257              		.loc 1 4683 36
 7258 006e DA65     		str	r2, [r3, #92]
 7259              	.L453:
4684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 7260              		.loc 1 4691 16
 7261 0070 054B     		ldr	r3, .L456
 7262 0072 1B68     		ldr	r3, [r3]
 7263              		.loc 1 4691 32
 7264 0074 0022     		movs	r2, #0
 7265 0076 83F86020 		strb	r2, [r3, #96]
4692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 7266              		.loc 1 4693 3
 7267 007a FFF7FEFF 		bl	vPortExitCritical
4694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
 7268              		.loc 1 4695 10
 7269 007e FB68     		ldr	r3, [r7, #12]
4696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 7270              		.loc 1 4696 2
 7271 0080 1846     		mov	r0, r3
 7272 0082 1037     		adds	r7, r7, #16
 7273              	.LCFI296:
 7274              		.cfi_def_cfa_offset 8
 7275 0084 BD46     		mov	sp, r7
 7276              	.LCFI297:
 7277              		.cfi_def_cfa_register 13
 7278              		@ sp needed
 7279 0086 80BD     		pop	{r7, pc}
 7280              	.L457:
 7281              		.align	2
 7282              	.L456:
 7283 0088 00000000 		.word	pxCurrentTCB
 7284 008c 04ED00E0 		.word	-536810236
 7285              		.cfi_endproc
 7286              	.LFE61:
 7288              		.section	.text.xTaskNotifyWait,"ax",%progbits
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 215


 7289              		.align	1
 7290              		.global	xTaskNotifyWait
 7291              		.syntax unified
 7292              		.thumb
 7293              		.thumb_func
 7294              		.fpu fpv4-sp-d16
 7296              	xTaskNotifyWait:
 7297              	.LFB62:
4697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 7298              		.loc 1 4704 2
 7299              		.cfi_startproc
 7300              		@ args = 0, pretend = 0, frame = 24
 7301              		@ frame_needed = 1, uses_anonymous_args = 0
 7302 0000 80B5     		push	{r7, lr}
 7303              	.LCFI298:
 7304              		.cfi_def_cfa_offset 8
 7305              		.cfi_offset 7, -8
 7306              		.cfi_offset 14, -4
 7307 0002 86B0     		sub	sp, sp, #24
 7308              	.LCFI299:
 7309              		.cfi_def_cfa_offset 32
 7310 0004 00AF     		add	r7, sp, #0
 7311              	.LCFI300:
 7312              		.cfi_def_cfa_register 7
 7313 0006 F860     		str	r0, [r7, #12]
 7314 0008 B960     		str	r1, [r7, #8]
 7315 000a 7A60     		str	r2, [r7, #4]
 7316 000c 3B60     		str	r3, [r7]
4705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 7317              		.loc 1 4707 3
 7318 000e FFF7FEFF 		bl	vPortEnterCritical
4708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 7319              		.loc 1 4710 20
 7320 0012 264B     		ldr	r3, .L464
 7321 0014 1B68     		ldr	r3, [r3]
 7322 0016 93F86030 		ldrb	r3, [r3, #96]
 7323 001a DBB2     		uxtb	r3, r3
 7324              		.loc 1 4710 6
 7325 001c 022B     		cmp	r3, #2
 7326 001e 1AD0     		beq	.L459
4711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				clear the value to zero. */
4715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 7327              		.loc 1 4715 35
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 216


 7328 0020 224B     		ldr	r3, .L464
 7329 0022 1B68     		ldr	r3, [r3]
 7330 0024 D96D     		ldr	r1, [r3, #92]
 7331              		.loc 1 4715 38
 7332 0026 FA68     		ldr	r2, [r7, #12]
 7333 0028 D243     		mvns	r2, r2
 7334              		.loc 1 4715 35
 7335 002a 0A40     		ands	r2, r2, r1
 7336 002c DA65     		str	r2, [r3, #92]
4716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 7337              		.loc 1 4718 17
 7338 002e 1F4B     		ldr	r3, .L464
 7339 0030 1B68     		ldr	r3, [r3]
 7340              		.loc 1 4718 33
 7341 0032 0122     		movs	r2, #1
 7342 0034 83F86020 		strb	r2, [r3, #96]
4719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 7343              		.loc 1 4720 7
 7344 0038 3B68     		ldr	r3, [r7]
 7345 003a 002B     		cmp	r3, #0
 7346 003c 0BD0     		beq	.L459
4721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 7347              		.loc 1 4722 6
 7348 003e 0121     		movs	r1, #1
 7349 0040 3868     		ldr	r0, [r7]
 7350 0042 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
 7351              		.loc 1 4729 6
 7352 0046 1A4B     		ldr	r3, .L464+4
 7353 0048 4FF08052 		mov	r2, #268435456
 7354 004c 1A60     		str	r2, [r3]
 7355              		.syntax unified
 7356              	@ 4729 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 7357 004e BFF34F8F 		dsb
 7358              	@ 0 "" 2
 7359              	@ 4729 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 7360 0052 BFF36F8F 		isb
 7361              	@ 0 "" 2
 7362              		.thumb
 7363              		.syntax unified
 7364              	.L459:
4730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 217


4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 7365              		.loc 1 4741 3
 7366 0056 FFF7FEFF 		bl	vPortExitCritical
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 7367              		.loc 1 4743 3
 7368 005a FFF7FEFF 		bl	vPortEnterCritical
4744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulNotificationValue != NULL )
 7369              		.loc 1 4747 6
 7370 005e 7B68     		ldr	r3, [r7, #4]
 7371 0060 002B     		cmp	r3, #0
 7372 0062 04D0     		beq	.L460
4748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Output the current notification value, which may or may not
4750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				have changed. */
4751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 7373              		.loc 1 4751 41
 7374 0064 114B     		ldr	r3, .L464
 7375 0066 1B68     		ldr	r3, [r3]
 7376 0068 DA6D     		ldr	r2, [r3, #92]
 7377              		.loc 1 4751 27
 7378 006a 7B68     		ldr	r3, [r7, #4]
 7379 006c 1A60     		str	r2, [r3]
 7380              	.L460:
4752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked because of a timeout. */
4758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 7381              		.loc 1 4758 20
 7382 006e 0F4B     		ldr	r3, .L464
 7383 0070 1B68     		ldr	r3, [r3]
 7384 0072 93F86030 		ldrb	r3, [r3, #96]
 7385 0076 DBB2     		uxtb	r3, r3
 7386              		.loc 1 4758 6
 7387 0078 022B     		cmp	r3, #2
 7388 007a 02D0     		beq	.L461
4759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was not received. */
4761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
 7389              		.loc 1 4761 13
 7390 007c 0023     		movs	r3, #0
 7391 007e 7B61     		str	r3, [r7, #20]
 7392 0080 08E0     		b	.L462
 7393              	.L461:
4762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 218


4764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was already pending or a notification was
4766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				received while the task was waiting. */
4767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 7394              		.loc 1 4767 35
 7395 0082 0A4B     		ldr	r3, .L464
 7396 0084 1B68     		ldr	r3, [r3]
 7397 0086 D96D     		ldr	r1, [r3, #92]
 7398              		.loc 1 4767 38
 7399 0088 BA68     		ldr	r2, [r7, #8]
 7400 008a D243     		mvns	r2, r2
 7401              		.loc 1 4767 35
 7402 008c 0A40     		ands	r2, r2, r1
 7403 008e DA65     		str	r2, [r3, #92]
4768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 7404              		.loc 1 4768 13
 7405 0090 0123     		movs	r3, #1
 7406 0092 7B61     		str	r3, [r7, #20]
 7407              	.L462:
4769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 7408              		.loc 1 4771 16
 7409 0094 054B     		ldr	r3, .L464
 7410 0096 1B68     		ldr	r3, [r3]
 7411              		.loc 1 4771 32
 7412 0098 0022     		movs	r2, #0
 7413 009a 83F86020 		strb	r2, [r3, #96]
4772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 7414              		.loc 1 4773 3
 7415 009e FFF7FEFF 		bl	vPortExitCritical
4774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 7416              		.loc 1 4775 10
 7417 00a2 7B69     		ldr	r3, [r7, #20]
4776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 7418              		.loc 1 4776 2
 7419 00a4 1846     		mov	r0, r3
 7420 00a6 1837     		adds	r7, r7, #24
 7421              	.LCFI301:
 7422              		.cfi_def_cfa_offset 8
 7423 00a8 BD46     		mov	sp, r7
 7424              	.LCFI302:
 7425              		.cfi_def_cfa_register 13
 7426              		@ sp needed
 7427 00aa 80BD     		pop	{r7, pc}
 7428              	.L465:
 7429              		.align	2
 7430              	.L464:
 7431 00ac 00000000 		.word	pxCurrentTCB
 7432 00b0 04ED00E0 		.word	-536810236
 7433              		.cfi_endproc
 7434              	.LFE62:
 7436              		.section	.text.xTaskGenericNotify,"ax",%progbits
 7437              		.align	1
 7438              		.global	xTaskGenericNotify
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 219


 7439              		.syntax unified
 7440              		.thumb
 7441              		.thumb_func
 7442              		.fpu fpv4-sp-d16
 7444              	xTaskGenericNotify:
 7445              	.LFB63:
4777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 7446              		.loc 1 4784 2
 7447              		.cfi_startproc
 7448              		@ args = 0, pretend = 0, frame = 40
 7449              		@ frame_needed = 1, uses_anonymous_args = 0
 7450 0000 80B5     		push	{r7, lr}
 7451              	.LCFI303:
 7452              		.cfi_def_cfa_offset 8
 7453              		.cfi_offset 7, -8
 7454              		.cfi_offset 14, -4
 7455 0002 8AB0     		sub	sp, sp, #40
 7456              	.LCFI304:
 7457              		.cfi_def_cfa_offset 48
 7458 0004 00AF     		add	r7, sp, #0
 7459              	.LCFI305:
 7460              		.cfi_def_cfa_register 7
 7461 0006 F860     		str	r0, [r7, #12]
 7462 0008 B960     		str	r1, [r7, #8]
 7463 000a 3B60     		str	r3, [r7]
 7464 000c 1346     		mov	r3, r2
 7465 000e FB71     		strb	r3, [r7, #7]
4785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 7466              		.loc 1 4786 13
 7467 0010 0123     		movs	r3, #1
 7468 0012 7B62     		str	r3, [r7, #36]
4787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 7469              		.loc 1 4789 3
 7470 0014 FB68     		ldr	r3, [r7, #12]
 7471 0016 002B     		cmp	r3, #0
 7472 0018 0AD1     		bne	.L467
 7473              	.LBB231:
 7474              	.LBB232:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7475              		.loc 2 195 2
 7476              		.syntax unified
 7477              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7478 001a 4FF05003 			mov r3, #80												
 7479 001e 83F31188 		msr basepri, r3											
 7480 0022 BFF36F8F 		isb														
 7481 0026 BFF34F8F 		dsb														
 7482              	
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 220


 7483              	@ 0 "" 2
 7484              		.thumb
 7485              		.syntax unified
 7486 002a BB61     		str	r3, [r7, #24]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7487              		.loc 2 203 1
 7488 002c 00BF     		nop
 7489              	.L468:
 7490              	.LBE232:
 7491              	.LBE231:
 7492              		.loc 1 4789 3 discriminator 1
 7493 002e FEE7     		b	.L468
 7494              	.L467:
4790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 7495              		.loc 1 4790 9
 7496 0030 FB68     		ldr	r3, [r7, #12]
 7497 0032 3B62     		str	r3, [r7, #32]
4791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 7498              		.loc 1 4792 3
 7499 0034 FFF7FEFF 		bl	vPortEnterCritical
4793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 7500              		.loc 1 4794 6
 7501 0038 3B68     		ldr	r3, [r7]
 7502 003a 002B     		cmp	r3, #0
 7503 003c 03D0     		beq	.L469
4795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 7504              		.loc 1 4796 42
 7505 003e 3B6A     		ldr	r3, [r7, #32]
 7506 0040 DA6D     		ldr	r2, [r3, #92]
 7507              		.loc 1 4796 35
 7508 0042 3B68     		ldr	r3, [r7]
 7509 0044 1A60     		str	r2, [r3]
 7510              	.L469:
4797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 7511              		.loc 1 4799 26
 7512 0046 3B6A     		ldr	r3, [r7, #32]
 7513 0048 93F86030 		ldrb	r3, [r3, #96]
 7514 004c FB77     		strb	r3, [r7, #31]
4800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 7515              		.loc 1 4801 25
 7516 004e 3B6A     		ldr	r3, [r7, #32]
 7517 0050 0222     		movs	r2, #2
 7518 0052 83F86020 		strb	r2, [r3, #96]
4802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
 7519              		.loc 1 4803 4
 7520 0056 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7521 0058 042B     		cmp	r3, #4
 7522 005a 28D8     		bhi	.L470
 7523 005c 01A2     		adr	r2, .L472
 7524 005e 52F823F0 		ldr	pc, [r2, r3, lsl #2]
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 221


 7525 0062 00BF     		.p2align 2
 7526              	.L472:
 7527 0064 CF000000 		.word	.L487+1
 7528 0068 79000000 		.word	.L475+1
 7529 006c 87000000 		.word	.L474+1
 7530 0070 93000000 		.word	.L473+1
 7531 0074 9B000000 		.word	.L471+1
 7532              		.p2align 1
 7533              	.L475:
4804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 7534              		.loc 1 4806 29
 7535 0078 3B6A     		ldr	r3, [r7, #32]
 7536 007a DA6D     		ldr	r2, [r3, #92]
 7537 007c BB68     		ldr	r3, [r7, #8]
 7538 007e 1A43     		orrs	r2, r2, r3
 7539 0080 3B6A     		ldr	r3, [r7, #32]
 7540 0082 DA65     		str	r2, [r3, #92]
4807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7541              		.loc 1 4807 6
 7542 0084 26E0     		b	.L477
 7543              	.L474:
4808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 7544              		.loc 1 4810 13
 7545 0086 3B6A     		ldr	r3, [r7, #32]
 7546 0088 DB6D     		ldr	r3, [r3, #92]
 7547              		.loc 1 4810 32
 7548 008a 5A1C     		adds	r2, r3, #1
 7549 008c 3B6A     		ldr	r3, [r7, #32]
 7550 008e DA65     		str	r2, [r3, #92]
4811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7551              		.loc 1 4811 6
 7552 0090 20E0     		b	.L477
 7553              	.L473:
4812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 7554              		.loc 1 4814 29
 7555 0092 3B6A     		ldr	r3, [r7, #32]
 7556 0094 BA68     		ldr	r2, [r7, #8]
 7557 0096 DA65     		str	r2, [r3, #92]
4815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7558              		.loc 1 4815 6
 7559 0098 1CE0     		b	.L477
 7560              	.L471:
4816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 7561              		.loc 1 4818 8
 7562 009a FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 7563 009c 022B     		cmp	r3, #2
 7564 009e 03D0     		beq	.L478
4819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 222


 7565              		.loc 1 4820 30
 7566 00a0 3B6A     		ldr	r3, [r7, #32]
 7567 00a2 BA68     		ldr	r2, [r7, #8]
 7568 00a4 DA65     		str	r2, [r3, #92]
4821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7569              		.loc 1 4827 6
 7570 00a6 15E0     		b	.L477
 7571              	.L478:
4825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 7572              		.loc 1 4825 15
 7573 00a8 0023     		movs	r3, #0
 7574 00aa 7B62     		str	r3, [r7, #36]
 7575              		.loc 1 4827 6
 7576 00ac 12E0     		b	.L477
 7577              	.L470:
4828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction:
4830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				default:
4835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Should not get here if all enums are handled.
4836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Artificially force an assert by testing a value the
4837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					compiler can't assume is const. */
4838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 7578              		.loc 1 4838 6
 7579 00ae 3B6A     		ldr	r3, [r7, #32]
 7580 00b0 DB6D     		ldr	r3, [r3, #92]
 7581 00b2 B3F1FF3F 		cmp	r3, #-1
 7582 00b6 0CD0     		beq	.L488
 7583              	.LBB233:
 7584              	.LBB234:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7585              		.loc 2 195 2
 7586              		.syntax unified
 7587              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7588 00b8 4FF05003 			mov r3, #80												
 7589 00bc 83F31188 		msr basepri, r3											
 7590 00c0 BFF36F8F 		isb														
 7591 00c4 BFF34F8F 		dsb														
 7592              	
 7593              	@ 0 "" 2
 7594              		.thumb
 7595              		.syntax unified
 7596 00c8 7B61     		str	r3, [r7, #20]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7597              		.loc 2 203 1
 7598 00ca 00BF     		nop
 7599              	.L481:
 7600              	.LBE234:
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 223


 7601              	.LBE233:
 7602              		.loc 1 4838 6 discriminator 2
 7603 00cc FEE7     		b	.L481
 7604              	.L487:
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 7605              		.loc 1 4832 6
 7606 00ce 00BF     		nop
 7607 00d0 00E0     		b	.L477
 7608              	.L488:
4839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7609              		.loc 1 4840 6
 7610 00d2 00BF     		nop
 7611              	.L477:
4841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY();
4844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 7612              		.loc 1 4847 6
 7613 00d4 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 7614 00d6 012B     		cmp	r3, #1
 7615 00d8 3CD1     		bne	.L482
4848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 7616              		.loc 1 4849 14
 7617 00da 3B6A     		ldr	r3, [r7, #32]
 7618 00dc 0433     		adds	r3, r3, #4
 7619 00de 1846     		mov	r0, r3
 7620 00e0 FFF7FEFF 		bl	uxListRemove
4850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 7621              		.loc 1 4850 5
 7622 00e4 3B6A     		ldr	r3, [r7, #32]
 7623 00e6 DA6A     		ldr	r2, [r3, #44]
 7624 00e8 1E4B     		ldr	r3, .L489
 7625 00ea 1B68     		ldr	r3, [r3]
 7626 00ec 9A42     		cmp	r2, r3
 7627 00ee 03D9     		bls	.L483
 7628              		.loc 1 4850 5 is_stmt 0 discriminator 1
 7629 00f0 3B6A     		ldr	r3, [r7, #32]
 7630 00f2 DB6A     		ldr	r3, [r3, #44]
 7631 00f4 1B4A     		ldr	r2, .L489
 7632 00f6 1360     		str	r3, [r2]
 7633              	.L483:
 7634              		.loc 1 4850 5 discriminator 3
 7635 00f8 3B6A     		ldr	r3, [r7, #32]
 7636 00fa DA6A     		ldr	r2, [r3, #44]
 7637 00fc 1346     		mov	r3, r2
 7638 00fe 9B00     		lsls	r3, r3, #2
 7639 0100 1344     		add	r3, r3, r2
 7640 0102 9B00     		lsls	r3, r3, #2
 7641 0104 184A     		ldr	r2, .L489+4
 7642 0106 1A44     		add	r2, r2, r3
 7643 0108 3B6A     		ldr	r3, [r7, #32]
 7644 010a 0433     		adds	r3, r3, #4
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 224


 7645 010c 1946     		mov	r1, r3
 7646 010e 1046     		mov	r0, r2
 7647 0110 FFF7FEFF 		bl	vListInsertEnd
4851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 7648              		.loc 1 4853 5 is_stmt 1 discriminator 3
 7649 0114 3B6A     		ldr	r3, [r7, #32]
 7650 0116 9B6A     		ldr	r3, [r3, #40]
 7651 0118 002B     		cmp	r3, #0
 7652 011a 0AD0     		beq	.L484
 7653              	.LBB235:
 7654              	.LBB236:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7655              		.loc 2 195 2
 7656              		.syntax unified
 7657              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7658 011c 4FF05003 			mov r3, #80												
 7659 0120 83F31188 		msr basepri, r3											
 7660 0124 BFF36F8F 		isb														
 7661 0128 BFF34F8F 		dsb														
 7662              	
 7663              	@ 0 "" 2
 7664              		.thumb
 7665              		.syntax unified
 7666 012c 3B61     		str	r3, [r7, #16]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7667              		.loc 2 203 1
 7668 012e 00BF     		nop
 7669              	.L485:
 7670              	.LBE236:
 7671              	.LBE235:
 7672              		.loc 1 4853 5 discriminator 3
 7673 0130 FEE7     		b	.L485
 7674              	.L484:
4854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					because it will automatically get reset to a new value when
4862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tickless idling is used it might be more important to enter
4864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					earliest possible time. */
4867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
 7675              		.loc 1 4867 6
 7676 0132 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
4868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
4870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 7677              		.loc 1 4871 14
 7678 0136 3B6A     		ldr	r3, [r7, #32]
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 225


 7679 0138 DA6A     		ldr	r2, [r3, #44]
 7680              		.loc 1 4871 41
 7681 013a 0C4B     		ldr	r3, .L489+8
 7682 013c 1B68     		ldr	r3, [r3]
 7683 013e DB6A     		ldr	r3, [r3, #44]
 7684              		.loc 1 4871 7
 7685 0140 9A42     		cmp	r2, r3
 7686 0142 07D9     		bls	.L482
4872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 7687              		.loc 1 4875 6
 7688 0144 0A4B     		ldr	r3, .L489+12
 7689 0146 4FF08052 		mov	r2, #268435456
 7690 014a 1A60     		str	r2, [r3]
 7691              		.syntax unified
 7692              	@ 4875 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 7693 014c BFF34F8F 		dsb
 7694              	@ 0 "" 2
 7695              	@ 4875 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 7696 0150 BFF36F8F 		isb
 7697              	@ 0 "" 2
 7698              		.thumb
 7699              		.syntax unified
 7700              	.L482:
4876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 7701              		.loc 1 4887 3
 7702 0154 FFF7FEFF 		bl	vPortExitCritical
4888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 7703              		.loc 1 4889 10
 7704 0158 7B6A     		ldr	r3, [r7, #36]
4890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 7705              		.loc 1 4890 2
 7706 015a 1846     		mov	r0, r3
 7707 015c 2837     		adds	r7, r7, #40
 7708              	.LCFI306:
 7709              		.cfi_def_cfa_offset 8
 7710 015e BD46     		mov	sp, r7
 7711              	.LCFI307:
 7712              		.cfi_def_cfa_register 13
 7713              		@ sp needed
 7714 0160 80BD     		pop	{r7, pc}
 7715              	.L490:
 7716 0162 00BF     		.align	2
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 226


 7717              	.L489:
 7718 0164 00000000 		.word	uxTopReadyPriority
 7719 0168 00000000 		.word	pxReadyTasksLists
 7720 016c 00000000 		.word	pxCurrentTCB
 7721 0170 04ED00E0 		.word	-536810236
 7722              		.cfi_endproc
 7723              	.LFE63:
 7725              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 7726              		.align	1
 7727              		.global	xTaskGenericNotifyFromISR
 7728              		.syntax unified
 7729              		.thumb
 7730              		.thumb_func
 7731              		.fpu fpv4-sp-d16
 7733              	xTaskGenericNotifyFromISR:
 7734              	.LFB64:
4891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 7735              		.loc 1 4898 2
 7736              		.cfi_startproc
 7737              		@ args = 4, pretend = 0, frame = 56
 7738              		@ frame_needed = 1, uses_anonymous_args = 0
 7739 0000 80B5     		push	{r7, lr}
 7740              	.LCFI308:
 7741              		.cfi_def_cfa_offset 8
 7742              		.cfi_offset 7, -8
 7743              		.cfi_offset 14, -4
 7744 0002 8EB0     		sub	sp, sp, #56
 7745              	.LCFI309:
 7746              		.cfi_def_cfa_offset 64
 7747 0004 00AF     		add	r7, sp, #0
 7748              	.LCFI310:
 7749              		.cfi_def_cfa_register 7
 7750 0006 F860     		str	r0, [r7, #12]
 7751 0008 B960     		str	r1, [r7, #8]
 7752 000a 3B60     		str	r3, [r7]
 7753 000c 1346     		mov	r3, r2
 7754 000e FB71     		strb	r3, [r7, #7]
4899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 7755              		.loc 1 4901 13
 7756 0010 0123     		movs	r3, #1
 7757 0012 7B63     		str	r3, [r7, #52]
4902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 7758              		.loc 1 4904 3
 7759 0014 FB68     		ldr	r3, [r7, #12]
 7760 0016 002B     		cmp	r3, #0
 7761 0018 0AD1     		bne	.L492
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 227


 7762              	.LBB237:
 7763              	.LBB238:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7764              		.loc 2 195 2
 7765              		.syntax unified
 7766              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7767 001a 4FF05003 			mov r3, #80												
 7768 001e 83F31188 		msr basepri, r3											
 7769 0022 BFF36F8F 		isb														
 7770 0026 BFF34F8F 		dsb														
 7771              	
 7772              	@ 0 "" 2
 7773              		.thumb
 7774              		.syntax unified
 7775 002a 7B62     		str	r3, [r7, #36]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7776              		.loc 2 203 1
 7777 002c 00BF     		nop
 7778              	.L493:
 7779              	.LBE238:
 7780              	.LBE237:
 7781              		.loc 1 4904 3 discriminator 1
 7782 002e FEE7     		b	.L493
 7783              	.L492:
4905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 7784              		.loc 1 4922 3
 7785 0030 FFF7FEFF 		bl	vPortValidateInterruptPriority
4923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 7786              		.loc 1 4924 9
 7787 0034 FB68     		ldr	r3, [r7, #12]
 7788 0036 3B63     		str	r3, [r7, #48]
 7789              	.LBB239:
 7790              	.LBB240:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7791              		.loc 2 211 2
 7792              		.syntax unified
 7793              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7794 0038 EFF31182 			mrs r2, basepri											
 7795 003c 4FF05003 		mov r3, #80												
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 228


 7796 0040 83F31188 		msr basepri, r3											
 7797 0044 BFF36F8F 		isb														
 7798 0048 BFF34F8F 		dsb														
 7799              	
 7800              	@ 0 "" 2
 7801              		.thumb
 7802              		.syntax unified
 7803 004c 3A62     		str	r2, [r7, #32]
 7804 004e FB61     		str	r3, [r7, #28]
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 7805              		.loc 2 223 9
 7806 0050 3B6A     		ldr	r3, [r7, #32]
 7807              	.LBE240:
 7808              	.LBE239:
4925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 7809              		.loc 1 4926 28
 7810 0052 FB62     		str	r3, [r7, #44]
4927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 7811              		.loc 1 4928 6
 7812 0054 3B68     		ldr	r3, [r7]
 7813 0056 002B     		cmp	r3, #0
 7814 0058 03D0     		beq	.L495
4929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 7815              		.loc 1 4930 42
 7816 005a 3B6B     		ldr	r3, [r7, #48]
 7817 005c DA6D     		ldr	r2, [r3, #92]
 7818              		.loc 1 4930 35
 7819 005e 3B68     		ldr	r3, [r7]
 7820 0060 1A60     		str	r2, [r3]
 7821              	.L495:
4931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 7822              		.loc 1 4933 26
 7823 0062 3B6B     		ldr	r3, [r7, #48]
 7824 0064 93F86030 		ldrb	r3, [r3, #96]
 7825 0068 87F82B30 		strb	r3, [r7, #43]
4934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 7826              		.loc 1 4934 25
 7827 006c 3B6B     		ldr	r3, [r7, #48]
 7828 006e 0222     		movs	r2, #2
 7829 0070 83F86020 		strb	r2, [r3, #96]
4935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
 7830              		.loc 1 4936 4
 7831 0074 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7832 0076 042B     		cmp	r3, #4
 7833 0078 28D8     		bhi	.L496
 7834 007a 01A2     		adr	r2, .L498
 7835 007c 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 7836              		.p2align 2
 7837              	.L498:
 7838 0080 ED000000 		.word	.L516+1
 7839 0084 95000000 		.word	.L501+1
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 229


 7840 0088 A3000000 		.word	.L500+1
 7841 008c AF000000 		.word	.L499+1
 7842 0090 B7000000 		.word	.L497+1
 7843              		.p2align 1
 7844              	.L501:
4937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 7845              		.loc 1 4939 29
 7846 0094 3B6B     		ldr	r3, [r7, #48]
 7847 0096 DA6D     		ldr	r2, [r3, #92]
 7848 0098 BB68     		ldr	r3, [r7, #8]
 7849 009a 1A43     		orrs	r2, r2, r3
 7850 009c 3B6B     		ldr	r3, [r7, #48]
 7851 009e DA65     		str	r2, [r3, #92]
4940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7852              		.loc 1 4940 6
 7853 00a0 27E0     		b	.L503
 7854              	.L500:
4941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 7855              		.loc 1 4943 13
 7856 00a2 3B6B     		ldr	r3, [r7, #48]
 7857 00a4 DB6D     		ldr	r3, [r3, #92]
 7858              		.loc 1 4943 32
 7859 00a6 5A1C     		adds	r2, r3, #1
 7860 00a8 3B6B     		ldr	r3, [r7, #48]
 7861 00aa DA65     		str	r2, [r3, #92]
4944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7862              		.loc 1 4944 6
 7863 00ac 21E0     		b	.L503
 7864              	.L499:
4945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 7865              		.loc 1 4947 29
 7866 00ae 3B6B     		ldr	r3, [r7, #48]
 7867 00b0 BA68     		ldr	r2, [r7, #8]
 7868 00b2 DA65     		str	r2, [r3, #92]
4948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7869              		.loc 1 4948 6
 7870 00b4 1DE0     		b	.L503
 7871              	.L497:
4949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 7872              		.loc 1 4951 8
 7873 00b6 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 7874 00ba 022B     		cmp	r3, #2
 7875 00bc 03D0     		beq	.L504
4952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 7876              		.loc 1 4953 30
 7877 00be 3B6B     		ldr	r3, [r7, #48]
 7878 00c0 BA68     		ldr	r2, [r7, #8]
 7879 00c2 DA65     		str	r2, [r3, #92]
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 230


4954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7880              		.loc 1 4960 6
 7881 00c4 15E0     		b	.L503
 7882              	.L504:
4958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 7883              		.loc 1 4958 15
 7884 00c6 0023     		movs	r3, #0
 7885 00c8 7B63     		str	r3, [r7, #52]
 7886              		.loc 1 4960 6
 7887 00ca 12E0     		b	.L503
 7888              	.L496:
4961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction :
4963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				default:
4968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Should not get here if all enums are handled.
4969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Artificially force an assert by testing a value the
4970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					compiler can't assume is const. */
4971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 7889              		.loc 1 4971 6
 7890 00cc 3B6B     		ldr	r3, [r7, #48]
 7891 00ce DB6D     		ldr	r3, [r3, #92]
 7892 00d0 B3F1FF3F 		cmp	r3, #-1
 7893 00d4 0CD0     		beq	.L517
 7894              	.LBB241:
 7895              	.LBB242:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7896              		.loc 2 195 2
 7897              		.syntax unified
 7898              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7899 00d6 4FF05003 			mov r3, #80												
 7900 00da 83F31188 		msr basepri, r3											
 7901 00de BFF36F8F 		isb														
 7902 00e2 BFF34F8F 		dsb														
 7903              	
 7904              	@ 0 "" 2
 7905              		.thumb
 7906              		.syntax unified
 7907 00e6 BB61     		str	r3, [r7, #24]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7908              		.loc 2 203 1
 7909 00e8 00BF     		nop
 7910              	.L507:
 7911              	.LBE242:
 7912              	.LBE241:
 7913              		.loc 1 4971 6 discriminator 2
 7914 00ea FEE7     		b	.L507
 7915              	.L516:
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 231


4965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 7916              		.loc 1 4965 6
 7917 00ec 00BF     		nop
 7918 00ee 00E0     		b	.L503
 7919              	.L517:
4972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7920              		.loc 1 4972 6
 7921 00f0 00BF     		nop
 7922              	.L503:
4973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 7923              		.loc 1 4979 6
 7924 00f2 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 7925 00f6 012B     		cmp	r3, #1
 7926 00f8 46D1     		bne	.L508
4980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 7927              		.loc 1 4982 5
 7928 00fa 3B6B     		ldr	r3, [r7, #48]
 7929 00fc 9B6A     		ldr	r3, [r3, #40]
 7930 00fe 002B     		cmp	r3, #0
 7931 0100 0AD0     		beq	.L509
 7932              	.LBB243:
 7933              	.LBB244:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7934              		.loc 2 195 2
 7935              		.syntax unified
 7936              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7937 0102 4FF05003 			mov r3, #80												
 7938 0106 83F31188 		msr basepri, r3											
 7939 010a BFF36F8F 		isb														
 7940 010e BFF34F8F 		dsb														
 7941              	
 7942              	@ 0 "" 2
 7943              		.thumb
 7944              		.syntax unified
 7945 0112 7B61     		str	r3, [r7, #20]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7946              		.loc 2 203 1
 7947 0114 00BF     		nop
 7948              	.L510:
 7949              	.LBE244:
 7950              	.LBE243:
 7951              		.loc 1 4982 5 discriminator 3
 7952 0116 FEE7     		b	.L510
 7953              	.L509:
4983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 7954              		.loc 1 4984 30
 7955 0118 214B     		ldr	r3, .L518
 7956 011a 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 232


 7957              		.loc 1 4984 7
 7958 011c 002B     		cmp	r3, #0
 7959 011e 1DD1     		bne	.L511
4985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 7960              		.loc 1 4986 15
 7961 0120 3B6B     		ldr	r3, [r7, #48]
 7962 0122 0433     		adds	r3, r3, #4
 7963 0124 1846     		mov	r0, r3
 7964 0126 FFF7FEFF 		bl	uxListRemove
4987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 7965              		.loc 1 4987 6
 7966 012a 3B6B     		ldr	r3, [r7, #48]
 7967 012c DA6A     		ldr	r2, [r3, #44]
 7968 012e 1D4B     		ldr	r3, .L518+4
 7969 0130 1B68     		ldr	r3, [r3]
 7970 0132 9A42     		cmp	r2, r3
 7971 0134 03D9     		bls	.L512
 7972              		.loc 1 4987 6 is_stmt 0 discriminator 1
 7973 0136 3B6B     		ldr	r3, [r7, #48]
 7974 0138 DB6A     		ldr	r3, [r3, #44]
 7975 013a 1A4A     		ldr	r2, .L518+4
 7976 013c 1360     		str	r3, [r2]
 7977              	.L512:
 7978              		.loc 1 4987 6 discriminator 3
 7979 013e 3B6B     		ldr	r3, [r7, #48]
 7980 0140 DA6A     		ldr	r2, [r3, #44]
 7981 0142 1346     		mov	r3, r2
 7982 0144 9B00     		lsls	r3, r3, #2
 7983 0146 1344     		add	r3, r3, r2
 7984 0148 9B00     		lsls	r3, r3, #2
 7985 014a 174A     		ldr	r2, .L518+8
 7986 014c 1A44     		add	r2, r2, r3
 7987 014e 3B6B     		ldr	r3, [r7, #48]
 7988 0150 0433     		adds	r3, r3, #4
 7989 0152 1946     		mov	r1, r3
 7990 0154 1046     		mov	r0, r2
 7991 0156 FFF7FEFF 		bl	vListInsertEnd
 7992 015a 05E0     		b	.L513
 7993              	.L511:
4988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 7994              		.loc 1 4993 6 is_stmt 1
 7995 015c 3B6B     		ldr	r3, [r7, #48]
 7996 015e 1833     		adds	r3, r3, #24
 7997 0160 1946     		mov	r1, r3
 7998 0162 1248     		ldr	r0, .L518+12
 7999 0164 FFF7FEFF 		bl	vListInsertEnd
 8000              	.L513:
4994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001              		.loc 1 4996 14
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 233


 8002 0168 3B6B     		ldr	r3, [r7, #48]
 8003 016a DA6A     		ldr	r2, [r3, #44]
 8004              		.loc 1 4996 41
 8005 016c 104B     		ldr	r3, .L518+16
 8006 016e 1B68     		ldr	r3, [r3]
 8007 0170 DB6A     		ldr	r3, [r3, #44]
 8008              		.loc 1 4996 7
 8009 0172 9A42     		cmp	r2, r3
 8010 0174 08D9     		bls	.L508
4997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
5000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 8011              		.loc 1 5000 8
 8012 0176 3B6C     		ldr	r3, [r7, #64]
 8013 0178 002B     		cmp	r3, #0
 8014 017a 02D0     		beq	.L514
5001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
5002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 8015              		.loc 1 5002 34
 8016 017c 3B6C     		ldr	r3, [r7, #64]
 8017 017e 0122     		movs	r2, #1
 8018 0180 1A60     		str	r2, [r3]
 8019              	.L514:
5003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
5004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
5006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter to an ISR
5007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					safe FreeRTOS function. */
5008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldPending = pdTRUE;
 8020              		.loc 1 5008 20
 8021 0182 0C4B     		ldr	r3, .L518+20
 8022 0184 0122     		movs	r2, #1
 8023 0186 1A60     		str	r2, [r3]
 8024              	.L508:
 8025 0188 FB6A     		ldr	r3, [r7, #44]
 8026 018a 3B61     		str	r3, [r7, #16]
 8027              	.LBB245:
 8028              	.LBB246:
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 8029              		.loc 2 229 2
 8030 018c 3B69     		ldr	r3, [r7, #16]
 8031              		.syntax unified
 8032              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 8033 018e 83F31188 			msr basepri, r3	
 8034              	@ 0 "" 2
 8035              		.loc 2 233 1
 8036              		.thumb
 8037              		.syntax unified
 8038 0192 00BF     		nop
 8039              	.LBE246:
 8040              	.LBE245:
5009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 234


5014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 8041              		.loc 1 5018 10
 8042 0194 7B6B     		ldr	r3, [r7, #52]
5019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 8043              		.loc 1 5019 2
 8044 0196 1846     		mov	r0, r3
 8045 0198 3837     		adds	r7, r7, #56
 8046              	.LCFI311:
 8047              		.cfi_def_cfa_offset 8
 8048 019a BD46     		mov	sp, r7
 8049              	.LCFI312:
 8050              		.cfi_def_cfa_register 13
 8051              		@ sp needed
 8052 019c 80BD     		pop	{r7, pc}
 8053              	.L519:
 8054 019e 00BF     		.align	2
 8055              	.L518:
 8056 01a0 00000000 		.word	uxSchedulerSuspended
 8057 01a4 00000000 		.word	uxTopReadyPriority
 8058 01a8 00000000 		.word	pxReadyTasksLists
 8059 01ac 00000000 		.word	xPendingReadyList
 8060 01b0 00000000 		.word	pxCurrentTCB
 8061 01b4 00000000 		.word	xYieldPending
 8062              		.cfi_endproc
 8063              	.LFE64:
 8065              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 8066              		.align	1
 8067              		.global	vTaskNotifyGiveFromISR
 8068              		.syntax unified
 8069              		.thumb
 8070              		.thumb_func
 8071              		.fpu fpv4-sp-d16
 8073              	vTaskNotifyGiveFromISR:
 8074              	.LFB65:
5020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
5027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 8075              		.loc 1 5027 2
 8076              		.cfi_startproc
 8077              		@ args = 0, pretend = 0, frame = 40
 8078              		@ frame_needed = 1, uses_anonymous_args = 0
 8079 0000 80B5     		push	{r7, lr}
 8080              	.LCFI313:
 8081              		.cfi_def_cfa_offset 8
 8082              		.cfi_offset 7, -8
 8083              		.cfi_offset 14, -4
 8084 0002 8AB0     		sub	sp, sp, #40
 8085              	.LCFI314:
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 235


 8086              		.cfi_def_cfa_offset 48
 8087 0004 00AF     		add	r7, sp, #0
 8088              	.LCFI315:
 8089              		.cfi_def_cfa_register 7
 8090 0006 7860     		str	r0, [r7, #4]
 8091 0008 3960     		str	r1, [r7]
5028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
5029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
5030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
5031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 8092              		.loc 1 5032 3
 8093 000a 7B68     		ldr	r3, [r7, #4]
 8094 000c 002B     		cmp	r3, #0
 8095 000e 0AD1     		bne	.L521
 8096              	.LBB247:
 8097              	.LBB248:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 8098              		.loc 2 195 2
 8099              		.syntax unified
 8100              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 8101 0010 4FF05003 			mov r3, #80												
 8102 0014 83F31188 		msr basepri, r3											
 8103 0018 BFF36F8F 		isb														
 8104 001c BFF34F8F 		dsb														
 8105              	
 8106              	@ 0 "" 2
 8107              		.thumb
 8108              		.syntax unified
 8109 0020 BB61     		str	r3, [r7, #24]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 8110              		.loc 2 203 1
 8111 0022 00BF     		nop
 8112              	.L522:
 8113              	.LBE248:
 8114              	.LBE247:
 8115              		.loc 1 5032 3 discriminator 1
 8116 0024 FEE7     		b	.L522
 8117              	.L521:
5033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
5035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
5036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
5037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
5038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
5039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
5040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
5041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
5042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
5043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
5044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
5045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
5046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
5047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
5048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
5049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
5050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 236


 8118              		.loc 1 5050 3
 8119 0026 FFF7FEFF 		bl	vPortValidateInterruptPriority
5051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 8120              		.loc 1 5052 9
 8121 002a 7B68     		ldr	r3, [r7, #4]
 8122 002c 7B62     		str	r3, [r7, #36]
 8123              	.LBB249:
 8124              	.LBB250:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 8125              		.loc 2 211 2
 8126              		.syntax unified
 8127              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 8128 002e EFF31182 			mrs r2, basepri											
 8129 0032 4FF05003 		mov r3, #80												
 8130 0036 83F31188 		msr basepri, r3											
 8131 003a BFF36F8F 		isb														
 8132 003e BFF34F8F 		dsb														
 8133              	
 8134              	@ 0 "" 2
 8135              		.thumb
 8136              		.syntax unified
 8137 0042 7A61     		str	r2, [r7, #20]
 8138 0044 3B61     		str	r3, [r7, #16]
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 8139              		.loc 2 223 9
 8140 0046 7B69     		ldr	r3, [r7, #20]
 8141              	.LBE250:
 8142              	.LBE249:
5053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8143              		.loc 1 5054 28
 8144 0048 3B62     		str	r3, [r7, #32]
5055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8145              		.loc 1 5056 26
 8146 004a 7B6A     		ldr	r3, [r7, #36]
 8147 004c 93F86030 		ldrb	r3, [r3, #96]
 8148 0050 FB77     		strb	r3, [r7, #31]
5057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8149              		.loc 1 5057 25
 8150 0052 7B6A     		ldr	r3, [r7, #36]
 8151 0054 0222     		movs	r2, #2
 8152 0056 83F86020 		strb	r2, [r3, #96]
5058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
5060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			semaphore. */
5061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
 8153              		.loc 1 5061 11
 8154 005a 7B6A     		ldr	r3, [r7, #36]
 8155 005c DB6D     		ldr	r3, [r3, #92]
 8156              		.loc 1 5061 30
 8157 005e 5A1C     		adds	r2, r3, #1
 8158 0060 7B6A     		ldr	r3, [r7, #36]
 8159 0062 DA65     		str	r2, [r3, #92]
5062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 237


5064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
5066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
5067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8160              		.loc 1 5067 6
 8161 0064 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 8162 0066 012B     		cmp	r3, #1
 8163 0068 46D1     		bne	.L524
5068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
5070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8164              		.loc 1 5070 5
 8165 006a 7B6A     		ldr	r3, [r7, #36]
 8166 006c 9B6A     		ldr	r3, [r3, #40]
 8167 006e 002B     		cmp	r3, #0
 8168 0070 0AD0     		beq	.L525
 8169              	.LBB251:
 8170              	.LBB252:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 8171              		.loc 2 195 2
 8172              		.syntax unified
 8173              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 8174 0072 4FF05003 			mov r3, #80												
 8175 0076 83F31188 		msr basepri, r3											
 8176 007a BFF36F8F 		isb														
 8177 007e BFF34F8F 		dsb														
 8178              	
 8179              	@ 0 "" 2
 8180              		.thumb
 8181              		.syntax unified
 8182 0082 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 8183              		.loc 2 203 1
 8184 0084 00BF     		nop
 8185              	.L526:
 8186              	.LBE252:
 8187              	.LBE251:
 8188              		.loc 1 5070 5 discriminator 2
 8189 0086 FEE7     		b	.L526
 8190              	.L525:
5071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8191              		.loc 1 5072 30
 8192 0088 204B     		ldr	r3, .L531
 8193 008a 1B68     		ldr	r3, [r3]
 8194              		.loc 1 5072 7
 8195 008c 002B     		cmp	r3, #0
 8196 008e 1DD1     		bne	.L527
5073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8197              		.loc 1 5074 15
 8198 0090 7B6A     		ldr	r3, [r7, #36]
 8199 0092 0433     		adds	r3, r3, #4
 8200 0094 1846     		mov	r0, r3
 8201 0096 FFF7FEFF 		bl	uxListRemove
5075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 8202              		.loc 1 5075 6
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 238


 8203 009a 7B6A     		ldr	r3, [r7, #36]
 8204 009c DA6A     		ldr	r2, [r3, #44]
 8205 009e 1C4B     		ldr	r3, .L531+4
 8206 00a0 1B68     		ldr	r3, [r3]
 8207 00a2 9A42     		cmp	r2, r3
 8208 00a4 03D9     		bls	.L528
 8209              		.loc 1 5075 6 is_stmt 0 discriminator 1
 8210 00a6 7B6A     		ldr	r3, [r7, #36]
 8211 00a8 DB6A     		ldr	r3, [r3, #44]
 8212 00aa 194A     		ldr	r2, .L531+4
 8213 00ac 1360     		str	r3, [r2]
 8214              	.L528:
 8215              		.loc 1 5075 6 discriminator 3
 8216 00ae 7B6A     		ldr	r3, [r7, #36]
 8217 00b0 DA6A     		ldr	r2, [r3, #44]
 8218 00b2 1346     		mov	r3, r2
 8219 00b4 9B00     		lsls	r3, r3, #2
 8220 00b6 1344     		add	r3, r3, r2
 8221 00b8 9B00     		lsls	r3, r3, #2
 8222 00ba 164A     		ldr	r2, .L531+8
 8223 00bc 1A44     		add	r2, r2, r3
 8224 00be 7B6A     		ldr	r3, [r7, #36]
 8225 00c0 0433     		adds	r3, r3, #4
 8226 00c2 1946     		mov	r1, r3
 8227 00c4 1046     		mov	r0, r2
 8228 00c6 FFF7FEFF 		bl	vListInsertEnd
 8229 00ca 05E0     		b	.L529
 8230              	.L527:
5076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
5080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
5081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8231              		.loc 1 5081 6 is_stmt 1
 8232 00cc 7B6A     		ldr	r3, [r7, #36]
 8233 00ce 1833     		adds	r3, r3, #24
 8234 00d0 1946     		mov	r1, r3
 8235 00d2 1148     		ldr	r0, .L531+12
 8236 00d4 FFF7FEFF 		bl	vListInsertEnd
 8237              	.L529:
5082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8238              		.loc 1 5084 14
 8239 00d8 7B6A     		ldr	r3, [r7, #36]
 8240 00da DA6A     		ldr	r2, [r3, #44]
 8241              		.loc 1 5084 41
 8242 00dc 0F4B     		ldr	r3, .L531+16
 8243 00de 1B68     		ldr	r3, [r3]
 8244 00e0 DB6A     		ldr	r3, [r3, #44]
 8245              		.loc 1 5084 7
 8246 00e2 9A42     		cmp	r2, r3
 8247 00e4 08D9     		bls	.L524
5085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
5087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 239


5088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 8248              		.loc 1 5088 8
 8249 00e6 3B68     		ldr	r3, [r7]
 8250 00e8 002B     		cmp	r3, #0
 8251 00ea 02D0     		beq	.L530
5089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
5090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 8252              		.loc 1 5090 34
 8253 00ec 3B68     		ldr	r3, [r7]
 8254 00ee 0122     		movs	r2, #1
 8255 00f0 1A60     		str	r2, [r3]
 8256              	.L530:
5091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
5092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
5094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter in an ISR
5095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					safe FreeRTOS function. */
5096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldPending = pdTRUE;
 8257              		.loc 1 5096 20
 8258 00f2 0B4B     		ldr	r3, .L531+20
 8259 00f4 0122     		movs	r2, #1
 8260 00f6 1A60     		str	r2, [r3]
 8261              	.L524:
 8262 00f8 3B6A     		ldr	r3, [r7, #32]
 8263 00fa BB60     		str	r3, [r7, #8]
 8264              	.LBB253:
 8265              	.LBB254:
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 8266              		.loc 2 229 2
 8267 00fc BB68     		ldr	r3, [r7, #8]
 8268              		.syntax unified
 8269              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 8270 00fe 83F31188 			msr basepri, r3	
 8271              	@ 0 "" 2
 8272              		.loc 2 233 1
 8273              		.thumb
 8274              		.syntax unified
 8275 0102 00BF     		nop
 8276              	.LBE254:
 8277              	.LBE253:
5097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 8278              		.loc 1 5105 2
 8279 0104 00BF     		nop
 8280 0106 2837     		adds	r7, r7, #40
 8281              	.LCFI316:
 8282              		.cfi_def_cfa_offset 8
 8283 0108 BD46     		mov	sp, r7
 8284              	.LCFI317:
 8285              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 240


 8286              		@ sp needed
 8287 010a 80BD     		pop	{r7, pc}
 8288              	.L532:
 8289              		.align	2
 8290              	.L531:
 8291 010c 00000000 		.word	uxSchedulerSuspended
 8292 0110 00000000 		.word	uxTopReadyPriority
 8293 0114 00000000 		.word	pxReadyTasksLists
 8294 0118 00000000 		.word	xPendingReadyList
 8295 011c 00000000 		.word	pxCurrentTCB
 8296 0120 00000000 		.word	xYieldPending
 8297              		.cfi_endproc
 8298              	.LFE65:
 8300              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 8301              		.align	1
 8302              		.global	xTaskNotifyStateClear
 8303              		.syntax unified
 8304              		.thumb
 8305              		.thumb_func
 8306              		.fpu fpv4-sp-d16
 8308              	xTaskNotifyStateClear:
 8309              	.LFB66:
5106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
5113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 8310              		.loc 1 5113 2
 8311              		.cfi_startproc
 8312              		@ args = 0, pretend = 0, frame = 16
 8313              		@ frame_needed = 1, uses_anonymous_args = 0
 8314 0000 80B5     		push	{r7, lr}
 8315              	.LCFI318:
 8316              		.cfi_def_cfa_offset 8
 8317              		.cfi_offset 7, -8
 8318              		.cfi_offset 14, -4
 8319 0002 84B0     		sub	sp, sp, #16
 8320              	.LCFI319:
 8321              		.cfi_def_cfa_offset 24
 8322 0004 00AF     		add	r7, sp, #0
 8323              	.LCFI320:
 8324              		.cfi_def_cfa_register 7
 8325 0006 7860     		str	r0, [r7, #4]
5114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
5115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
5116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
5118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
5119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 8326              		.loc 1 5119 11
 8327 0008 7B68     		ldr	r3, [r7, #4]
 8328 000a 002B     		cmp	r3, #0
 8329 000c 02D1     		bne	.L534
 8330              		.loc 1 5119 11 is_stmt 0 discriminator 1
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 241


 8331 000e 0E4B     		ldr	r3, .L539
 8332 0010 1B68     		ldr	r3, [r3]
 8333 0012 00E0     		b	.L535
 8334              	.L534:
 8335              		.loc 1 5119 11 discriminator 2
 8336 0014 7B68     		ldr	r3, [r7, #4]
 8337              	.L535:
 8338              		.loc 1 5119 9 is_stmt 1 discriminator 4
 8339 0016 BB60     		str	r3, [r7, #8]
5120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 8340              		.loc 1 5121 3 discriminator 4
 8341 0018 FFF7FEFF 		bl	vPortEnterCritical
5122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 8342              		.loc 1 5123 13 discriminator 4
 8343 001c BB68     		ldr	r3, [r7, #8]
 8344 001e 93F86030 		ldrb	r3, [r3, #96]
 8345 0022 DBB2     		uxtb	r3, r3
 8346              		.loc 1 5123 6 discriminator 4
 8347 0024 022B     		cmp	r3, #2
 8348 0026 06D1     		bne	.L536
5124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8349              		.loc 1 5125 26
 8350 0028 BB68     		ldr	r3, [r7, #8]
 8351 002a 0022     		movs	r2, #0
 8352 002c 83F86020 		strb	r2, [r3, #96]
5126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 8353              		.loc 1 5126 13
 8354 0030 0123     		movs	r3, #1
 8355 0032 FB60     		str	r3, [r7, #12]
 8356 0034 01E0     		b	.L537
 8357              	.L536:
5127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
 8358              		.loc 1 5130 13
 8359 0036 0023     		movs	r3, #0
 8360 0038 FB60     		str	r3, [r7, #12]
 8361              	.L537:
5131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 8362              		.loc 1 5133 3
 8363 003a FFF7FEFF 		bl	vPortExitCritical
5134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 8364              		.loc 1 5135 10
 8365 003e FB68     		ldr	r3, [r7, #12]
5136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 8366              		.loc 1 5136 2
 8367 0040 1846     		mov	r0, r3
 8368 0042 1037     		adds	r7, r7, #16
 8369              	.LCFI321:
 8370              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 242


 8371 0044 BD46     		mov	sp, r7
 8372              	.LCFI322:
 8373              		.cfi_def_cfa_register 13
 8374              		@ sp needed
 8375 0046 80BD     		pop	{r7, pc}
 8376              	.L540:
 8377              		.align	2
 8378              	.L539:
 8379 0048 00000000 		.word	pxCurrentTCB
 8380              		.cfi_endproc
 8381              	.LFE66:
 8383              		.section	.text.ulTaskNotifyValueClear,"ax",%progbits
 8384              		.align	1
 8385              		.global	ulTaskNotifyValueClear
 8386              		.syntax unified
 8387              		.thumb
 8388              		.thumb_func
 8389              		.fpu fpv4-sp-d16
 8391              	ulTaskNotifyValueClear:
 8392              	.LFB67:
5137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyValueClear( TaskHandle_t xTask, uint32_t ulBitsToClear )
5144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 8393              		.loc 1 5144 2
 8394              		.cfi_startproc
 8395              		@ args = 0, pretend = 0, frame = 16
 8396              		@ frame_needed = 1, uses_anonymous_args = 0
 8397 0000 80B5     		push	{r7, lr}
 8398              	.LCFI323:
 8399              		.cfi_def_cfa_offset 8
 8400              		.cfi_offset 7, -8
 8401              		.cfi_offset 14, -4
 8402 0002 84B0     		sub	sp, sp, #16
 8403              	.LCFI324:
 8404              		.cfi_def_cfa_offset 24
 8405 0004 00AF     		add	r7, sp, #0
 8406              	.LCFI325:
 8407              		.cfi_def_cfa_register 7
 8408 0006 7860     		str	r0, [r7, #4]
 8409 0008 3960     		str	r1, [r7]
5145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
5146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
5147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
5149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
5150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 8410              		.loc 1 5150 11
 8411 000a 7B68     		ldr	r3, [r7, #4]
 8412 000c 002B     		cmp	r3, #0
 8413 000e 02D1     		bne	.L542
 8414              		.loc 1 5150 11 is_stmt 0 discriminator 1
 8415 0010 0C4B     		ldr	r3, .L545
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 243


 8416 0012 1B68     		ldr	r3, [r3]
 8417 0014 00E0     		b	.L543
 8418              	.L542:
 8419              		.loc 1 5150 11 discriminator 2
 8420 0016 7B68     		ldr	r3, [r7, #4]
 8421              	.L543:
 8422              		.loc 1 5150 9 is_stmt 1 discriminator 4
 8423 0018 FB60     		str	r3, [r7, #12]
5151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 8424              		.loc 1 5152 3 discriminator 4
 8425 001a FFF7FEFF 		bl	vPortEnterCritical
5153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Return the notification as it was before the bits were cleared,
5155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then clear the bit mask. */
5156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8426              		.loc 1 5156 27 discriminator 4
 8427 001e 094B     		ldr	r3, .L545
 8428 0020 1B68     		ldr	r3, [r3]
 8429              		.loc 1 5156 13 discriminator 4
 8430 0022 DB6D     		ldr	r3, [r3, #92]
 8431 0024 BB60     		str	r3, [r7, #8]
5157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
 8432              		.loc 1 5157 27 discriminator 4
 8433 0026 FB68     		ldr	r3, [r7, #12]
 8434 0028 DA6D     		ldr	r2, [r3, #92]
 8435              		.loc 1 5157 30 discriminator 4
 8436 002a 3B68     		ldr	r3, [r7]
 8437 002c DB43     		mvns	r3, r3
 8438              		.loc 1 5157 27 discriminator 4
 8439 002e 1A40     		ands	r2, r2, r3
 8440 0030 FB68     		ldr	r3, [r7, #12]
 8441 0032 DA65     		str	r2, [r3, #92]
5158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 8442              		.loc 1 5159 3 discriminator 4
 8443 0034 FFF7FEFF 		bl	vPortExitCritical
5160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
 8444              		.loc 1 5161 10 discriminator 4
 8445 0038 BB68     		ldr	r3, [r7, #8]
5162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 8446              		.loc 1 5162 2 discriminator 4
 8447 003a 1846     		mov	r0, r3
 8448 003c 1037     		adds	r7, r7, #16
 8449              	.LCFI326:
 8450              		.cfi_def_cfa_offset 8
 8451 003e BD46     		mov	sp, r7
 8452              	.LCFI327:
 8453              		.cfi_def_cfa_register 13
 8454              		@ sp needed
 8455 0040 80BD     		pop	{r7, pc}
 8456              	.L546:
 8457 0042 00BF     		.align	2
 8458              	.L545:
 8459 0044 00000000 		.word	pxCurrentTCB
 8460              		.cfi_endproc
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 244


 8461              	.LFE67:
 8463              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 8464              		.align	1
 8465              		.syntax unified
 8466              		.thumb
 8467              		.thumb_func
 8468              		.fpu fpv4-sp-d16
 8470              	prvAddCurrentTaskToDelayedList:
 8471              	.LFB68:
5163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
5168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskGetIdleRunTimeCounter( void )
5170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle->ulRunTimeCounter;
5172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
5175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
5178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 8472              		.loc 1 5178 1
 8473              		.cfi_startproc
 8474              		@ args = 0, pretend = 0, frame = 16
 8475              		@ frame_needed = 1, uses_anonymous_args = 0
 8476 0000 80B5     		push	{r7, lr}
 8477              	.LCFI328:
 8478              		.cfi_def_cfa_offset 8
 8479              		.cfi_offset 7, -8
 8480              		.cfi_offset 14, -4
 8481 0002 84B0     		sub	sp, sp, #16
 8482              	.LCFI329:
 8483              		.cfi_def_cfa_offset 24
 8484 0004 00AF     		add	r7, sp, #0
 8485              	.LCFI330:
 8486              		.cfi_def_cfa_register 7
 8487 0006 7860     		str	r0, [r7, #4]
 8488 0008 3960     		str	r1, [r7]
5179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
5180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 8489              		.loc 1 5180 18
 8490 000a 214B     		ldr	r3, .L552
 8491 000c 1B68     		ldr	r3, [r3]
 8492 000e FB60     		str	r3, [r7, #12]
5181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
5183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
5185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
5186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		when the task leaves the Blocked state. */
5187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
5188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 245


5190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
5192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	as the same list item is used for both lists. */
5193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8493              		.loc 1 5193 35
 8494 0010 204B     		ldr	r3, .L552+4
 8495 0012 1B68     		ldr	r3, [r3]
 8496              		.loc 1 5193 6
 8497 0014 0433     		adds	r3, r3, #4
 8498 0016 1846     		mov	r0, r3
 8499 0018 FFF7FEFF 		bl	uxListRemove
5194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
5196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
5197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentT
5198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
5200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
5202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
5205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8500              		.loc 1 5206 5
 8501 001c 7B68     		ldr	r3, [r7, #4]
 8502 001e B3F1FF3F 		cmp	r3, #-1
 8503 0022 0AD1     		bne	.L548
 8504              		.loc 1 5206 41 discriminator 1
 8505 0024 3B68     		ldr	r3, [r7]
 8506 0026 002B     		cmp	r3, #0
 8507 0028 07D0     		beq	.L548
5207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
5209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
5210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			indefinitely. */
5211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8508              		.loc 1 5211 56
 8509 002a 1A4B     		ldr	r3, .L552+4
 8510 002c 1B68     		ldr	r3, [r3]
 8511              		.loc 1 5211 4
 8512 002e 0433     		adds	r3, r3, #4
 8513 0030 1946     		mov	r1, r3
 8514 0032 1948     		ldr	r0, .L552+8
 8515 0034 FFF7FEFF 		bl	vListInsertEnd
5212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
5214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
5216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
5217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			kernel will manage it correctly. */
5218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
5219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
5221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 246


5224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
5226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list. */
5227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
5232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
5233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
5236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
5237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				needs to be updated too. */
5238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
5239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
5241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
5250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
5252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
5253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		will manage it correctly. */
5254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
5255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The list item will be inserted in wake time order. */
5257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTimeToWake < xConstTickCount )
5260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
5262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
5265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
5267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
5270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
5271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			too. */
5272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
5273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
5275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
5279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 247


5281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
5283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xCanBlockIndefinitely;
5284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
5286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 8516              		.loc 1 5286 1
 8517 0038 26E0     		b	.L551
 8518              	.L548:
5218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 8519              		.loc 1 5218 16
 8520 003a FA68     		ldr	r2, [r7, #12]
 8521 003c 7B68     		ldr	r3, [r7, #4]
 8522 003e 1344     		add	r3, r3, r2
 8523 0040 BB60     		str	r3, [r7, #8]
5221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 8524              		.loc 1 5221 4
 8525 0042 144B     		ldr	r3, .L552+4
 8526 0044 1B68     		ldr	r3, [r3]
 8527 0046 BA68     		ldr	r2, [r7, #8]
 8528 0048 5A60     		str	r2, [r3, #4]
5223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 8529              		.loc 1 5223 6
 8530 004a BA68     		ldr	r2, [r7, #8]
 8531 004c FB68     		ldr	r3, [r7, #12]
 8532 004e 9A42     		cmp	r2, r3
 8533 0050 09D2     		bcs	.L550
5227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 8534              		.loc 1 5227 5
 8535 0052 124B     		ldr	r3, .L552+12
 8536 0054 1A68     		ldr	r2, [r3]
5227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 8537              		.loc 1 5227 60
 8538 0056 0F4B     		ldr	r3, .L552+4
 8539 0058 1B68     		ldr	r3, [r3]
5227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 8540              		.loc 1 5227 5
 8541 005a 0433     		adds	r3, r3, #4
 8542 005c 1946     		mov	r1, r3
 8543 005e 1046     		mov	r0, r2
 8544 0060 FFF7FEFF 		bl	vListInsert
 8545              		.loc 1 5286 1
 8546 0064 10E0     		b	.L551
 8547              	.L550:
5233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 8548              		.loc 1 5233 5
 8549 0066 0E4B     		ldr	r3, .L552+16
 8550 0068 1A68     		ldr	r2, [r3]
5233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 8551              		.loc 1 5233 52
 8552 006a 0A4B     		ldr	r3, .L552+4
 8553 006c 1B68     		ldr	r3, [r3]
5233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 8554              		.loc 1 5233 5
 8555 006e 0433     		adds	r3, r3, #4
 8556 0070 1946     		mov	r1, r3
 8557 0072 1046     		mov	r0, r2
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 248


 8558 0074 FFF7FEFF 		bl	vListInsert
5238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 8559              		.loc 1 5238 21
 8560 0078 0A4B     		ldr	r3, .L552+20
 8561 007a 1B68     		ldr	r3, [r3]
5238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 8562              		.loc 1 5238 7
 8563 007c BA68     		ldr	r2, [r7, #8]
 8564 007e 9A42     		cmp	r2, r3
 8565 0080 02D2     		bcs	.L551
5240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 8566              		.loc 1 5240 27
 8567 0082 084A     		ldr	r2, .L552+20
 8568 0084 BB68     		ldr	r3, [r7, #8]
 8569 0086 1360     		str	r3, [r2]
 8570              	.L551:
 8571              		.loc 1 5286 1
 8572 0088 00BF     		nop
 8573 008a 1037     		adds	r7, r7, #16
 8574              	.LCFI331:
 8575              		.cfi_def_cfa_offset 8
 8576 008c BD46     		mov	sp, r7
 8577              	.LCFI332:
 8578              		.cfi_def_cfa_register 13
 8579              		@ sp needed
 8580 008e 80BD     		pop	{r7, pc}
 8581              	.L553:
 8582              		.align	2
 8583              	.L552:
 8584 0090 00000000 		.word	xTickCount
 8585 0094 00000000 		.word	pxCurrentTCB
 8586 0098 00000000 		.word	xSuspendedTaskList
 8587 009c 00000000 		.word	pxOverflowDelayedTaskList
 8588 00a0 00000000 		.word	pxDelayedTaskList
 8589 00a4 00000000 		.word	xNextTaskUnblockTime
 8590              		.cfi_endproc
 8591              	.LFE68:
 8593              		.text
 8594              	.Letext0:
 8595              		.file 3 "c:\\arm-gcc\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\lib\\gcc\\arm-none-eabi\\10.2.1\\
 8596              		.file 4 "c:\\arm-gcc\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\machine\\
 8597              		.file 5 "c:\\arm-gcc\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\sys\\_std
 8598              		.file 6 "Middlewares/Third_Party/FreeRTOS/Source/include/projdefs.h"
 8599              		.file 7 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 8600              		.file 8 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 8601              		.file 9 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 249


DEFINED SYMBOLS
                            *ABS*:00000000 tasks.c
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:22     .bss.pxCurrentTCB:00000000 pxCurrentTCB
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:19     .bss.pxCurrentTCB:00000000 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:25     .bss.pxReadyTasksLists:00000000 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:28     .bss.pxReadyTasksLists:00000000 pxReadyTasksLists
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:31     .bss.xDelayedTaskList1:00000000 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:34     .bss.xDelayedTaskList1:00000000 xDelayedTaskList1
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:37     .bss.xDelayedTaskList2:00000000 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:40     .bss.xDelayedTaskList2:00000000 xDelayedTaskList2
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:43     .bss.pxDelayedTaskList:00000000 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:46     .bss.pxDelayedTaskList:00000000 pxDelayedTaskList
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:49     .bss.pxOverflowDelayedTaskList:00000000 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:52     .bss.pxOverflowDelayedTaskList:00000000 pxOverflowDelayedTaskList
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:55     .bss.xPendingReadyList:00000000 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:58     .bss.xPendingReadyList:00000000 xPendingReadyList
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:61     .bss.xTasksWaitingTermination:00000000 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:64     .bss.xTasksWaitingTermination:00000000 xTasksWaitingTermination
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:67     .bss.uxDeletedTasksWaitingCleanUp:00000000 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:70     .bss.uxDeletedTasksWaitingCleanUp:00000000 uxDeletedTasksWaitingCleanUp
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:73     .bss.xSuspendedTaskList:00000000 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:76     .bss.xSuspendedTaskList:00000000 xSuspendedTaskList
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:79     .bss.uxCurrentNumberOfTasks:00000000 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:82     .bss.uxCurrentNumberOfTasks:00000000 uxCurrentNumberOfTasks
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:85     .bss.xTickCount:00000000 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:88     .bss.xTickCount:00000000 xTickCount
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:91     .bss.uxTopReadyPriority:00000000 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:94     .bss.uxTopReadyPriority:00000000 uxTopReadyPriority
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:97     .bss.xSchedulerRunning:00000000 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:100    .bss.xSchedulerRunning:00000000 xSchedulerRunning
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:103    .bss.xPendedTicks:00000000 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:106    .bss.xPendedTicks:00000000 xPendedTicks
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:109    .bss.xYieldPending:00000000 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:112    .bss.xYieldPending:00000000 xYieldPending
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:115    .bss.xNumOfOverflows:00000000 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:118    .bss.xNumOfOverflows:00000000 xNumOfOverflows
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:121    .bss.uxTaskNumber:00000000 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:124    .bss.uxTaskNumber:00000000 uxTaskNumber
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:127    .bss.xNextTaskUnblockTime:00000000 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:130    .bss.xNextTaskUnblockTime:00000000 xNextTaskUnblockTime
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:133    .bss.xIdleTaskHandle:00000000 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:136    .bss.xIdleTaskHandle:00000000 xIdleTaskHandle
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:139    .bss.uxSchedulerSuspended:00000000 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:142    .bss.uxSchedulerSuspended:00000000 uxSchedulerSuspended
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:145    .bss.ulTaskSwitchedInTime:00000000 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:148    .bss.ulTaskSwitchedInTime:00000000 ulTaskSwitchedInTime
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:151    .bss.ulTotalRunTime:00000000 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:154    .bss.ulTotalRunTime:00000000 ulTotalRunTime
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:157    .text.xTaskCreateStatic:00000000 $t
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:165    .text.xTaskCreateStatic:00000000 xTaskCreateStatic
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:452    .text.prvInitialiseNewTask:00000000 prvInitialiseNewTask
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:678    .text.prvAddNewTaskToReadyList:00000000 prvAddNewTaskToReadyList
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:331    .text.xTaskCreate:00000000 $t
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:338    .text.xTaskCreate:00000000 xTaskCreate
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:446    .text.prvInitialiseNewTask:00000000 $t
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:672    .text.prvAddNewTaskToReadyList:00000000 $t
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:5572   .text.prvInitialiseTaskLists:00000000 prvInitialiseTaskLists
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 250


C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:828    .text.prvAddNewTaskToReadyList:000000c4 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:839    .text.vTaskDelete:00000000 $t
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:846    .text.vTaskDelete:00000000 vTaskDelete
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:6200   .text.prvDeleteTCB:00000000 prvDeleteTCB
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:6295   .text.prvResetNextTaskUnblockTime:00000000 prvResetNextTaskUnblockTime
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:1005   .text.vTaskDelete:000000c4 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:1017   .text.vTaskDelayUntil:00000000 $t
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:1024   .text.vTaskDelayUntil:00000000 vTaskDelayUntil
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:2817   .text.vTaskSuspendAll:00000000 vTaskSuspendAll
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:8470   .text.prvAddCurrentTaskToDelayedList:00000000 prvAddCurrentTaskToDelayedList
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:2969   .text.xTaskResumeAll:00000000 xTaskResumeAll
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:1231   .text.vTaskDelayUntil:000000f0 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:1238   .text.vTaskDelay:00000000 $t
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:1245   .text.vTaskDelay:00000000 vTaskDelay
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:1338   .text.vTaskDelay:00000060 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:1344   .text.eTaskGetState:00000000 $t
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:1351   .text.eTaskGetState:00000000 eTaskGetState
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:1509   .text.eTaskGetState:000000b8 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:1518   .text.uxTaskPriorityGet:00000000 $t
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:1525   .text.uxTaskPriorityGet:00000000 uxTaskPriorityGet
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:1580   .text.uxTaskPriorityGet:00000030 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:1585   .text.uxTaskPriorityGetFromISR:00000000 $t
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:1592   .text.uxTaskPriorityGetFromISR:00000000 uxTaskPriorityGetFromISR
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:1683   .text.uxTaskPriorityGetFromISR:00000054 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:1688   .text.vTaskPrioritySet:00000000 $t
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:1695   .text.vTaskPrioritySet:00000000 vTaskPrioritySet
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:1925   .text.vTaskPrioritySet:0000012c $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:1933   .text.vTaskSuspend:00000000 $t
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:1940   .text.vTaskSuspend:00000000 vTaskSuspend
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:4083   .text.vTaskSwitchContext:00000000 vTaskSwitchContext
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:2112   .text.vTaskSuspend:000000d4 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:2122   .text.prvTaskIsTaskSuspended:00000000 $t
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:2128   .text.prvTaskIsTaskSuspended:00000000 prvTaskIsTaskSuspended
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:2221   .text.prvTaskIsTaskSuspended:0000005c $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:2227   .text.vTaskResume:00000000 $t
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:2234   .text.vTaskResume:00000000 vTaskResume
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:2373   .text.vTaskResume:000000ac $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:2381   .text.xTaskResumeFromISR:00000000 $t
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:2388   .text.xTaskResumeFromISR:00000000 xTaskResumeFromISR
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:2561   .text.xTaskResumeFromISR:000000d0 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:2570   .rodata:00000000 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:2574   .text.vTaskStartScheduler:00000000 $t
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:2581   .text.vTaskStartScheduler:00000000 vTaskStartScheduler
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:2734   .text.vTaskStartScheduler:000000b8 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:5365   .text.prvIdleTask:00000000 prvIdleTask
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:2744   .text.vTaskEndScheduler:00000000 $t
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:2751   .text.vTaskEndScheduler:00000000 vTaskEndScheduler
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:2805   .text.vTaskEndScheduler:0000002c $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:2810   .text.vTaskSuspendAll:00000000 $t
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:2852   .text.vTaskSuspendAll:00000018 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:2857   .text.prvGetExpectedIdleTime:00000000 $t
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:2863   .text.prvGetExpectedIdleTime:00000000 prvGetExpectedIdleTime
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:2953   .text.prvGetExpectedIdleTime:0000005c $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:2962   .text.xTaskResumeAll:00000000 $t
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:3815   .text.xTaskIncrementTick:00000000 xTaskIncrementTick
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:3188   .text.xTaskResumeAll:00000118 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:3201   .text.xTaskGetTickCount:00000000 $t
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 251


C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:3208   .text.xTaskGetTickCount:00000000 xTaskGetTickCount
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:3248   .text.xTaskGetTickCount:0000001c $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:3253   .text.xTaskGetTickCountFromISR:00000000 $t
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:3260   .text.xTaskGetTickCountFromISR:00000000 xTaskGetTickCountFromISR
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:3301   .text.xTaskGetTickCountFromISR:00000020 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:3306   .text.uxTaskGetNumberOfTasks:00000000 $t
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:3313   .text.uxTaskGetNumberOfTasks:00000000 uxTaskGetNumberOfTasks
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:3344   .text.uxTaskGetNumberOfTasks:00000014 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:3349   .text.pcTaskGetName:00000000 $t
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:3356   .text.pcTaskGetName:00000000 pcTaskGetName
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:3434   .text.pcTaskGetName:00000044 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:3439   .text.uxTaskGetSystemState:00000000 $t
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:3446   .text.uxTaskGetSystemState:00000000 uxTaskGetSystemState
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:5928   .text.prvListTasksWithinSingleList:00000000 prvListTasksWithinSingleList
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:3624   .text.uxTaskGetSystemState:00000108 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:3634   .text.vTaskStepTick:00000000 $t
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:3641   .text.vTaskStepTick:00000000 vTaskStepTick
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:3714   .text.vTaskStepTick:00000048 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:3720   .text.xTaskCatchUpTicks:00000000 $t
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:3727   .text.xTaskCatchUpTicks:00000000 xTaskCatchUpTicks
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:3802   .text.xTaskCatchUpTicks:0000004c $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:3808   .text.xTaskIncrementTick:00000000 $t
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:4061   .text.xTaskIncrementTick:00000148 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:4076   .text.vTaskSwitchContext:00000000 $t
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:4255   .text.vTaskSwitchContext:000000d8 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:4266   .text.vTaskPlaceOnEventList:00000000 $t
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:4273   .text.vTaskPlaceOnEventList:00000000 vTaskPlaceOnEventList
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:4343   .text.vTaskPlaceOnEventList:00000044 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:4348   .text.vTaskPlaceOnUnorderedEventList:00000000 $t
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:4355   .text.vTaskPlaceOnUnorderedEventList:00000000 vTaskPlaceOnUnorderedEventList
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:4459   .text.vTaskPlaceOnUnorderedEventList:00000070 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:4465   .text.vTaskPlaceOnEventListRestricted:00000000 $t
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:4472   .text.vTaskPlaceOnEventListRestricted:00000000 vTaskPlaceOnEventListRestricted
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:4551   .text.vTaskPlaceOnEventListRestricted:00000054 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:4556   .text.xTaskRemoveFromEventList:00000000 $t
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:4563   .text.xTaskRemoveFromEventList:00000000 xTaskRemoveFromEventList
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:4705   .text.xTaskRemoveFromEventList:000000b4 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:4715   .text.vTaskRemoveFromUnorderedEventList:00000000 $t
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:4722   .text.vTaskRemoveFromUnorderedEventList:00000000 vTaskRemoveFromUnorderedEventList
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:4868   .text.vTaskRemoveFromUnorderedEventList:000000b4 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:4877   .text.vTaskSetTimeOutState:00000000 $t
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:4884   .text.vTaskSetTimeOutState:00000000 vTaskSetTimeOutState
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:4955   .text.vTaskSetTimeOutState:00000044 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:4961   .text.vTaskInternalSetTimeOutState:00000000 $t
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:4968   .text.vTaskInternalSetTimeOutState:00000000 vTaskInternalSetTimeOutState
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:5013   .text.vTaskInternalSetTimeOutState:00000024 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:5019   .text.xTaskCheckForTimeOut:00000000 $t
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:5026   .text.xTaskCheckForTimeOut:00000000 xTaskCheckForTimeOut
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:5191   .text.xTaskCheckForTimeOut:000000bc $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:5197   .text.vTaskMissedYield:00000000 $t
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:5204   .text.vTaskMissedYield:00000000 vTaskMissedYield
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:5236   .text.vTaskMissedYield:00000014 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:5241   .text.uxTaskGetTaskNumber:00000000 $t
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:5248   .text.uxTaskGetTaskNumber:00000000 uxTaskGetTaskNumber
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:5303   .text.vTaskSetTaskNumber:00000000 $t
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:5310   .text.vTaskSetTaskNumber:00000000 vTaskSetTaskNumber
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:5359   .text.prvIdleTask:00000000 $t
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 252


C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:5668   .text.prvCheckTasksWaitingTermination:00000000 prvCheckTasksWaitingTermination
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:5464   .text.prvIdleTask:00000070 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:5472   .text.eTaskConfirmSleepModeStatus:00000000 $t
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:5479   .text.eTaskConfirmSleepModeStatus:00000000 eTaskConfirmSleepModeStatus
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:5558   .text.eTaskConfirmSleepModeStatus:0000004c $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:5566   .text.prvInitialiseTaskLists:00000000 $t
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:5650   .text.prvInitialiseTaskLists:00000060 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:5662   .text.prvCheckTasksWaitingTermination:00000000 $t
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:5741   .text.prvCheckTasksWaitingTermination:00000050 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:5748   .text.vTaskGetInfo:00000000 $t
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:5755   .text.vTaskGetInfo:00000000 vTaskGetInfo
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:6061   .text.prvTaskCheckFreeStackSpace:00000000 prvTaskCheckFreeStackSpace
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:5917   .text.vTaskGetInfo:000000c8 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:5922   .text.prvListTasksWithinSingleList:00000000 $t
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:6055   .text.prvTaskCheckFreeStackSpace:00000000 $t
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:6125   .text.uxTaskGetStackHighWaterMark:00000000 $t
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:6132   .text.uxTaskGetStackHighWaterMark:00000000 uxTaskGetStackHighWaterMark
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:6189   .text.uxTaskGetStackHighWaterMark:00000034 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:6194   .text.prvDeleteTCB:00000000 $t
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:6289   .text.prvResetNextTaskUnblockTime:00000000 $t
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:6357   .text.prvResetNextTaskUnblockTime:00000038 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:6363   .text.xTaskGetCurrentTaskHandle:00000000 $t
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:6370   .text.xTaskGetCurrentTaskHandle:00000000 xTaskGetCurrentTaskHandle
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:6410   .text.xTaskGetCurrentTaskHandle:0000001c $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:6415   .text.xTaskGetSchedulerState:00000000 $t
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:6422   .text.xTaskGetSchedulerState:00000000 xTaskGetSchedulerState
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:6484   .text.xTaskGetSchedulerState:00000034 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:6490   .text.xTaskPriorityInherit:00000000 $t
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:6497   .text.xTaskPriorityInherit:00000000 xTaskPriorityInherit
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:6646   .text.xTaskPriorityInherit:000000c4 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:6653   .text.xTaskPriorityDisinherit:00000000 $t
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:6660   .text.xTaskPriorityDisinherit:00000000 xTaskPriorityDisinherit
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:6828   .text.xTaskPriorityDisinherit:000000d0 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:6835   .text.vTaskPriorityDisinheritAfterTimeout:00000000 $t
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:6842   .text.vTaskPriorityDisinheritAfterTimeout:00000000 vTaskPriorityDisinheritAfterTimeout
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:7036   .text.vTaskPriorityDisinheritAfterTimeout:000000f8 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:7043   .text.uxTaskResetEventItemValue:00000000 $t
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:7050   .text.uxTaskResetEventItemValue:00000000 uxTaskResetEventItemValue
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:7100   .text.uxTaskResetEventItemValue:0000002c $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:7105   .text.pvTaskIncrementMutexHeldCount:00000000 $t
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:7112   .text.pvTaskIncrementMutexHeldCount:00000000 pvTaskIncrementMutexHeldCount
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:7157   .text.pvTaskIncrementMutexHeldCount:00000024 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:7162   .text.ulTaskNotifyTake:00000000 $t
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:7169   .text.ulTaskNotifyTake:00000000 ulTaskNotifyTake
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:7283   .text.ulTaskNotifyTake:00000088 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:7289   .text.xTaskNotifyWait:00000000 $t
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:7296   .text.xTaskNotifyWait:00000000 xTaskNotifyWait
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:7431   .text.xTaskNotifyWait:000000ac $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:7437   .text.xTaskGenericNotify:00000000 $t
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:7444   .text.xTaskGenericNotify:00000000 xTaskGenericNotify
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:7527   .text.xTaskGenericNotify:00000064 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:7532   .text.xTaskGenericNotify:00000078 $t
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:7718   .text.xTaskGenericNotify:00000164 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:7726   .text.xTaskGenericNotifyFromISR:00000000 $t
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:7733   .text.xTaskGenericNotifyFromISR:00000000 xTaskGenericNotifyFromISR
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:7838   .text.xTaskGenericNotifyFromISR:00000080 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:7843   .text.xTaskGenericNotifyFromISR:00000094 $t
ARM GAS  C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s 			page 253


C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:8056   .text.xTaskGenericNotifyFromISR:000001a0 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:8066   .text.vTaskNotifyGiveFromISR:00000000 $t
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:8073   .text.vTaskNotifyGiveFromISR:00000000 vTaskNotifyGiveFromISR
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:8291   .text.vTaskNotifyGiveFromISR:0000010c $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:8301   .text.xTaskNotifyStateClear:00000000 $t
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:8308   .text.xTaskNotifyStateClear:00000000 xTaskNotifyStateClear
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:8379   .text.xTaskNotifyStateClear:00000048 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:8384   .text.ulTaskNotifyValueClear:00000000 $t
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:8391   .text.ulTaskNotifyValueClear:00000000 ulTaskNotifyValueClear
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:8459   .text.ulTaskNotifyValueClear:00000044 $d
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:8464   .text.prvAddCurrentTaskToDelayedList:00000000 $t
C:\Users\EI\AppData\Local\Temp\cc9U1zJp.s:8584   .text.prvAddCurrentTaskToDelayedList:00000090 $d

UNDEFINED SYMBOLS
pvPortMalloc
vPortFree
memset
vListInitialiseItem
pxPortInitialiseStack
vPortEnterCritical
vListInsertEnd
vPortExitCritical
uxListRemove
vPortValidateInterruptPriority
vApplicationGetIdleTaskMemory
xTimerCreateTimerTask
CONFIGURE_TIMER_FOR_RUN_TIME_STATS
xPortStartScheduler
vPortEndScheduler
GET_RUN_TIME_COUNTER_VALUE
vListInsert
vPortSuppressTicksAndSleep
vListInitialise
